

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Apr 21 22:49:07 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4455
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.45
    68                           ; Generated 16/11/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4455 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  002038                     __pidataCOMRAM:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _LCD_isCursorOn
   107  002038  0001               	dw	1
   108                           
   109                           ;initializer for _LCD_isDisplayOn
   110  00203A  0001               	dw	1
   111                           
   112                           ;initializer for _LCD_isIncrement
   113  00203C  0001               	dw	1
   114                           
   115                           ;initializer for _LCD_posY
   116  00203E  0001               	dw	1
   117                           
   118                           ;initializer for _LCD_posX
   119  002040  0001               	dw	1
   120                           
   121                           ;initializer for _front
   122  002042  FF                 	db	255
   123                           
   124                           ;initializer for _rear
   125  002043  FF                 	db	255
   126  0000                     _LATBbits	set	3978
   127  0000                     _TRISDbits	set	3989
   128  0000                     _PORTD	set	3971
   129  0000                     _PORTDbits	set	3971
   130  0000                     _TRISD	set	3989
   131  0000                     _LATCbits	set	3979
   132  0000                     _ADRESL	set	4035
   133  0000                     _ADRESH	set	4036
   134  0000                     _ADCON0bits	set	4034
   135  0000                     _LATAbits	set	3977
   136  0000                     _TRISAbits	set	3986
   137  0000                     _TRISC	set	3988
   138  0000                     _LATC	set	3979
   139  0000                     _PORTC	set	3970
   140  0000                     _CCP2CON	set	4026
   141  0000                     _CCP1CON	set	4029
   142  0000                     _T3CONbits	set	4017
   143  0000                     _T1CONbits	set	4045
   144  0000                     _UCFGbits	set	3951
   145  0000                     _UCONbits	set	3949
   146  0000                     _INTCON2bits	set	4081
   147  0000                     _TRISBbits	set	3987
   148  0000                     _TRISE	set	3990
   149  0000                     _CMCON	set	4020
   150  0000                     _ADCON2	set	4032
   151  0000                     _ADCON0	set	4034
   152  0000                     _ADCON1	set	4033
   153  0000                     _LATEbits	set	3981
   154  0000                     _PORTEbits	set	3972
   155  0000                     _TRISB	set	3987
   156  0000                     _LATB	set	3978
   157  0000                     _T0CONbits	set	4053
   158  0000                     _PORTB	set	3969
   159  0000                     _PORTBbits	set	3969
   160  0000                     _INTCONbits	set	4082
   161                           
   162                           	psect	smallconst
   163  000800                     __psmallconst:
   164                           	opt stack 0
   165  000800  00                 	db	0
   166  000801  20                 	db	32
   167  000802  20                 	db	32
   168  000803  20                 	db	32
   169  000804  20                 	db	32
   170  000805  20                 	db	32
   171  000806  20                 	db	32
   172  000807  76                 	db	118	;'v'
   173  000808  30                 	db	48	;'0'
   174  000809  2E                 	db	46
   175  00080A  31                 	db	49	;'1'
   176  00080B  20                 	db	32
   177  00080C  20                 	db	32
   178  00080D  20                 	db	32
   179  00080E  20                 	db	32
   180  00080F  20                 	db	32
   181  000810  20                 	db	32
   182  000811  00                 	db	0
   183  000812  20                 	db	32
   184  000813  20                 	db	32
   185  000814  48                 	db	72	;'H'
   186  000815  69                 	db	105	;'i'
   187  000816  46                 	db	70	;'F'
   188  000817  69                 	db	105	;'i'
   189  000818  20                 	db	32
   190  000819  20                 	db	32
   191  00081A  50                 	db	80	;'P'
   192  00081B  72                 	db	114	;'r'
   193  00081C  65                 	db	101	;'e'
   194  00081D  61                 	db	97	;'a'
   195  00081E  6D                 	db	109	;'m'
   196  00081F  70                 	db	112	;'p'
   197  000820  20                 	db	32
   198  000821  20                 	db	32
   199  000822  00                 	db	0
   200  000823                     STR_3:
   201  000823  2A                 	db	42
   202  000824  2A                 	db	42
   203  000825  2A                 	db	42
   204  000826  44                 	db	68	;'D'
   205  000827  45                 	db	69	;'E'
   206  000828  42                 	db	66	;'B'
   207  000829  55                 	db	85	;'U'
   208  00082A  47                 	db	71	;'G'
   209  00082B  20                 	db	32
   210  00082C  4D                 	db	77	;'M'
   211  00082D  4F                 	db	79	;'O'
   212  00082E  44                 	db	68	;'D'
   213  00082F  45                 	db	69	;'E'
   214  000830  2A                 	db	42
   215  000831  2A                 	db	42
   216  000832  2A                 	db	42
   217  000833  00                 	db	0
   218  000834                     STR_10:
   219  000834  49                 	db	73	;'I'
   220  000835  4E                 	db	78	;'N'
   221  000836  56                 	db	86	;'V'
   222  000837  41                 	db	65	;'A'
   223  000838  4C                 	db	76	;'L'
   224  000839  49                 	db	73	;'I'
   225  00083A  44                 	db	68	;'D'
   226  00083B  20                 	db	32
   227  00083C  53                 	db	83	;'S'
   228  00083D  54                 	db	84	;'T'
   229  00083E  41                 	db	65	;'A'
   230  00083F  54                 	db	84	;'T'
   231  000840  45                 	db	69	;'E'
   232  000841  00                 	db	0
   233  000842                     STR_7:
   234  000842  52                 	db	82	;'R'
   235  000843  65                 	db	101	;'e'
   236  000844  61                 	db	97	;'a'
   237  000845  72                 	db	114	;'r'
   238  000846  20                 	db	32
   239  000847  42                 	db	66	;'B'
   240  000848  61                 	db	97	;'a'
   241  000849  6C                 	db	108	;'l'
   242  00084A  61                 	db	97	;'a'
   243  00084B  6E                 	db	110	;'n'
   244  00084C  63                 	db	99	;'c'
   245  00084D  65                 	db	101	;'e'
   246  00084E  00                 	db	0
   247  00084F                     STR_9:
   248  00084F  53                 	db	83	;'S'
   249  000850  65                 	db	101	;'e'
   250  000851  74                 	db	116	;'t'
   251  000852  75                 	db	117	;'u'
   252  000853  70                 	db	112	;'p'
   253  000854  2E                 	db	46
   254  000855  2E                 	db	46
   255  000856  2E                 	db	46
   256  000857  00                 	db	0
   257  000858                     STR_5:
   258  000858  43                 	db	67	;'C'
   259  000859  65                 	db	101	;'e'
   260  00085A  6E                 	db	110	;'n'
   261  00085B  74                 	db	116	;'t'
   262  00085C  72                 	db	114	;'r'
   263  00085D  65                 	db	101	;'e'
   264  00085E  00                 	db	0
   265  00085F                     STR_6:
   266  00085F  52                 	db	82	;'R'
   267  000860  65                 	db	101	;'e'
   268  000861  61                 	db	97	;'a'
   269  000862  72                 	db	114	;'r'
   270  000863  00                 	db	0
   271  000864                     STR_8:
   272  000864  4C                 	db	76	;'L'
   273  000865  46                 	db	70	;'F'
   274  000866  45                 	db	69	;'E'
   275  000867  00                 	db	0
   276  0000                     
   277                           ; #config settings
   278  000868  00                 	db	0	; dummy byte at the end
   279  0000                     
   280                           	psect	cinit
   281  001D48                     __pcinit:
   282                           	opt stack 0
   283  001D48                     start_initialization:
   284                           	opt stack 0
   285  001D48                     __initialization:
   286                           	opt stack 0
   287                           
   288                           ; Initialize objects allocated to COMRAM (12 bytes)
   289                           ; load TBLPTR registers with __pidataCOMRAM
   290  001D48  0E38               	movlw	low __pidataCOMRAM
   291  001D4A  6EF6               	movwf	tblptrl,c
   292  001D4C  0E20               	movlw	high __pidataCOMRAM
   293  001D4E  6EF7               	movwf	tblptrh,c
   294  001D50  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   295  001D52  6EF8               	movwf	tblptru,c
   296  001D54  EE00  F041         	lfsr	0,__pdataCOMRAM
   297  001D58  EE10 F00C          	lfsr	1,12
   298  001D5C                     copy_data0:
   299  001D5C  0009               	tblrd		*+
   300  001D5E  CFF5 FFEE          	movff	tablat,postinc0
   301  001D62  50E5               	movf	postdec1,w,c
   302  001D64  50E1               	movf	fsr1l,w,c
   303  001D66  E1FA               	bnz	copy_data0
   304                           
   305                           ; Clear objects allocated to BANK0 (35 bytes)
   306  001D68  EE00  F060         	lfsr	0,__pbssBANK0
   307  001D6C  0E23               	movlw	35
   308  001D6E                     clear_0:
   309  001D6E  6AEE               	clrf	postinc0,c
   310  001D70  06E8               	decf	wreg,f,c
   311  001D72  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to COMRAM (14 bytes)
   314  001D74  EE00  F033         	lfsr	0,__pbssCOMRAM
   315  001D78  0E0E               	movlw	14
   316  001D7A                     clear_1:
   317  001D7A  6AEE               	clrf	postinc0,c
   318  001D7C  06E8               	decf	wreg,f,c
   319  001D7E  E1FD               	bnz	clear_1
   320  001D80                     end_of_initialization:
   321                           	opt stack 0
   322  001D80                     __end_of__initialization:
   323                           	opt stack 0
   324  001D80  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   325  001D82  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   326  001D84  0E00               	movlw	low (__Lmediumconst shr (0+16))
   327  001D86  6EF8               	movwf	tblptru,c
   328  001D88  0100               	movlb	0
   329  001D8A  EF35  F004         	goto	_main	;jump to C main() function
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1l	equ	0xFE1
   338                           
   339                           	psect	bssCOMRAM
   340  000033                     __pbssCOMRAM:
   341                           	opt stack 0
   342  000033                     _LCD_isCursorMoving:
   343                           	opt stack 0
   344  000033                     	ds	2
   345  000035                     _LCD_isCursorBlinking:
   346                           	opt stack 0
   347  000035                     	ds	2
   348  000037                     _muted_volume_left:
   349                           	opt stack 0
   350  000037                     	ds	1
   351  000038                     _current_state:
   352                           	opt stack 0
   353  000038                     	ds	1
   354  000039                     _debug_mode:
   355                           	opt stack 0
   356  000039                     	ds	1
   357  00003A                     _encoder_dir:
   358                           	opt stack 0
   359  00003A                     	ds	1
   360  00003B                     _encoder_changed:
   361                           	opt stack 0
   362  00003B                     	ds	1
   363  00003C                     _encoder_a_prev:
   364                           	opt stack 0
   365  00003C                     	ds	1
   366  00003D                     _encoder_b:
   367                           	opt stack 0
   368  00003D                     	ds	1
   369  00003E                     _encoder_a:
   370                           	opt stack 0
   371  00003E                     	ds	1
   372  00003F                     _volume_right:
   373                           	opt stack 0
   374  00003F                     	ds	1
   375  000040                     _volume_left:
   376                           	opt stack 0
   377  000040                     	ds	1
   378                           tblptru	equ	0xFF8
   379                           tblptrh	equ	0xFF7
   380                           tblptrl	equ	0xFF6
   381                           tablat	equ	0xFF5
   382                           postinc0	equ	0xFEE
   383                           wreg	equ	0xFE8
   384                           postdec1	equ	0xFE5
   385                           fsr1l	equ	0xFE1
   386                           
   387                           	psect	dataCOMRAM
   388  000041                     __pdataCOMRAM:
   389                           	opt stack 0
   390  000041                     _LCD_isCursorOn:
   391                           	opt stack 0
   392  000041                     	ds	2
   393  000043                     _LCD_isDisplayOn:
   394                           	opt stack 0
   395  000043                     	ds	2
   396  000045                     _LCD_isIncrement:
   397                           	opt stack 0
   398  000045                     	ds	2
   399  000047                     _LCD_posY:
   400                           	opt stack 0
   401  000047                     	ds	2
   402  000049                     _LCD_posX:
   403                           	opt stack 0
   404  000049                     	ds	2
   405  00004B                     _front:
   406                           	opt stack 0
   407  00004B                     	ds	1
   408  00004C                     _rear:
   409                           	opt stack 0
   410  00004C                     	ds	1
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	bssBANK0
   421  000060                     __pbssBANK0:
   422                           	opt stack 0
   423  000060                     _configuration:
   424                           	opt stack 0
   425  000060                     	ds	16
   426  000070                     _queue:
   427                           	opt stack 0
   428  000070                     	ds	10
   429  00007A                     _led:
   430                           	opt stack 0
   431  00007A                     	ds	2
   432  00007C                     _relay_source:
   433                           	opt stack 0
   434  00007C                     	ds	2
   435  00007E                     _LCD_isShift:
   436                           	opt stack 0
   437  00007E                     	ds	2
   438  000080                     _is_muted:
   439                           	opt stack 0
   440  000080                     	ds	1
   441  000081                     _muted_volume_right:
   442                           	opt stack 0
   443  000081                     	ds	1
   444  000082                     _bal:
   445                           	opt stack 0
   446  000082                     	ds	1
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	cstackBANK0
   457  000083                     __pcstackBANK0:
   458                           	opt stack 0
   459  000083                     LCD_displayString@initialX:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463  000083                     	ds	2
   464  000085                     LCD_displayString@initialY:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x2
   468  000085                     	ds	2
   469  000087                     LCD_displayString@i:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x4
   473  000087                     	ds	2
   474  000089                     
   475                           ; 2 bytes @ 0x6
   476  000089                     	ds	2
   477  00008B                     
   478                           ; 3 bytes @ 0x8
   479  00008B                     	ds	3
   480  00008E                     
   481                           ; 1 bytes @ 0xB
   482  00008E                     	ds	1
   483  00008F                     main@volstring:
   484                           	opt stack 0
   485                           
   486                           ; 8 bytes @ 0xC
   487  00008F                     	ds	8
   488  000097                     main@switch_pressed:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x14
   492  000097                     	ds	1
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           postdec1	equ	0xFE5
   500                           fsr1l	equ	0xFE1
   501                           
   502                           	psect	cstackCOMRAM
   503  000001                     __pcstackCOMRAM:
   504                           	opt stack 0
   505  000001                     ??_isr:
   506  000001                     
   507                           ; 1 bytes @ 0x0
   508  000001                     	ds	18
   509  000013                     ??_update_switches_and_relays:
   510  000013                     ??_read_switches:
   511  000013                     ??_set_led_and_source:
   512  000013                     ?_strlen:
   513                           	opt stack 0
   514  000013                     ?___awdiv:
   515                           	opt stack 0
   516  000013                     set_volume@vol_right:
   517                           	opt stack 0
   518  000013                     Wait@delay:
   519                           	opt stack 0
   520  000013                     LCD_delay@time:
   521                           	opt stack 0
   522  000013                     LCD_delay_us@us:
   523                           	opt stack 0
   524  000013                     LCD_delay_ms@ms:
   525                           	opt stack 0
   526  000013                     LCD_8bitCodeNoWait@code:
   527                           	opt stack 0
   528  000013                     LCD_4bitCodeNoWait@code:
   529                           	opt stack 0
   530  000013                     ___awdiv@dividend:
   531                           	opt stack 0
   532  000013                     strlen@s:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x12
   536  000013                     	ds	1
   537  000014                     set_volume@vol_left:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x13
   541  000014                     	ds	1
   542  000015                     ??_strlen:
   543  000015                     ??_LCD_delay:
   544  000015                     ??_LCD_delay_us:
   545  000015                     ??_LCD_delay_ms:
   546  000015                     ??_LCD_8bitCodeNoWait:
   547  000015                     ??_LCD_4bitCodeNoWait:
   548  000015                     set_volume@i:
   549                           	opt stack 0
   550  000015                     read_switches@a2dval:
   551                           	opt stack 0
   552  000015                     ___awdiv@divisor:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x14
   556  000015                     	ds	1
   557  000016                     set_volume@i_650:
   558                           	opt stack 0
   559  000016                     set_led_and_source@s:
   560                           	opt stack 0
   561  000016                     LCD_delay@i:
   562                           	opt stack 0
   563  000016                     LCD_delay_us@i:
   564                           	opt stack 0
   565  000016                     LCD_delay_ms@i:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x15
   569  000016                     	ds	1
   570  000017                     set_volume@vbitsel:
   571                           	opt stack 0
   572  000017                     read_switches_synchronous@s:
   573                           	opt stack 0
   574  000017                     update_switches_and_relays@i:
   575                           	opt stack 0
   576  000017                     ___awdiv@counter:
   577                           	opt stack 0
   578  000017                     strlen@cp:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	1
   583  000018                     update_switches_and_relays@i_1104:
   584                           	opt stack 0
   585  000018                     ___awdiv@sign:
   586                           	opt stack 0
   587  000018                     LCD_8bitCode@code:
   588                           	opt stack 0
   589  000018                     LCD_4bitCode@code:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x17
   593  000018                     	ds	1
   594  000019                     ___awdiv@quotient:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x18
   598  000019                     	ds	1
   599  00001A                     LCD_code@code:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x19
   603  00001A                     	ds	1
   604  00001B                     ?___awmod:
   605                           	opt stack 0
   606  00001B                     ___awmod@dividend:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x1A
   610  00001B                     	ds	1
   611  00001C                     ??_LCD_code:
   612                           
   613                           ; 1 bytes @ 0x1B
   614  00001C                     	ds	1
   615  00001D                     ___awmod@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1C
   619  00001D                     	ds	2
   620  00001F                     ___awmod@counter:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x1E
   624  00001F                     	ds	1
   625  000020                     ___awmod@sign:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x1F
   629  000020                     	ds	1
   630  000021                     ??_LCD_cursorOff:
   631  000021                     ??_LCD_on:
   632  000021                     volumeDB@o:
   633                           	opt stack 0
   634  000021                     LCD_setCursor@pos:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x20
   638  000021                     	ds	2
   639  000023                     ??_volumeDB:
   640  000023                     LCD_setCursor@row:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x22
   644  000023                     	ds	2
   645  000025                     ??_LCD_setCursor:
   646  000025                     volumeDB@modulus:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x24
   650  000025                     	ds	2
   651  000027                     ??_LCD_init:
   652  000027                     volumeDB@gainDec:
   653                           	opt stack 0
   654  000027                     LCD_moveLeft@howMuch:
   655                           	opt stack 0
   656  000027                     LCD_moveRight@howMuch:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x26
   660  000027                     	ds	2
   661  000029                     ??_LCD_moveLeft:
   662  000029                     ??_LCD_moveRight:
   663  000029                     volumeDB@gain:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x28
   667  000029                     	ds	2
   668  00002B                     volumeDB@volume:
   669                           	opt stack 0
   670  00002B                     LCD_displayChar@inputChar:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x2A
   674  00002B                     	ds	1
   675  00002C                     LCD_slider@pos:
   676                           	opt stack 0
   677  00002C                     LCD_displayString@str:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x2B
   681  00002C                     	ds	1
   682  00002D                     LCD_slider@i:
   683                           	opt stack 0
   684  00002D                     LCD_init@LCD_dl:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2C
   688  00002D                     	ds	1
   689  00002E                     ??_LCD_displayString:
   690                           
   691                           ; 1 bytes @ 0x2D
   692  00002E                     	ds	1
   693  00002F                     LCD_init@LCD_n:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x2E
   697  00002F                     	ds	2
   698  000031                     LCD_init@LCD_f:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x30
   702  000031                     	ds	2
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 261 in file "newmain.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  argc            2    6[BANK0 ] int 
   720 ;;  argv            3    8[BANK0 ] PTR PTR unsigned char 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  volstring       8   12[BANK0 ] unsigned char [8]
   723 ;;  switch_press    1   20[BANK0 ] unsigned char 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  2    6[BANK0 ] int 
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   733 ;;      Params:         0       5       0       0       0       0       0       0       0
   734 ;;      Locals:         0       9       0       0       0       0       0       0       0
   735 ;;      Temps:          0       1       0       0       0       0       0       0       0
   736 ;;      Totals:         0      15       0       0       0       0       0       0       0
   737 ;;Total ram usage:       15 bytes
   738 ;; Hardware stack levels required when called:    9
   739 ;; This function calls:
   740 ;;		_LCD_clear
   741 ;;		_LCD_cursorOff
   742 ;;		_LCD_displayString
   743 ;;		_LCD_home
   744 ;;		_LCD_init
   745 ;;		_LCD_off
   746 ;;		_LCD_on
   747 ;;		_LCD_setCursor
   748 ;;		_LCD_slider
   749 ;;		_Wait
   750 ;;		_backlight_off
   751 ;;		_backlight_on
   752 ;;		_clear_all_sources
   753 ;;		_clear_all_switch_leds
   754 ;;		_clear_mute_led
   755 ;;		_clear_standby_led
   756 ;;		_clear_store_led
   757 ;;		_clear_view_led
   758 ;;		_init_lcd_chars
   759 ;;		_init_shiftreg
   760 ;;		_init_switches
   761 ;;		_init_timer
   762 ;;		_init_volume
   763 ;;		_read_switches
   764 ;;		_read_switches_synchronous
   765 ;;		_set_led_and_source
   766 ;;		_set_standby_led
   767 ;;		_set_volume
   768 ;;		_toggle_mute
   769 ;;		_update_switches_and_relays
   770 ;;		_volumeDB
   771 ;; This function is called by:
   772 ;;		Startup code after reset
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text0
   777  00086A                     __ptext0:
   778                           	opt stack 0
   779  00086A                     _main:
   780                           	opt stack 22
   781                           
   782                           ;newmain.c: 262: char volstring[8];
   783                           ;newmain.c: 263: char switch_pressed = 0;
   784                           
   785                           ;incstack = 0
   786  00086A  0E00               	movlw	0
   787  00086C  0100               	movlb	0	; () banked
   788  00086E  6F97               	movwf	main@switch_pressed& (0+255),b
   789                           
   790                           ;newmain.c: 265: encoder_changed = 0;
   791  000870  0E00               	movlw	0
   792  000872  6E3B               	movwf	_encoder_changed,c	;volatile
   793                           
   794                           ;newmain.c: 266: volume_left = 0;
   795  000874  0E00               	movlw	0
   796  000876  6E40               	movwf	_volume_left,c	;volatile
   797                           
   798                           ;newmain.c: 267: volume_right = 0;
   799  000878  0E00               	movlw	0
   800  00087A  6E3F               	movwf	_volume_right,c	;volatile
   801                           
   802                           ;newmain.c: 270: PORTB = 0x00;
   803  00087C  0E00               	movlw	0
   804  00087E  6E81               	movwf	3969,c	;volatile
   805                           
   806                           ;newmain.c: 271: LATB = 0x00;
   807  000880  0E00               	movlw	0
   808  000882  6E8A               	movwf	3978,c	;volatile
   809                           
   810                           ;newmain.c: 272: TRISB = 0x00;
   811  000884  0E00               	movlw	0
   812  000886  6E93               	movwf	3987,c	;volatile
   813                           
   814                           ;newmain.c: 275: configuration.source = 0;
   815  000888  0E00               	movlw	0
   816  00088A  6F6E               	movwf	(_configuration+14)& (0+255),b
   817                           
   818                           ;newmain.c: 276: configuration.volume[0] = 128;
   819  00088C  0E80               	movlw	128
   820  00088E  6F60               	movwf	_configuration& (0+255),b
   821                           
   822                           ;newmain.c: 277: configuration.volume[1] = 128;
   823  000890  0E80               	movlw	128
   824  000892  6F61               	movwf	(_configuration+1)& (0+255),b
   825                           
   826                           ;newmain.c: 278: configuration.volume[2] = 128;
   827  000894  0E80               	movlw	128
   828  000896  6F62               	movwf	(_configuration+2)& (0+255),b
   829                           
   830                           ;newmain.c: 279: configuration.volume[3] = 128;
   831  000898  0E80               	movlw	128
   832  00089A  6F63               	movwf	(_configuration+3)& (0+255),b
   833                           
   834                           ;newmain.c: 280: configuration.volume[4] = 128;
   835  00089C  0E80               	movlw	128
   836  00089E  6F64               	movwf	(_configuration+4)& (0+255),b
   837                           
   838                           ;newmain.c: 281: configuration.volume[5] = 128;
   839  0008A0  0E80               	movlw	128
   840  0008A2  6F65               	movwf	(_configuration+5)& (0+255),b
   841                           
   842                           ;newmain.c: 282: configuration.volume[6] = 128;
   843  0008A4  0E80               	movlw	128
   844  0008A6  6F66               	movwf	(_configuration+6)& (0+255),b
   845                           
   846                           ;newmain.c: 283: configuration.balance[0] = 5;
   847  0008A8  0E05               	movlw	5
   848  0008AA  6F67               	movwf	(_configuration+7)& (0+255),b
   849                           
   850                           ;newmain.c: 284: configuration.balance[1] = 5;
   851  0008AC  0E05               	movlw	5
   852  0008AE  6F68               	movwf	(_configuration+8)& (0+255),b
   853                           
   854                           ;newmain.c: 285: configuration.balance[2] = 5;
   855  0008B0  0E05               	movlw	5
   856  0008B2  6F69               	movwf	(_configuration+9)& (0+255),b
   857                           
   858                           ;newmain.c: 286: configuration.balance[3] = 5;
   859  0008B4  0E05               	movlw	5
   860  0008B6  6F6A               	movwf	(_configuration+10)& (0+255),b
   861                           
   862                           ;newmain.c: 287: configuration.balance[4] = 5;
   863  0008B8  0E05               	movlw	5
   864  0008BA  6F6B               	movwf	(_configuration+11)& (0+255),b
   865                           
   866                           ;newmain.c: 288: configuration.balance[5] = 5;
   867  0008BC  0E05               	movlw	5
   868  0008BE  6F6C               	movwf	(_configuration+12)& (0+255),b
   869                           
   870                           ;newmain.c: 289: configuration.balance[6] = 5;
   871  0008C0  0E05               	movlw	5
   872  0008C2  6F6D               	movwf	(_configuration+13)& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875                           ;newmain.c: 291: init_switches();
   876  0008C4  EC14  F010         	call	_init_switches	;wreg free
   877                           
   878                           ;newmain.c: 292: init_shiftreg();
   879  0008C8  ECAF  F00F         	call	_init_shiftreg	;wreg free
   880                           
   881                           ;newmain.c: 293: init_volume();
   882  0008CC  EC73  F00F         	call	_init_volume	;wreg free
   883                           
   884                           ;newmain.c: 294: init_timer();
   885  0008D0  ECF9  F00F         	call	_init_timer	;wreg free
   886                           
   887                           ;newmain.c: 296: INTCONbits.GIE = 1;
   888  0008D4  8EF2               	bsf	intcon,7,c	;volatile
   889                           
   890                           ;newmain.c: 300: LCD_init();
   891  0008D6  EC6B  F009         	call	_LCD_init	;wreg free
   892                           
   893                           ;newmain.c: 301: init_lcd_chars();
   894  0008DA  EC4A  F008         	call	_init_lcd_chars	;wreg free
   895                           
   896                           ;newmain.c: 303: LCD_off();
   897  0008DE  ECBE  F00F         	call	_LCD_off	;wreg free
   898                           
   899                           ;newmain.c: 306: LCD_clear();
   900  0008E2  ECDC  F00F         	call	_LCD_clear	;wreg free
   901                           
   902                           ;newmain.c: 307: LCD_home();
   903  0008E6  ECCD  F00F         	call	_LCD_home	;wreg free
   904                           
   905                           ;newmain.c: 308: LCD_cursorOff();
   906  0008EA  ECE9  F00E         	call	_LCD_cursorOff	;wreg free
   907                           
   908                           ;newmain.c: 310: LCD_on();
   909  0008EE  EC26  F00F         	call	_LCD_on	;wreg free
   910                           
   911                           ;newmain.c: 313: Wait(100);
   912  0008F2  0E00               	movlw	0
   913  0008F4  6E14               	movwf	Wait@delay+1,c
   914  0008F6  0E64               	movlw	100
   915  0008F8  6E13               	movwf	Wait@delay,c
   916  0008FA  ECEB  F00F         	call	_Wait	;wreg free
   917                           
   918                           ;newmain.c: 316: backlight_off();
   919  0008FE  EC3C  F010         	call	_backlight_off	;wreg free
   920                           
   921                           ;newmain.c: 329: if (read_switches() == 11)
   922  000902  EC48  F00A         	call	_read_switches	;wreg free
   923  000906  0A0B               	xorlw	11
   924  000908  A4D8               	btfss	status,2,c
   925  00090A  D002               	goto	l165
   926                           
   927                           ;newmain.c: 330: debug_mode = 1;
   928  00090C  0E01               	movlw	1
   929  00090E  6E39               	movwf	_debug_mode,c
   930  000910                     l165:
   931                           
   932                           ;newmain.c: 332: Wait(1000);
   933  000910  0E03               	movlw	3
   934  000912  6E14               	movwf	Wait@delay+1,c
   935  000914  0EE8               	movlw	232
   936  000916  6E13               	movwf	Wait@delay,c
   937  000918  ECEB  F00F         	call	_Wait	;wreg free
   938                           
   939                           ;newmain.c: 334: if (debug_mode) {
   940  00091C  5039               	movf	_debug_mode,w,c
   941  00091E  B4D8               	btfsc	status,2,c
   942  000920  D26C               	goto	l168
   943                           
   944                           ;newmain.c: 335: backlight_on();
   945  000922  EC3A  F010         	call	_backlight_on	;wreg free
   946                           
   947                           ;newmain.c: 336: LCD_setCursor(1,2);
   948  000926  0E00               	movlw	0
   949  000928  6E22               	movwf	LCD_setCursor@pos+1,c
   950  00092A  0E01               	movlw	1
   951  00092C  6E21               	movwf	LCD_setCursor@pos,c
   952  00092E  0E00               	movlw	0
   953  000930  6E24               	movwf	LCD_setCursor@row+1,c
   954  000932  0E02               	movlw	2
   955  000934  6E23               	movwf	LCD_setCursor@row,c
   956  000936  EC42  F00C         	call	_LCD_setCursor	;wreg free
   957                           
   958                           ;newmain.c: 337: LCD_displayString("***DEBUG MODE***");
   959  00093A  0E23               	movlw	low STR_3
   960  00093C  6E2C               	movwf	LCD_displayString@str,c
   961  00093E  0E08               	movlw	high STR_3
   962  000940  6E2D               	movwf	LCD_displayString@str+1,c
   963  000942  EC91  F00B         	call	_LCD_displayString	;wreg free
   964                           
   965                           ;newmain.c: 342: switch (current_state) {
   966                           
   967                           ;newmain.c: 338: }
   968                           ;newmain.c: 341: while (1) {
   969  000946  D259               	goto	l168
   970  000948                     
   971                           ;newmain.c: 344: LCD_clear();
   972  000948  ECDC  F00F         	call	_LCD_clear	;wreg free
   973                           
   974                           ;newmain.c: 345: backlight_off();
   975  00094C  EC3C  F010         	call	_backlight_off	;wreg free
   976                           
   977                           ;newmain.c: 346: set_standby_led();
   978  000950  EC32  F010         	call	_set_standby_led	;wreg free
   979                           
   980                           ;newmain.c: 347: clear_mute_led();
   981  000954  EC30  F010         	call	_clear_mute_led	;wreg free
   982                           
   983                           ;newmain.c: 348: clear_view_led();
   984  000958  EC34  F010         	call	_clear_view_led	;wreg free
   985                           
   986                           ;newmain.c: 349: clear_store_led();
   987  00095C  EC36  F010         	call	_clear_store_led	;wreg free
   988                           
   989                           ;newmain.c: 350: clear_all_switch_leds();
   990  000960  EC22  F010         	call	_clear_all_switch_leds	;wreg free
   991                           
   992                           ;newmain.c: 351: clear_all_sources();
   993  000964  EC28  F010         	call	_clear_all_sources	;wreg free
   994                           
   995                           ;newmain.c: 352: update_switches_and_relays();
   996  000968  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
   997                           
   998                           ;newmain.c: 353: volume_left = 0;
   999  00096C  0E00               	movlw	0
  1000  00096E  6E40               	movwf	_volume_left,c	;volatile
  1001                           
  1002                           ;newmain.c: 354: volume_right = 0;
  1003  000970  0E00               	movlw	0
  1004  000972  6E3F               	movwf	_volume_right,c	;volatile
  1005                           
  1006                           ;newmain.c: 355: set_volume(volume_left,volume_right);
  1007  000974  C03F  F013         	movff	_volume_right,set_volume@vol_right	;volatile
  1008  000978  5040               	movf	_volume_left,w,c	;volatile
  1009  00097A  EC75  F00D         	call	_set_volume
  1010                           
  1011                           ;newmain.c: 356: current_state = S_STANDBY_2;
  1012  00097E  0E01               	movlw	1
  1013  000980  D036               	goto	L2
  1014  000982                     
  1015                           ;newmain.c: 359: _delay((unsigned long)((100)*(20000000/4000000.0)));
  1016  000982  0EA6               	movlw	166
  1017  000984                     u3687:
  1018  000984  2EE8               	decfsz	wreg,f,c
  1019  000986  D7FE               	bra	u3687
  1020  000988  F000 F000          	nop2	
  1021                           
  1022                           ;newmain.c: 360: if (read_switches_synchronous() == 1) {
  1023  00098C  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1024  000990  06E8               	decf	wreg,f,c
  1025  000992  A4D8               	btfss	status,2,c
  1026  000994  D232               	goto	l168
  1027                           
  1028                           ;newmain.c: 361: current_state = S_POWER_ON;
  1029  000996  0E02               	movlw	2
  1030  000998  D02A               	goto	L2
  1031  00099A                     
  1032                           ;newmain.c: 366: clear_standby_led();
  1033  00099A  EC38  F010         	call	_clear_standby_led	;wreg free
  1034                           
  1035                           ;newmain.c: 367: backlight_on();
  1036  00099E  EC3A  F010         	call	_backlight_on	;wreg free
  1037                           
  1038                           ;newmain.c: 369: set_led_and_source(0);
  1039  0009A2  0E00               	movlw	0
  1040  0009A4  EC0F  F00D         	call	_set_led_and_source
  1041                           
  1042                           ;newmain.c: 370: update_switches_and_relays();
  1043  0009A8  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1044                           
  1045                           ;newmain.c: 371: volume_left = 128;
  1046  0009AC  0E80               	movlw	128
  1047  0009AE  6E40               	movwf	_volume_left,c	;volatile
  1048                           
  1049                           ;newmain.c: 372: volume_right = 128;
  1050  0009B0  0E80               	movlw	128
  1051  0009B2  6E3F               	movwf	_volume_right,c	;volatile
  1052                           
  1053                           ;newmain.c: 373: set_volume(volume_left,volume_right);
  1054  0009B4  C03F  F013         	movff	_volume_right,set_volume@vol_right	;volatile
  1055  0009B8  5040               	movf	_volume_left,w,c	;volatile
  1056  0009BA  EC75  F00D         	call	_set_volume
  1057                           
  1058                           ;newmain.c: 376: volumeDB(volume_left,volstring);
  1059  0009BE  0E8F               	movlw	low main@volstring
  1060  0009C0  6E21               	movwf	volumeDB@o,c
  1061  0009C2  0E00               	movlw	high main@volstring
  1062  0009C4  6E22               	movwf	volumeDB@o+1,c
  1063  0009C6  5040               	movf	_volume_left,w,c	;volatile
  1064  0009C8  EC1D  F007         	call	_volumeDB
  1065                           
  1066                           ;newmain.c: 377: LCD_setCursor(10,2);
  1067  0009CC  0E00               	movlw	0
  1068  0009CE  6E22               	movwf	LCD_setCursor@pos+1,c
  1069  0009D0  0E0A               	movlw	10
  1070  0009D2  6E21               	movwf	LCD_setCursor@pos,c
  1071  0009D4  0E00               	movlw	0
  1072  0009D6  6E24               	movwf	LCD_setCursor@row+1,c
  1073  0009D8  0E02               	movlw	2
  1074  0009DA  6E23               	movwf	LCD_setCursor@row,c
  1075  0009DC  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1076                           
  1077                           ;newmain.c: 378: LCD_displayString(volstring);
  1078  0009E0  0E8F               	movlw	low main@volstring
  1079  0009E2  6E2C               	movwf	LCD_displayString@str,c
  1080  0009E4  0E00               	movlw	high main@volstring
  1081  0009E6  6E2D               	movwf	LCD_displayString@str+1,c
  1082  0009E8  EC91  F00B         	call	_LCD_displayString	;wreg free
  1083                           
  1084                           ;newmain.c: 379: current_state = S_IDLE;
  1085  0009EC  0E04               	movlw	4
  1086  0009EE                     L2:
  1087  0009EE  6E38               	movwf	_current_state,c
  1088                           
  1089                           ;newmain.c: 380: break;
  1090  0009F0  D204               	goto	l168
  1091  0009F2                     
  1092                           ;newmain.c: 383: _delay((unsigned long)((100)*(20000000/4000000.0)));
  1093  0009F2  0EA6               	movlw	166
  1094  0009F4                     u3697:
  1095  0009F4  2EE8               	decfsz	wreg,f,c
  1096  0009F6  D7FE               	bra	u3697
  1097  0009F8  F000 F000          	nop2	
  1098                           
  1099                           ;newmain.c: 384: switch_pressed = read_switches_synchronous();
  1100  0009FC  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1101  000A00  0100               	movlb	0	; () banked
  1102  000A02  6F97               	movwf	main@switch_pressed& (0+255),b
  1103                           
  1104                           ;newmain.c: 386: switch (switch_pressed) {
  1105  000A04  D07D               	goto	l175
  1106  000A06                     
  1107                           ; BSR set to: 0
  1108                           ;newmain.c: 388: current_state = S_STANDBY;
  1109                           
  1110                           ; BSR set to: 0
  1111  000A06  0E00               	movlw	0
  1112  000A08  6E38               	movwf	_current_state,c
  1113                           
  1114                           ;newmain.c: 389: break;
  1115  000A0A  D09B               	goto	l177
  1116  000A0C                     
  1117                           ; BSR set to: 0
  1118                           ;newmain.c: 391: set_led_and_source(0);
  1119                           
  1120                           ; BSR set to: 0
  1121  000A0C  0E00               	movlw	0
  1122  000A0E  EC0F  F00D         	call	_set_led_and_source
  1123                           
  1124                           ;newmain.c: 392: configuration.source = 0;
  1125  000A12  0E00               	movlw	0
  1126  000A14  0100               	movlb	0	; () banked
  1127  000A16  6F6E               	movwf	(_configuration+14)& (0+255),b
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;newmain.c: 393: toggle_mute();
  1131  000A18  EC58  F00E         	call	_toggle_mute	;wreg free
  1132                           
  1133                           ;newmain.c: 394: update_switches_and_relays();
  1134  000A1C  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1135                           
  1136                           ;newmain.c: 395: toggle_mute();
  1137  000A20  EC58  F00E         	call	_toggle_mute	;wreg free
  1138                           
  1139                           ;newmain.c: 396: break;
  1140  000A24  D08E               	goto	l177
  1141  000A26                     
  1142                           ;newmain.c: 398: set_led_and_source(1);
  1143  000A26  0E01               	movlw	1
  1144  000A28  EC0F  F00D         	call	_set_led_and_source
  1145                           
  1146                           ;newmain.c: 399: configuration.source = 1;
  1147  000A2C  0E01               	movlw	1
  1148  000A2E  0100               	movlb	0	; () banked
  1149  000A30  6F6E               	movwf	(_configuration+14)& (0+255),b
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;newmain.c: 400: toggle_mute();
  1153  000A32  EC58  F00E         	call	_toggle_mute	;wreg free
  1154                           
  1155                           ;newmain.c: 401: update_switches_and_relays();
  1156  000A36  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1157                           
  1158                           ;newmain.c: 402: toggle_mute();
  1159  000A3A  EC58  F00E         	call	_toggle_mute	;wreg free
  1160                           
  1161                           ;newmain.c: 403: break;
  1162  000A3E  D081               	goto	l177
  1163  000A40                     
  1164                           ;newmain.c: 405: set_led_and_source(2);
  1165  000A40  0E02               	movlw	2
  1166  000A42  EC0F  F00D         	call	_set_led_and_source
  1167                           
  1168                           ;newmain.c: 406: configuration.source = 2;
  1169  000A46  0E02               	movlw	2
  1170  000A48  0100               	movlb	0	; () banked
  1171  000A4A  6F6E               	movwf	(_configuration+14)& (0+255),b
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;newmain.c: 407: toggle_mute();
  1175  000A4C  EC58  F00E         	call	_toggle_mute	;wreg free
  1176                           
  1177                           ;newmain.c: 408: update_switches_and_relays();
  1178  000A50  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1179                           
  1180                           ;newmain.c: 409: toggle_mute();
  1181  000A54  EC58  F00E         	call	_toggle_mute	;wreg free
  1182                           
  1183                           ;newmain.c: 410: break;
  1184  000A58  D074               	goto	l177
  1185  000A5A                     
  1186                           ;newmain.c: 412: set_led_and_source(3);
  1187  000A5A  0E03               	movlw	3
  1188  000A5C  EC0F  F00D         	call	_set_led_and_source
  1189                           
  1190                           ;newmain.c: 413: configuration.source = 3;
  1191  000A60  0E03               	movlw	3
  1192  000A62  0100               	movlb	0	; () banked
  1193  000A64  6F6E               	movwf	(_configuration+14)& (0+255),b
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;newmain.c: 414: toggle_mute();
  1197  000A66  EC58  F00E         	call	_toggle_mute	;wreg free
  1198                           
  1199                           ;newmain.c: 415: update_switches_and_relays();
  1200  000A6A  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1201                           
  1202                           ;newmain.c: 416: toggle_mute();
  1203  000A6E  EC58  F00E         	call	_toggle_mute	;wreg free
  1204                           
  1205                           ;newmain.c: 417: break;
  1206  000A72  D067               	goto	l177
  1207  000A74                     
  1208                           ;newmain.c: 419: set_led_and_source(4);
  1209  000A74  0E04               	movlw	4
  1210  000A76  EC0F  F00D         	call	_set_led_and_source
  1211                           
  1212                           ;newmain.c: 420: configuration.source = 4;
  1213  000A7A  0E04               	movlw	4
  1214  000A7C  0100               	movlb	0	; () banked
  1215  000A7E  6F6E               	movwf	(_configuration+14)& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;newmain.c: 421: toggle_mute();
  1219  000A80  EC58  F00E         	call	_toggle_mute	;wreg free
  1220                           
  1221                           ;newmain.c: 422: update_switches_and_relays();
  1222  000A84  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1223                           
  1224                           ;newmain.c: 423: toggle_mute();
  1225  000A88  EC58  F00E         	call	_toggle_mute	;wreg free
  1226                           
  1227                           ;newmain.c: 424: break;
  1228  000A8C  D05A               	goto	l177
  1229  000A8E                     
  1230                           ;newmain.c: 426: set_led_and_source(5);
  1231  000A8E  0E05               	movlw	5
  1232  000A90  EC0F  F00D         	call	_set_led_and_source
  1233                           
  1234                           ;newmain.c: 427: configuration.source = 5;
  1235  000A94  0E05               	movlw	5
  1236  000A96  0100               	movlb	0	; () banked
  1237  000A98  6F6E               	movwf	(_configuration+14)& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;newmain.c: 428: toggle_mute();
  1241  000A9A  EC58  F00E         	call	_toggle_mute	;wreg free
  1242                           
  1243                           ;newmain.c: 429: update_switches_and_relays();
  1244  000A9E  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1245                           
  1246                           ;newmain.c: 430: toggle_mute();
  1247  000AA2  EC58  F00E         	call	_toggle_mute	;wreg free
  1248                           
  1249                           ;newmain.c: 431: break;
  1250  000AA6  D04D               	goto	l177
  1251  000AA8                     
  1252                           ;newmain.c: 433: set_led_and_source(6);
  1253  000AA8  0E06               	movlw	6
  1254  000AAA  EC0F  F00D         	call	_set_led_and_source
  1255                           
  1256                           ;newmain.c: 434: configuration.source = 6;
  1257  000AAE  0E06               	movlw	6
  1258  000AB0  0100               	movlb	0	; () banked
  1259  000AB2  6F6E               	movwf	(_configuration+14)& (0+255),b
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;newmain.c: 435: toggle_mute();
  1263  000AB4  EC58  F00E         	call	_toggle_mute	;wreg free
  1264                           
  1265                           ;newmain.c: 436: update_switches_and_relays();
  1266  000AB8  ECEB  F00B         	call	_update_switches_and_relays	;wreg free
  1267                           
  1268                           ;newmain.c: 437: toggle_mute();
  1269  000ABC  EC58  F00E         	call	_toggle_mute	;wreg free
  1270                           
  1271                           ;newmain.c: 438: break;
  1272  000AC0  D040               	goto	l177
  1273  000AC2                     
  1274                           ;newmain.c: 440: toggle_mute();
  1275  000AC2  EC58  F00E         	call	_toggle_mute	;wreg free
  1276                           
  1277                           ;newmain.c: 443: volumeDB(volume_left,volstring);
  1278  000AC6  0E8F               	movlw	low main@volstring
  1279  000AC8  6E21               	movwf	volumeDB@o,c
  1280  000ACA  0E00               	movlw	high main@volstring
  1281  000ACC  6E22               	movwf	volumeDB@o+1,c
  1282  000ACE  5040               	movf	_volume_left,w,c	;volatile
  1283  000AD0  EC1D  F007         	call	_volumeDB
  1284                           
  1285                           ;newmain.c: 444: LCD_setCursor(10,2);
  1286  000AD4  0E00               	movlw	0
  1287  000AD6  6E22               	movwf	LCD_setCursor@pos+1,c
  1288  000AD8  0E0A               	movlw	10
  1289  000ADA  6E21               	movwf	LCD_setCursor@pos,c
  1290  000ADC  0E00               	movlw	0
  1291  000ADE  6E24               	movwf	LCD_setCursor@row+1,c
  1292  000AE0  0E02               	movlw	2
  1293  000AE2  6E23               	movwf	LCD_setCursor@row,c
  1294  000AE4  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1295                           
  1296                           ;newmain.c: 445: LCD_displayString(volstring);
  1297  000AE8  0E8F               	movlw	low main@volstring
  1298  000AEA  6E2C               	movwf	LCD_displayString@str,c
  1299  000AEC  0E00               	movlw	high main@volstring
  1300  000AEE  6E2D               	movwf	LCD_displayString@str+1,c
  1301  000AF0  EC91  F00B         	call	_LCD_displayString	;wreg free
  1302                           
  1303                           ;newmain.c: 446: break;
  1304  000AF4  D026               	goto	l177
  1305  000AF6                     
  1306                           ;newmain.c: 448: current_state = S_MENU_1;
  1307  000AF6  0E05               	movlw	5
  1308  000AF8  6E38               	movwf	_current_state,c
  1309                           
  1310                           ;newmain.c: 449: LCD_clear();
  1311  000AFA  ECDC  F00F         	call	_LCD_clear	;wreg free
  1312                           
  1313                           ;newmain.c: 453: }
  1314                           
  1315                           ;newmain.c: 452: break;
  1316                           
  1317                           ;newmain.c: 451: case 11:
  1318                           
  1319                           ;newmain.c: 450: break;
  1320  000AFE  D021               	goto	l177
  1321  000B00                     l175:
  1322  000B00  0100               	movlb	0	; () banked
  1323  000B02  5197               	movf	main@switch_pressed& (0+255),w,b
  1324                           
  1325                           ; Switch size 1, requested type "space"
  1326                           ; Number of cases is 11, Range of values is 1 to 11
  1327                           ; switch strategies available:
  1328                           ; Name         Instructions Cycles
  1329                           ; simple_byte           34    18 (average)
  1330                           ;	Chosen strategy is simple_byte
  1331  000B04  0A01               	xorlw	1	; case 1
  1332  000B06  B4D8               	btfsc	status,2,c
  1333  000B08  D77E               	goto	l176
  1334  000B0A  0A03               	xorlw	3	; case 2
  1335  000B0C  B4D8               	btfsc	status,2,c
  1336  000B0E  D77E               	goto	l178
  1337  000B10  0A01               	xorlw	1	; case 3
  1338  000B12  B4D8               	btfsc	status,2,c
  1339  000B14  D788               	goto	l179
  1340  000B16  0A07               	xorlw	7	; case 4
  1341  000B18  B4D8               	btfsc	status,2,c
  1342  000B1A  D792               	goto	l180
  1343  000B1C  0A01               	xorlw	1	; case 5
  1344  000B1E  B4D8               	btfsc	status,2,c
  1345  000B20  D79C               	goto	l181
  1346  000B22  0A03               	xorlw	3	; case 6
  1347  000B24  B4D8               	btfsc	status,2,c
  1348  000B26  D7A6               	goto	l182
  1349  000B28  0A01               	xorlw	1	; case 7
  1350  000B2A  B4D8               	btfsc	status,2,c
  1351  000B2C  D7B0               	goto	l183
  1352  000B2E  0A0F               	xorlw	15	; case 8
  1353  000B30  B4D8               	btfsc	status,2,c
  1354  000B32  D7BA               	goto	l184
  1355  000B34  0A01               	xorlw	1	; case 9
  1356  000B36  B4D8               	btfsc	status,2,c
  1357  000B38  D7C4               	goto	l185
  1358  000B3A  0A03               	xorlw	3	; case 10
  1359  000B3C  B4D8               	btfsc	status,2,c
  1360  000B3E  D7DB               	goto	l186
  1361  000B40  0A01               	xorlw	1	; case 11
  1362  000B42                     l177:
  1363                           
  1364                           ;newmain.c: 455: if (encoder_changed) {
  1365                           
  1366                           ; BSR set to: 0
  1367  000B42  503B               	movf	_encoder_changed,w,c	;volatile
  1368  000B44  B4D8               	btfsc	status,2,c
  1369  000B46  D159               	goto	l168
  1370                           
  1371                           ;newmain.c: 456: if (encoder_dir == 1) {
  1372  000B48  043A               	decf	_encoder_dir,w,c	;volatile
  1373  000B4A  A4D8               	btfss	status,2,c
  1374  000B4C  D00F               	goto	l189
  1375                           
  1376                           ;newmain.c: 457: if (volume_left < 255) {
  1377  000B4E  2840               	incf	_volume_left,w,c	;volatile
  1378  000B50  B4D8               	btfsc	status,2,c
  1379  000B52  D01A               	goto	l192
  1380                           
  1381                           ;newmain.c: 458: volume_left++;
  1382  000B54  2A40               	incf	_volume_left,f,c	;volatile
  1383                           
  1384                           ;newmain.c: 459: configuration.volume[configuration.source]++;
  1385  000B56  0100               	movlb	0	; () banked
  1386  000B58  516E               	movf	(_configuration+14)& (0+255),w,b
  1387  000B5A  0D01               	mullw	1
  1388  000B5C  0E60               	movlw	low _configuration
  1389  000B5E  24F3               	addwf	prodl,w,c
  1390  000B60  6ED9               	movwf	fsr2l,c
  1391  000B62  0E00               	movlw	high _configuration
  1392  000B64  20F4               	addwfc	prodh,w,c
  1393  000B66  6EDA               	movwf	fsr2h,c
  1394  000B68  2ADF               	incf	indf2,f,c
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;newmain.c: 460: }
  1398                           ;newmain.c: 461: } else {
  1399  000B6A  D00E               	goto	l192
  1400  000B6C                     l189:
  1401                           
  1402                           ;newmain.c: 462: if (volume_left > 0) {
  1403                           
  1404                           ; BSR set to: 0
  1405  000B6C  5040               	movf	_volume_left,w,c	;volatile
  1406  000B6E  B4D8               	btfsc	status,2,c
  1407  000B70  D00B               	goto	l192
  1408                           
  1409                           ;newmain.c: 463: volume_left--;
  1410  000B72  0640               	decf	_volume_left,f,c	;volatile
  1411                           
  1412                           ;newmain.c: 464: configuration.volume[configuration.source]--;
  1413  000B74  0100               	movlb	0	; () banked
  1414  000B76  516E               	movf	(_configuration+14)& (0+255),w,b
  1415  000B78  0D01               	mullw	1
  1416  000B7A  0E60               	movlw	low _configuration
  1417  000B7C  24F3               	addwf	prodl,w,c
  1418  000B7E  6ED9               	movwf	fsr2l,c
  1419  000B80  0E00               	movlw	high _configuration
  1420  000B82  20F4               	addwfc	prodh,w,c
  1421  000B84  6EDA               	movwf	fsr2h,c
  1422  000B86  06DF               	decf	indf2,f,c
  1423  000B88                     l192:
  1424                           
  1425                           ;newmain.c: 465: }
  1426                           ;newmain.c: 466: }
  1427                           ;newmain.c: 467: set_volume(volume_left,volume_right);
  1428                           
  1429                           ; BSR set to: 0
  1430                           
  1431                           ; BSR set to: 0
  1432  000B88  C03F  F013         	movff	_volume_right,set_volume@vol_right	;volatile
  1433  000B8C  5040               	movf	_volume_left,w,c	;volatile
  1434  000B8E  EC75  F00D         	call	_set_volume
  1435                           
  1436                           ;newmain.c: 468: encoder_changed = 0;
  1437  000B92  0E00               	movlw	0
  1438  000B94  6E3B               	movwf	_encoder_changed,c	;volatile
  1439                           
  1440                           ;newmain.c: 470: volumeDB(volume_left,volstring);
  1441  000B96  0E8F               	movlw	low main@volstring
  1442  000B98  6E21               	movwf	volumeDB@o,c
  1443  000B9A  0E00               	movlw	high main@volstring
  1444  000B9C  6E22               	movwf	volumeDB@o+1,c
  1445  000B9E  5040               	movf	_volume_left,w,c	;volatile
  1446  000BA0  EC1D  F007         	call	_volumeDB
  1447                           
  1448                           ;newmain.c: 471: LCD_setCursor(10,2);
  1449  000BA4  0E00               	movlw	0
  1450  000BA6  6E22               	movwf	LCD_setCursor@pos+1,c
  1451  000BA8  0E0A               	movlw	10
  1452  000BAA  6E21               	movwf	LCD_setCursor@pos,c
  1453  000BAC  0E00               	movlw	0
  1454  000BAE  6E24               	movwf	LCD_setCursor@row+1,c
  1455  000BB0  0E02               	movlw	2
  1456  000BB2  6E23               	movwf	LCD_setCursor@row,c
  1457  000BB4  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1458                           
  1459                           ;newmain.c: 472: LCD_displayString(volstring);
  1460  000BB8  0E8F               	movlw	low main@volstring
  1461  000BBA  6E2C               	movwf	LCD_displayString@str,c
  1462  000BBC  0E00               	movlw	high main@volstring
  1463  000BBE  6E2D               	movwf	LCD_displayString@str+1,c
  1464  000BC0  EC91  F00B         	call	_LCD_displayString	;wreg free
  1465                           
  1466                           ;newmain.c: 473: }
  1467                           ;newmain.c: 474: break;
  1468  000BC4  D11A               	goto	l168
  1469  000BC6                     
  1470                           ;newmain.c: 477: LCD_setCursor(1,1);
  1471  000BC6  0E00               	movlw	0
  1472  000BC8  6E22               	movwf	LCD_setCursor@pos+1,c
  1473  000BCA  0E01               	movlw	1
  1474  000BCC  6E21               	movwf	LCD_setCursor@pos,c
  1475  000BCE  0E00               	movlw	0
  1476  000BD0  6E24               	movwf	LCD_setCursor@row+1,c
  1477  000BD2  0E01               	movlw	1
  1478  000BD4  6E23               	movwf	LCD_setCursor@row,c
  1479  000BD6  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1480                           
  1481                           ;newmain.c: 478: LCD_displayString("Balance");
  1482  000BDA  0E47               	movlw	low (STR_7+5)
  1483  000BDC  6E2C               	movwf	LCD_displayString@str,c
  1484  000BDE  0E08               	movlw	high (STR_7+5)
  1485  000BE0  6E2D               	movwf	LCD_displayString@str+1,c
  1486  000BE2  EC91  F00B         	call	_LCD_displayString	;wreg free
  1487                           
  1488                           ;newmain.c: 479: LCD_slider(configuration.balance[configuration.source]);
  1489  000BE6  0100               	movlb	0	; () banked
  1490  000BE8  516E               	movf	(_configuration+14)& (0+255),w,b
  1491  000BEA  0D01               	mullw	1
  1492  000BEC  0E67               	movlw	low (_configuration+7)
  1493  000BEE  24F3               	addwf	prodl,w,c
  1494  000BF0  6ED9               	movwf	fsr2l,c
  1495  000BF2  0E00               	movlw	high (_configuration+7)
  1496  000BF4  20F4               	addwfc	prodh,w,c
  1497  000BF6  6EDA               	movwf	fsr2h,c
  1498  000BF8  50DF               	movf	indf2,w,c
  1499  000BFA  ECA6  F00D         	call	_LCD_slider
  1500                           
  1501                           ;newmain.c: 480: if (encoder_changed) {
  1502  000BFE  503B               	movf	_encoder_changed,w,c	;volatile
  1503  000C00  B4D8               	btfsc	status,2,c
  1504  000C02  D030               	goto	l194
  1505                           
  1506                           ;newmain.c: 481: if (encoder_dir == 1) {
  1507  000C04  043A               	decf	_encoder_dir,w,c	;volatile
  1508  000C06  A4D8               	btfss	status,2,c
  1509  000C08  D016               	goto	l195
  1510                           
  1511                           ;newmain.c: 482: if (configuration.balance[configuration.source] < 13) {
  1512  000C0A  0100               	movlb	0	; () banked
  1513  000C0C  516E               	movf	(_configuration+14)& (0+255),w,b
  1514  000C0E  0D01               	mullw	1
  1515  000C10  0E67               	movlw	low (_configuration+7)
  1516  000C12  24F3               	addwf	prodl,w,c
  1517  000C14  6ED9               	movwf	fsr2l,c
  1518  000C16  0E00               	movlw	high (_configuration+7)
  1519  000C18  20F4               	addwfc	prodh,w,c
  1520  000C1A  6EDA               	movwf	fsr2h,c
  1521  000C1C  0E0D               	movlw	13
  1522  000C1E  60DF               	cpfslt	indf2,c
  1523  000C20  D01F               	goto	l198
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;newmain.c: 483: configuration.balance[configuration.source]++;
  1527  000C22  516E               	movf	(_configuration+14)& (0+255),w,b
  1528  000C24  0D01               	mullw	1
  1529  000C26  0E67               	movlw	low (_configuration+7)
  1530  000C28  24F3               	addwf	prodl,w,c
  1531  000C2A  6ED9               	movwf	fsr2l,c
  1532  000C2C  0E00               	movlw	high (_configuration+7)
  1533  000C2E  20F4               	addwfc	prodh,w,c
  1534  000C30  6EDA               	movwf	fsr2h,c
  1535  000C32  2ADF               	incf	indf2,f,c
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;newmain.c: 484: }
  1539                           ;newmain.c: 485: } else {
  1540  000C34  D015               	goto	l198
  1541  000C36                     l195:
  1542                           
  1543                           ;newmain.c: 486: if (configuration.balance[configuration.source] > 0) {
  1544                           
  1545                           ; BSR set to: 0
  1546  000C36  0100               	movlb	0	; () banked
  1547  000C38  516E               	movf	(_configuration+14)& (0+255),w,b
  1548  000C3A  0D01               	mullw	1
  1549  000C3C  0E67               	movlw	low (_configuration+7)
  1550  000C3E  24F3               	addwf	prodl,w,c
  1551  000C40  6ED9               	movwf	fsr2l,c
  1552  000C42  0E00               	movlw	high (_configuration+7)
  1553  000C44  20F4               	addwfc	prodh,w,c
  1554  000C46  6EDA               	movwf	fsr2h,c
  1555  000C48  50DF               	movf	indf2,w,c
  1556  000C4A  B4D8               	btfsc	status,2,c
  1557  000C4C  D009               	goto	l198
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;newmain.c: 487: configuration.balance[configuration.source]--;
  1561  000C4E  516E               	movf	(_configuration+14)& (0+255),w,b
  1562  000C50  0D01               	mullw	1
  1563  000C52  0E67               	movlw	low (_configuration+7)
  1564  000C54  24F3               	addwf	prodl,w,c
  1565  000C56  6ED9               	movwf	fsr2l,c
  1566  000C58  0E00               	movlw	high (_configuration+7)
  1567  000C5A  20F4               	addwfc	prodh,w,c
  1568  000C5C  6EDA               	movwf	fsr2h,c
  1569  000C5E  06DF               	decf	indf2,f,c
  1570  000C60                     l198:
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;newmain.c: 488: }
  1574                           ;newmain.c: 489: }
  1575                           ;newmain.c: 490: encoder_changed = 0;
  1576                           
  1577                           ; BSR set to: 0
  1578                           
  1579                           ; BSR set to: 0
  1580  000C60  0E00               	movlw	0
  1581  000C62  6E3B               	movwf	_encoder_changed,c	;volatile
  1582  000C64                     l194:
  1583                           
  1584                           ;newmain.c: 491: }
  1585                           ;newmain.c: 492: switch_pressed = read_switches_synchronous();
  1586                           
  1587                           ; BSR set to: 0
  1588  000C64  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1589  000C68  0100               	movlb	0	; () banked
  1590  000C6A  6F97               	movwf	main@switch_pressed& (0+255),b
  1591                           
  1592                           ;newmain.c: 493: switch (switch_pressed) {
  1593  000C6C  D005               	goto	l199
  1594  000C6E                     
  1595                           ; BSR set to: 0
  1596                           ;newmain.c: 495: current_state = S_MENU_2;
  1597                           
  1598                           ; BSR set to: 0
  1599  000C6E  0E06               	movlw	6
  1600  000C70  6E38               	movwf	_current_state,c
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;newmain.c: 496: LCD_clear();
  1604  000C72  ECDC  F00F         	call	_LCD_clear	;wreg free
  1605                           
  1606                           ;newmain.c: 500: }
  1607                           
  1608                           ;newmain.c: 499: break;
  1609                           
  1610                           ;newmain.c: 498: case 11:
  1611                           
  1612                           ;newmain.c: 497: break;
  1613  000C76  D0C1               	goto	l168
  1614  000C78                     l199:
  1615  000C78  0100               	movlb	0	; () banked
  1616  000C7A  5197               	movf	main@switch_pressed& (0+255),w,b
  1617                           
  1618                           ; Switch size 1, requested type "space"
  1619                           ; Number of cases is 2, Range of values is 10 to 11
  1620                           ; switch strategies available:
  1621                           ; Name         Instructions Cycles
  1622                           ; simple_byte            7     4 (average)
  1623                           ;	Chosen strategy is simple_byte
  1624  000C7C  0A0A               	xorlw	10	; case 10
  1625  000C7E  B4D8               	btfsc	status,2,c
  1626  000C80  D7F6               	goto	l200
  1627  000C82  D0A9               	goto	L7
  1628  000C84                     
  1629                           ;newmain.c: 504: LCD_clear();
  1630                           
  1631                           ; BSR set to: 0
  1632  000C84  ECDC  F00F         	call	_LCD_clear	;wreg free
  1633                           
  1634                           ;newmain.c: 505: LCD_setCursor(1,1);
  1635  000C88  0E00               	movlw	0
  1636  000C8A  6E22               	movwf	LCD_setCursor@pos+1,c
  1637  000C8C  0E01               	movlw	1
  1638  000C8E  6E21               	movwf	LCD_setCursor@pos,c
  1639  000C90  0E00               	movlw	0
  1640  000C92  6E24               	movwf	LCD_setCursor@row+1,c
  1641  000C94  0E01               	movlw	1
  1642  000C96  6E23               	movwf	LCD_setCursor@row,c
  1643  000C98  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1644                           
  1645                           ;newmain.c: 506: LCD_displayString("Centre");
  1646  000C9C  0E58               	movlw	low STR_5
  1647  000C9E  6E2C               	movwf	LCD_displayString@str,c
  1648  000CA0  0E08               	movlw	high STR_5
  1649  000CA2  6E2D               	movwf	LCD_displayString@str+1,c
  1650  000CA4  EC91  F00B         	call	_LCD_displayString	;wreg free
  1651                           
  1652                           ;newmain.c: 507: switch_pressed = read_switches_synchronous();
  1653  000CA8  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1654  000CAC  0100               	movlb	0	; () banked
  1655  000CAE  6F97               	movwf	main@switch_pressed& (0+255),b
  1656                           
  1657                           ;newmain.c: 508: switch (switch_pressed) {
  1658  000CB0  D005               	goto	l204
  1659  000CB2                     
  1660                           ; BSR set to: 0
  1661                           ;newmain.c: 510: current_state = S_MENU_3;
  1662                           
  1663                           ; BSR set to: 0
  1664  000CB2  0E07               	movlw	7
  1665  000CB4  6E38               	movwf	_current_state,c
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;newmain.c: 511: LCD_clear();
  1669  000CB6  ECDC  F00F         	call	_LCD_clear	;wreg free
  1670                           
  1671                           ;newmain.c: 515: }
  1672                           
  1673                           ;newmain.c: 514: break;
  1674                           
  1675                           ;newmain.c: 513: case 11:
  1676                           
  1677                           ;newmain.c: 512: break;
  1678  000CBA  D09F               	goto	l168
  1679  000CBC                     l204:
  1680  000CBC  0100               	movlb	0	; () banked
  1681  000CBE  5197               	movf	main@switch_pressed& (0+255),w,b
  1682                           
  1683                           ; Switch size 1, requested type "space"
  1684                           ; Number of cases is 2, Range of values is 10 to 11
  1685                           ; switch strategies available:
  1686                           ; Name         Instructions Cycles
  1687                           ; simple_byte            7     4 (average)
  1688                           ;	Chosen strategy is simple_byte
  1689  000CC0  0A0A               	xorlw	10	; case 10
  1690  000CC2  B4D8               	btfsc	status,2,c
  1691  000CC4  D7F6               	goto	l205
  1692  000CC6  D087               	goto	L7
  1693  000CC8                     
  1694                           ;newmain.c: 519: LCD_clear();
  1695                           
  1696                           ; BSR set to: 0
  1697  000CC8  ECDC  F00F         	call	_LCD_clear	;wreg free
  1698                           
  1699                           ;newmain.c: 520: LCD_setCursor(1,1);
  1700  000CCC  0E00               	movlw	0
  1701  000CCE  6E22               	movwf	LCD_setCursor@pos+1,c
  1702  000CD0  0E01               	movlw	1
  1703  000CD2  6E21               	movwf	LCD_setCursor@pos,c
  1704  000CD4  0E00               	movlw	0
  1705  000CD6  6E24               	movwf	LCD_setCursor@row+1,c
  1706  000CD8  0E01               	movlw	1
  1707  000CDA  6E23               	movwf	LCD_setCursor@row,c
  1708  000CDC  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1709                           
  1710                           ;newmain.c: 521: LCD_displayString("Rear");
  1711  000CE0  0E5F               	movlw	low STR_6
  1712  000CE2  6E2C               	movwf	LCD_displayString@str,c
  1713  000CE4  0E08               	movlw	high STR_6
  1714  000CE6  6E2D               	movwf	LCD_displayString@str+1,c
  1715  000CE8  EC91  F00B         	call	_LCD_displayString	;wreg free
  1716                           
  1717                           ;newmain.c: 522: switch_pressed = read_switches_synchronous();
  1718  000CEC  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1719  000CF0  0100               	movlb	0	; () banked
  1720  000CF2  6F97               	movwf	main@switch_pressed& (0+255),b
  1721                           
  1722                           ;newmain.c: 523: switch (switch_pressed) {
  1723  000CF4  D005               	goto	l209
  1724  000CF6                     
  1725                           ; BSR set to: 0
  1726                           ;newmain.c: 525: current_state = S_MENU_4;
  1727                           
  1728                           ; BSR set to: 0
  1729  000CF6  0E08               	movlw	8
  1730  000CF8  6E38               	movwf	_current_state,c
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;newmain.c: 526: LCD_clear();
  1734  000CFA  ECDC  F00F         	call	_LCD_clear	;wreg free
  1735                           
  1736                           ;newmain.c: 530: }
  1737                           
  1738                           ;newmain.c: 529: break;
  1739                           
  1740                           ;newmain.c: 528: case 11:
  1741                           
  1742                           ;newmain.c: 527: break;
  1743  000CFE  D07D               	goto	l168
  1744  000D00                     l209:
  1745  000D00  0100               	movlb	0	; () banked
  1746  000D02  5197               	movf	main@switch_pressed& (0+255),w,b
  1747                           
  1748                           ; Switch size 1, requested type "space"
  1749                           ; Number of cases is 2, Range of values is 10 to 11
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte            7     4 (average)
  1753                           ;	Chosen strategy is simple_byte
  1754  000D04  0A0A               	xorlw	10	; case 10
  1755  000D06  B4D8               	btfsc	status,2,c
  1756  000D08  D7F6               	goto	l210
  1757  000D0A  D065               	goto	L7
  1758  000D0C                     
  1759                           ;newmain.c: 534: LCD_clear();
  1760                           
  1761                           ; BSR set to: 0
  1762  000D0C  ECDC  F00F         	call	_LCD_clear	;wreg free
  1763                           
  1764                           ;newmain.c: 535: LCD_setCursor(1,1);
  1765  000D10  0E00               	movlw	0
  1766  000D12  6E22               	movwf	LCD_setCursor@pos+1,c
  1767  000D14  0E01               	movlw	1
  1768  000D16  6E21               	movwf	LCD_setCursor@pos,c
  1769  000D18  0E00               	movlw	0
  1770  000D1A  6E24               	movwf	LCD_setCursor@row+1,c
  1771  000D1C  0E01               	movlw	1
  1772  000D1E  6E23               	movwf	LCD_setCursor@row,c
  1773  000D20  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1774                           
  1775                           ;newmain.c: 536: LCD_displayString("Rear Balance");
  1776  000D24  0E42               	movlw	low STR_7
  1777  000D26  6E2C               	movwf	LCD_displayString@str,c
  1778  000D28  0E08               	movlw	high STR_7
  1779  000D2A  6E2D               	movwf	LCD_displayString@str+1,c
  1780  000D2C  EC91  F00B         	call	_LCD_displayString	;wreg free
  1781                           
  1782                           ;newmain.c: 537: switch_pressed = read_switches_synchronous();
  1783  000D30  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1784  000D34  0100               	movlb	0	; () banked
  1785  000D36  6F97               	movwf	main@switch_pressed& (0+255),b
  1786                           
  1787                           ;newmain.c: 538: switch (switch_pressed) {
  1788  000D38  D005               	goto	l214
  1789  000D3A                     
  1790                           ; BSR set to: 0
  1791                           ;newmain.c: 540: current_state = S_MENU_5;
  1792                           
  1793                           ; BSR set to: 0
  1794  000D3A  0E09               	movlw	9
  1795  000D3C  6E38               	movwf	_current_state,c
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;newmain.c: 541: LCD_clear();
  1799  000D3E  ECDC  F00F         	call	_LCD_clear	;wreg free
  1800                           
  1801                           ;newmain.c: 545: }
  1802                           
  1803                           ;newmain.c: 544: break;
  1804                           
  1805                           ;newmain.c: 543: case 11:
  1806                           
  1807                           ;newmain.c: 542: break;
  1808  000D42  D05B               	goto	l168
  1809  000D44                     l214:
  1810  000D44  0100               	movlb	0	; () banked
  1811  000D46  5197               	movf	main@switch_pressed& (0+255),w,b
  1812                           
  1813                           ; Switch size 1, requested type "space"
  1814                           ; Number of cases is 2, Range of values is 10 to 11
  1815                           ; switch strategies available:
  1816                           ; Name         Instructions Cycles
  1817                           ; simple_byte            7     4 (average)
  1818                           ;	Chosen strategy is simple_byte
  1819  000D48  0A0A               	xorlw	10	; case 10
  1820  000D4A  B4D8               	btfsc	status,2,c
  1821  000D4C  D7F6               	goto	l215
  1822  000D4E  D043               	goto	L7
  1823  000D50                     
  1824                           ;newmain.c: 549: LCD_clear();
  1825                           
  1826                           ; BSR set to: 0
  1827  000D50  ECDC  F00F         	call	_LCD_clear	;wreg free
  1828                           
  1829                           ;newmain.c: 550: LCD_setCursor(1,1);
  1830  000D54  0E00               	movlw	0
  1831  000D56  6E22               	movwf	LCD_setCursor@pos+1,c
  1832  000D58  0E01               	movlw	1
  1833  000D5A  6E21               	movwf	LCD_setCursor@pos,c
  1834  000D5C  0E00               	movlw	0
  1835  000D5E  6E24               	movwf	LCD_setCursor@row+1,c
  1836  000D60  0E01               	movlw	1
  1837  000D62  6E23               	movwf	LCD_setCursor@row,c
  1838  000D64  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1839                           
  1840                           ;newmain.c: 551: LCD_displayString("LFE");
  1841  000D68  0E64               	movlw	low STR_8
  1842  000D6A  6E2C               	movwf	LCD_displayString@str,c
  1843  000D6C  0E08               	movlw	high STR_8
  1844  000D6E  6E2D               	movwf	LCD_displayString@str+1,c
  1845  000D70  EC91  F00B         	call	_LCD_displayString	;wreg free
  1846                           
  1847                           ;newmain.c: 552: switch_pressed = read_switches_synchronous();
  1848  000D74  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1849  000D78  0100               	movlb	0	; () banked
  1850  000D7A  6F97               	movwf	main@switch_pressed& (0+255),b
  1851                           
  1852                           ;newmain.c: 553: switch (switch_pressed) {
  1853  000D7C  D005               	goto	l219
  1854  000D7E                     
  1855                           ; BSR set to: 0
  1856                           ;newmain.c: 555: current_state = S_MENU_6;
  1857                           
  1858                           ; BSR set to: 0
  1859  000D7E  0E0A               	movlw	10
  1860  000D80  6E38               	movwf	_current_state,c
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;newmain.c: 556: LCD_clear();
  1864  000D82  ECDC  F00F         	call	_LCD_clear	;wreg free
  1865                           
  1866                           ;newmain.c: 560: }
  1867                           
  1868                           ;newmain.c: 559: break;
  1869                           
  1870                           ;newmain.c: 558: case 11:
  1871                           
  1872                           ;newmain.c: 557: break;
  1873  000D86  D039               	goto	l168
  1874  000D88                     l219:
  1875  000D88  0100               	movlb	0	; () banked
  1876  000D8A  5197               	movf	main@switch_pressed& (0+255),w,b
  1877                           
  1878                           ; Switch size 1, requested type "space"
  1879                           ; Number of cases is 2, Range of values is 10 to 11
  1880                           ; switch strategies available:
  1881                           ; Name         Instructions Cycles
  1882                           ; simple_byte            7     4 (average)
  1883                           ;	Chosen strategy is simple_byte
  1884  000D8C  0A0A               	xorlw	10	; case 10
  1885  000D8E  B4D8               	btfsc	status,2,c
  1886  000D90  D7F6               	goto	l220
  1887  000D92  D021               	goto	L7
  1888  000D94                     
  1889                           ;newmain.c: 564: LCD_clear();
  1890                           
  1891                           ; BSR set to: 0
  1892  000D94  ECDC  F00F         	call	_LCD_clear	;wreg free
  1893                           
  1894                           ;newmain.c: 565: LCD_setCursor(1,1);
  1895  000D98  0E00               	movlw	0
  1896  000D9A  6E22               	movwf	LCD_setCursor@pos+1,c
  1897  000D9C  0E01               	movlw	1
  1898  000D9E  6E21               	movwf	LCD_setCursor@pos,c
  1899  000DA0  0E00               	movlw	0
  1900  000DA2  6E24               	movwf	LCD_setCursor@row+1,c
  1901  000DA4  0E01               	movlw	1
  1902  000DA6  6E23               	movwf	LCD_setCursor@row,c
  1903  000DA8  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1904                           
  1905                           ;newmain.c: 566: LCD_displayString("Setup...");
  1906  000DAC  0E4F               	movlw	low STR_9
  1907  000DAE  6E2C               	movwf	LCD_displayString@str,c
  1908  000DB0  0E08               	movlw	high STR_9
  1909  000DB2  6E2D               	movwf	LCD_displayString@str+1,c
  1910  000DB4  EC91  F00B         	call	_LCD_displayString	;wreg free
  1911                           
  1912                           ;newmain.c: 567: switch_pressed = read_switches_synchronous();
  1913  000DB8  EC89  F00F         	call	_read_switches_synchronous	;wreg free
  1914  000DBC  0100               	movlb	0	; () banked
  1915  000DBE  6F97               	movwf	main@switch_pressed& (0+255),b
  1916                           
  1917                           ;newmain.c: 568: switch (switch_pressed) {
  1918  000DC0  D005               	goto	l224
  1919  000DC2                     
  1920                           ; BSR set to: 0
  1921                           ;newmain.c: 570: current_state = S_IDLE;
  1922                           
  1923                           ; BSR set to: 0
  1924  000DC2  0E04               	movlw	4
  1925  000DC4  6E38               	movwf	_current_state,c
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;newmain.c: 571: LCD_clear();
  1929  000DC6  ECDC  F00F         	call	_LCD_clear	;wreg free
  1930                           
  1931                           ;newmain.c: 575: }
  1932                           
  1933                           ;newmain.c: 574: break;
  1934                           
  1935                           ;newmain.c: 573: case 11:
  1936                           
  1937                           ;newmain.c: 572: break;
  1938  000DCA  D017               	goto	l168
  1939  000DCC                     l224:
  1940  000DCC  0100               	movlb	0	; () banked
  1941  000DCE  5197               	movf	main@switch_pressed& (0+255),w,b
  1942                           
  1943                           ; Switch size 1, requested type "space"
  1944                           ; Number of cases is 2, Range of values is 10 to 11
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte            7     4 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949  000DD0  0A0A               	xorlw	10	; case 10
  1950  000DD2  B4D8               	btfsc	status,2,c
  1951  000DD4  D7F6               	goto	l225
  1952  000DD6                     L7:
  1953  000DD6  0A01               	xorlw	1	; case 11
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;newmain.c: 576: break;
  1957  000DD8  D010               	goto	l168
  1958  000DDA                     
  1959                           ;newmain.c: 579: LCD_setCursor(1,1);
  1960                           
  1961                           ; BSR set to: 0
  1962  000DDA  0E00               	movlw	0
  1963  000DDC  6E22               	movwf	LCD_setCursor@pos+1,c
  1964  000DDE  0E01               	movlw	1
  1965  000DE0  6E21               	movwf	LCD_setCursor@pos,c
  1966  000DE2  0E00               	movlw	0
  1967  000DE4  6E24               	movwf	LCD_setCursor@row+1,c
  1968  000DE6  0E01               	movlw	1
  1969  000DE8  6E23               	movwf	LCD_setCursor@row,c
  1970  000DEA  EC42  F00C         	call	_LCD_setCursor	;wreg free
  1971                           
  1972                           ;newmain.c: 580: LCD_displayString("INVALID STATE");
  1973  000DEE  0E34               	movlw	low STR_10
  1974  000DF0  6E2C               	movwf	LCD_displayString@str,c
  1975  000DF2  0E08               	movlw	high STR_10
  1976  000DF4  6E2D               	movwf	LCD_displayString@str+1,c
  1977  000DF6  EC91  F00B         	call	_LCD_displayString	;wreg free
  1978  000DFA                     l168:
  1979  000DFA  5038               	movf	_current_state,w,c
  1980                           
  1981                           ; Switch size 1, requested type "space"
  1982                           ; Number of cases is 10, Range of values is 0 to 10
  1983                           ; switch strategies available:
  1984                           ; Name         Instructions Cycles
  1985                           ; simple_byte           31    16 (average)
  1986                           ;	Chosen strategy is simple_byte
  1987  000DFC  0A00               	xorlw	0	; case 0
  1988  000DFE  B4D8               	btfsc	status,2,c
  1989  000E00  D5A3               	goto	l169
  1990  000E02  0A01               	xorlw	1	; case 1
  1991  000E04  B4D8               	btfsc	status,2,c
  1992  000E06  D5BD               	goto	l171
  1993  000E08  0A03               	xorlw	3	; case 2
  1994  000E0A  B4D8               	btfsc	status,2,c
  1995  000E0C  D5C6               	goto	l173
  1996  000E0E  0A06               	xorlw	6	; case 4
  1997  000E10  B4D8               	btfsc	status,2,c
  1998  000E12  D5EF               	goto	l174
  1999  000E14  0A01               	xorlw	1	; case 5
  2000  000E16  B4D8               	btfsc	status,2,c
  2001  000E18  D6D6               	goto	l193
  2002  000E1A  0A03               	xorlw	3	; case 6
  2003  000E1C  B4D8               	btfsc	status,2,c
  2004  000E1E  D732               	goto	l203
  2005  000E20  0A01               	xorlw	1	; case 7
  2006  000E22  B4D8               	btfsc	status,2,c
  2007  000E24  D751               	goto	l208
  2008  000E26  0A0F               	xorlw	15	; case 8
  2009  000E28  B4D8               	btfsc	status,2,c
  2010  000E2A  D770               	goto	l213
  2011  000E2C  0A01               	xorlw	1	; case 9
  2012  000E2E  B4D8               	btfsc	status,2,c
  2013  000E30  D78F               	goto	l218
  2014  000E32  0A03               	xorlw	3	; case 10
  2015  000E34  B4D8               	btfsc	status,2,c
  2016  000E36  D7AE               	goto	l223
  2017  000E38  D7D0               	goto	l228
  2018  000E3A                     __end_of_main:
  2019                           	opt stack 0
  2020                           tblptru	equ	0xFF8
  2021                           tblptrh	equ	0xFF7
  2022                           tblptrl	equ	0xFF6
  2023                           tablat	equ	0xFF5
  2024                           prodh	equ	0xFF4
  2025                           prodl	equ	0xFF3
  2026                           intcon	equ	0xFF2
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postdec1	equ	0xFE5
  2030                           fsr1l	equ	0xFE1
  2031                           indf2	equ	0xFDF
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _volumeDB *****************
  2037 ;; Defined at:
  2038 ;;		line 159 in file "volume.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  volume          1    wreg     unsigned char 
  2041 ;;  o               2   32[COMRAM] PTR unsigned char 
  2042 ;;		 -> main@volstring(8), 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  volume          1   42[COMRAM] unsigned char 
  2045 ;;  gain            2   40[COMRAM] int 
  2046 ;;  gainDec         2   38[COMRAM] int 
  2047 ;;  modulus         2   36[COMRAM] int 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2057 ;;      Params:         2       0       0       0       0       0       0       0       0
  2058 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2059 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2060 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2061 ;;Total ram usage:       11 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    2
  2064 ;; This function calls:
  2065 ;;		___awdiv
  2066 ;;		___awmod
  2067 ;; This function is called by:
  2068 ;;		_main
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text1
  2073  000E3A                     __ptext1:
  2074                           	opt stack 0
  2075  000E3A                     _volumeDB:
  2076                           	opt stack 28
  2077                           
  2078                           ;incstack = 0
  2079                           ;volumeDB@volume stored from wreg
  2080  000E3A  6E2B               	movwf	volumeDB@volume,c
  2081                           
  2082                           ;volume.c: 160: int modulus = 0;
  2083  000E3C  0E00               	movlw	0
  2084  000E3E  6E26               	movwf	volumeDB@modulus+1,c
  2085  000E40  0E00               	movlw	0
  2086  000E42  6E25               	movwf	volumeDB@modulus,c
  2087                           
  2088                           ;volume.c: 161: int gain = 0;
  2089  000E44  0E00               	movlw	0
  2090  000E46  6E2A               	movwf	volumeDB@gain+1,c
  2091  000E48  0E00               	movlw	0
  2092  000E4A  6E29               	movwf	volumeDB@gain,c
  2093                           
  2094                           ;volume.c: 162: int gainDec = 0;
  2095  000E4C  0E00               	movlw	0
  2096  000E4E  6E28               	movwf	volumeDB@gainDec+1,c
  2097  000E50  0E00               	movlw	0
  2098  000E52  6E27               	movwf	volumeDB@gainDec,c
  2099                           
  2100                           ;volume.c: 164: if (volume == 0) {
  2101  000E54  502B               	movf	volumeDB@volume,w,c
  2102  000E56  A4D8               	btfss	status,2,c
  2103  000E58  D03F               	goto	l296
  2104                           
  2105                           ;volume.c: 165: o[0] = ' ';
  2106  000E5A  C021  FFD9         	movff	volumeDB@o,fsr2l
  2107  000E5E  C022  FFDA         	movff	volumeDB@o+1,fsr2h
  2108  000E62  0E20               	movlw	32
  2109  000E64  6EDF               	movwf	indf2,c
  2110                           
  2111                           ;volume.c: 166: o[1] = ' ';
  2112  000E66  EE20 F001          	lfsr	2,1
  2113  000E6A  5021               	movf	volumeDB@o,w,c
  2114  000E6C  26D9               	addwf	fsr2l,f,c
  2115  000E6E  5022               	movf	volumeDB@o+1,w,c
  2116  000E70  22DA               	addwfc	fsr2h,f,c
  2117  000E72  0E20               	movlw	32
  2118  000E74  6EDF               	movwf	indf2,c
  2119                           
  2120                           ;volume.c: 167: o[2] = ' ';
  2121  000E76  EE20 F002          	lfsr	2,2
  2122  000E7A  5021               	movf	volumeDB@o,w,c
  2123  000E7C  26D9               	addwf	fsr2l,f,c
  2124  000E7E  5022               	movf	volumeDB@o+1,w,c
  2125  000E80  22DA               	addwfc	fsr2h,f,c
  2126  000E82  0E20               	movlw	32
  2127  000E84  6EDF               	movwf	indf2,c
  2128                           
  2129                           ;volume.c: 168: o[3] = 'M';
  2130  000E86  EE20 F003          	lfsr	2,3
  2131  000E8A  5021               	movf	volumeDB@o,w,c
  2132  000E8C  26D9               	addwf	fsr2l,f,c
  2133  000E8E  5022               	movf	volumeDB@o+1,w,c
  2134  000E90  22DA               	addwfc	fsr2h,f,c
  2135  000E92  0E4D               	movlw	77
  2136  000E94  6EDF               	movwf	indf2,c
  2137                           
  2138                           ;volume.c: 169: o[4] = 'u';
  2139  000E96  EE20 F004          	lfsr	2,4
  2140  000E9A  5021               	movf	volumeDB@o,w,c
  2141  000E9C  26D9               	addwf	fsr2l,f,c
  2142  000E9E  5022               	movf	volumeDB@o+1,w,c
  2143  000EA0  22DA               	addwfc	fsr2h,f,c
  2144  000EA2  0E75               	movlw	117
  2145  000EA4  6EDF               	movwf	indf2,c
  2146                           
  2147                           ;volume.c: 170: o[5] = 't';
  2148  000EA6  EE20 F005          	lfsr	2,5
  2149  000EAA  5021               	movf	volumeDB@o,w,c
  2150  000EAC  26D9               	addwf	fsr2l,f,c
  2151  000EAE  5022               	movf	volumeDB@o+1,w,c
  2152  000EB0  22DA               	addwfc	fsr2h,f,c
  2153  000EB2  0E74               	movlw	116
  2154  000EB4  6EDF               	movwf	indf2,c
  2155                           
  2156                           ;volume.c: 171: o[6] = 'e';
  2157  000EB6  EE20 F006          	lfsr	2,6
  2158  000EBA  5021               	movf	volumeDB@o,w,c
  2159  000EBC  26D9               	addwf	fsr2l,f,c
  2160  000EBE  5022               	movf	volumeDB@o+1,w,c
  2161  000EC0  22DA               	addwfc	fsr2h,f,c
  2162  000EC2  0E65               	movlw	101
  2163  000EC4  6EDF               	movwf	indf2,c
  2164                           
  2165                           ;volume.c: 172: o[7] = '\0';
  2166  000EC6  EE20 F007          	lfsr	2,7
  2167  000ECA  5021               	movf	volumeDB@o,w,c
  2168  000ECC  26D9               	addwf	fsr2l,f,c
  2169  000ECE  5022               	movf	volumeDB@o+1,w,c
  2170  000ED0  22DA               	addwfc	fsr2h,f,c
  2171  000ED2  0E00               	movlw	0
  2172  000ED4  6EDF               	movwf	indf2,c
  2173                           
  2174                           ;volume.c: 173: return;
  2175  000ED6  0012               	return	
  2176  000ED8                     l296:
  2177                           
  2178                           ;volume.c: 174: }
  2179                           ;volume.c: 177: if (volume == 192) {
  2180  000ED8  0EC0               	movlw	192
  2181  000EDA  182B               	xorwf	volumeDB@volume,w,c
  2182  000EDC  A4D8               	btfss	status,2,c
  2183  000EDE  D00E               	goto	l298
  2184                           
  2185                           ;volume.c: 178: gain = 0;
  2186  000EE0  0E00               	movlw	0
  2187  000EE2  6E2A               	movwf	volumeDB@gain+1,c
  2188  000EE4  0E00               	movlw	0
  2189  000EE6  6E29               	movwf	volumeDB@gain,c
  2190                           
  2191                           ;volume.c: 179: gainDec = 0;
  2192  000EE8  0E00               	movlw	0
  2193  000EEA  6E28               	movwf	volumeDB@gainDec+1,c
  2194  000EEC  0E00               	movlw	0
  2195  000EEE  6E27               	movwf	volumeDB@gainDec,c
  2196                           
  2197                           ;volume.c: 180: o[0] = ' ';
  2198  000EF0  C021  FFD9         	movff	volumeDB@o,fsr2l
  2199  000EF4  C022  FFDA         	movff	volumeDB@o+1,fsr2h
  2200  000EF8  0E20               	movlw	32
  2201  000EFA  D05B               	goto	L9
  2202  000EFC                     l298:
  2203                           
  2204                           ;volume.c: 182: else if (volume > 192) {
  2205  000EFC  0EC0               	movlw	192
  2206  000EFE  642B               	cpfsgt	volumeDB@volume,c
  2207  000F00  D02D               	goto	l300
  2208                           
  2209                           ;volume.c: 183: gain = 31 - ((255-volume)/2);
  2210  000F02  502B               	movf	volumeDB@volume,w,c
  2211  000F04  6E23               	movwf	??_volumeDB& (0+255),c
  2212  000F06  6A24               	clrf	(??_volumeDB+1)& (0+255),c
  2213  000F08  1E23               	comf	??_volumeDB,f,c
  2214  000F0A  1E24               	comf	??_volumeDB+1,f,c
  2215  000F0C  4A23               	infsnz	??_volumeDB,f,c
  2216  000F0E  2A24               	incf	??_volumeDB+1,f,c
  2217  000F10  0EFF               	movlw	255
  2218  000F12  2423               	addwf	??_volumeDB,w,c
  2219  000F14  6E13               	movwf	___awdiv@dividend,c
  2220  000F16  0E00               	movlw	0
  2221  000F18  2024               	addwfc	??_volumeDB+1,w,c
  2222  000F1A  6E14               	movwf	___awdiv@dividend+1,c
  2223  000F1C  0E00               	movlw	0
  2224  000F1E  6E16               	movwf	___awdiv@divisor+1,c
  2225  000F20  0E02               	movlw	2
  2226  000F22  6E15               	movwf	___awdiv@divisor,c
  2227  000F24  EC95  F00C         	call	___awdiv	;wreg free
  2228  000F28  1E13               	comf	?___awdiv,f,c
  2229  000F2A  1E14               	comf	?___awdiv+1,f,c
  2230  000F2C  4A13               	infsnz	?___awdiv,f,c
  2231  000F2E  2A14               	incf	?___awdiv+1,f,c
  2232  000F30  0E1F               	movlw	31
  2233  000F32  2413               	addwf	?___awdiv,w,c
  2234  000F34  6E29               	movwf	volumeDB@gain,c
  2235  000F36  0E00               	movlw	0
  2236  000F38  2014               	addwfc	?___awdiv+1,w,c
  2237  000F3A  6E2A               	movwf	volumeDB@gain+1,c
  2238                           
  2239                           ;volume.c: 184: modulus = (254-volume) %2;
  2240  000F3C  502B               	movf	volumeDB@volume,w,c
  2241  000F3E  0800               	sublw	0
  2242  000F40  6E23               	movwf	??_volumeDB& (0+255),c
  2243  000F42  0EFE               	movlw	254
  2244  000F44  2623               	addwf	??_volumeDB,f,c
  2245  000F46  0E01               	movlw	1
  2246  000F48  1623               	andwf	??_volumeDB,f,c
  2247  000F4A  5023               	movf	??_volumeDB,w,c
  2248  000F4C  6E25               	movwf	volumeDB@modulus,c
  2249  000F4E  6A26               	clrf	volumeDB@modulus+1,c
  2250                           
  2251                           ;volume.c: 185: o[0]='+';
  2252  000F50  C021  FFD9         	movff	volumeDB@o,fsr2l
  2253  000F54  C022  FFDA         	movff	volumeDB@o+1,fsr2h
  2254  000F58  0E2B               	movlw	43
  2255  000F5A  D02B               	goto	L9
  2256  000F5C                     l300:
  2257                           
  2258                           ;volume.c: 187: else if (volume < 192) {
  2259  000F5C  0EC0               	movlw	192
  2260  000F5E  602B               	cpfslt	volumeDB@volume,c
  2261  000F60  D029               	goto	l302
  2262                           
  2263                           ;volume.c: 188: gain = ((254-volume)/2)-31;
  2264  000F62  502B               	movf	volumeDB@volume,w,c
  2265  000F64  6E23               	movwf	??_volumeDB& (0+255),c
  2266  000F66  6A24               	clrf	(??_volumeDB+1)& (0+255),c
  2267  000F68  1E23               	comf	??_volumeDB,f,c
  2268  000F6A  1E24               	comf	??_volumeDB+1,f,c
  2269  000F6C  4A23               	infsnz	??_volumeDB,f,c
  2270  000F6E  2A24               	incf	??_volumeDB+1,f,c
  2271  000F70  0EFE               	movlw	254
  2272  000F72  2423               	addwf	??_volumeDB,w,c
  2273  000F74  6E13               	movwf	___awdiv@dividend,c
  2274  000F76  0E00               	movlw	0
  2275  000F78  2024               	addwfc	??_volumeDB+1,w,c
  2276  000F7A  6E14               	movwf	___awdiv@dividend+1,c
  2277  000F7C  0E00               	movlw	0
  2278  000F7E  6E16               	movwf	___awdiv@divisor+1,c
  2279  000F80  0E02               	movlw	2
  2280  000F82  6E15               	movwf	___awdiv@divisor,c
  2281  000F84  EC95  F00C         	call	___awdiv	;wreg free
  2282  000F88  0EE1               	movlw	225
  2283  000F8A  2413               	addwf	?___awdiv,w,c
  2284  000F8C  6E29               	movwf	volumeDB@gain,c
  2285  000F8E  0EFF               	movlw	255
  2286  000F90  2014               	addwfc	?___awdiv+1,w,c
  2287  000F92  6E2A               	movwf	volumeDB@gain+1,c
  2288                           
  2289                           ;volume.c: 189: modulus = (254-volume)%2;
  2290  000F94  502B               	movf	volumeDB@volume,w,c
  2291  000F96  0800               	sublw	0
  2292  000F98  6E23               	movwf	??_volumeDB& (0+255),c
  2293  000F9A  0EFE               	movlw	254
  2294  000F9C  2623               	addwf	??_volumeDB,f,c
  2295  000F9E  0E01               	movlw	1
  2296  000FA0  1623               	andwf	??_volumeDB,f,c
  2297  000FA2  5023               	movf	??_volumeDB,w,c
  2298  000FA4  6E25               	movwf	volumeDB@modulus,c
  2299  000FA6  6A26               	clrf	volumeDB@modulus+1,c
  2300                           
  2301                           ;volume.c: 190: o[0]='-';
  2302  000FA8  C021  FFD9         	movff	volumeDB@o,fsr2l
  2303  000FAC  C022  FFDA         	movff	volumeDB@o+1,fsr2h
  2304  000FB0  0E2D               	movlw	45
  2305  000FB2                     L9:
  2306  000FB2  6EDF               	movwf	indf2,c
  2307  000FB4                     l302:
  2308                           
  2309                           ;volume.c: 191: }
  2310                           ;volume.c: 192: if (modulus)
  2311  000FB4  5025               	movf	volumeDB@modulus,w,c
  2312  000FB6  1026               	iorwf	volumeDB@modulus+1,w,c
  2313  000FB8  B4D8               	btfsc	status,2,c
  2314  000FBA  D004               	goto	l303
  2315                           
  2316                           ;volume.c: 193: gainDec = 5;
  2317  000FBC  0E00               	movlw	0
  2318  000FBE  6E28               	movwf	volumeDB@gainDec+1,c
  2319  000FC0  0E05               	movlw	5
  2320  000FC2  D003               	goto	L10
  2321  000FC4                     l303:
  2322                           
  2323                           ;volume.c: 194: else
  2324                           ;volume.c: 195: gainDec = 0;
  2325  000FC4  0E00               	movlw	0
  2326  000FC6  6E28               	movwf	volumeDB@gainDec+1,c
  2327  000FC8  0E00               	movlw	0
  2328  000FCA                     L10:
  2329  000FCA  6E27               	movwf	volumeDB@gainDec,c
  2330                           
  2331                           ;volume.c: 197: o[1] = '0'+(gain / 10) % 10;
  2332  000FCC  EE20 F001          	lfsr	2,1
  2333  000FD0  5021               	movf	volumeDB@o,w,c
  2334  000FD2  26D9               	addwf	fsr2l,f,c
  2335  000FD4  5022               	movf	volumeDB@o+1,w,c
  2336  000FD6  22DA               	addwfc	fsr2h,f,c
  2337  000FD8  0E00               	movlw	0
  2338  000FDA  6E16               	movwf	___awdiv@divisor+1,c
  2339  000FDC  0E0A               	movlw	10
  2340  000FDE  6E15               	movwf	___awdiv@divisor,c
  2341  000FE0  C029  F013         	movff	volumeDB@gain,___awdiv@dividend
  2342  000FE4  C02A  F014         	movff	volumeDB@gain+1,___awdiv@dividend+1
  2343  000FE8  EC95  F00C         	call	___awdiv	;wreg free
  2344  000FEC  C013  F01B         	movff	?___awdiv,___awmod@dividend
  2345  000FF0  C014  F01C         	movff	?___awdiv+1,___awmod@dividend+1
  2346  000FF4  0E00               	movlw	0
  2347  000FF6  6E1E               	movwf	___awmod@divisor+1,c
  2348  000FF8  0E0A               	movlw	10
  2349  000FFA  6E1D               	movwf	___awmod@divisor,c
  2350  000FFC  ECD7  F00C         	call	___awmod	;wreg free
  2351  001000  501B               	movf	?___awmod,w,c
  2352  001002  0F30               	addlw	48
  2353  001004  6EDF               	movwf	indf2,c
  2354                           
  2355                           ;volume.c: 198: o[2] = '0'+gain %10;
  2356  001006  EE20 F002          	lfsr	2,2
  2357  00100A  5021               	movf	volumeDB@o,w,c
  2358  00100C  26D9               	addwf	fsr2l,f,c
  2359  00100E  5022               	movf	volumeDB@o+1,w,c
  2360  001010  22DA               	addwfc	fsr2h,f,c
  2361  001012  C029  F01B         	movff	volumeDB@gain,___awmod@dividend
  2362  001016  C02A  F01C         	movff	volumeDB@gain+1,___awmod@dividend+1
  2363  00101A  0E00               	movlw	0
  2364  00101C  6E1E               	movwf	___awmod@divisor+1,c
  2365  00101E  0E0A               	movlw	10
  2366  001020  6E1D               	movwf	___awmod@divisor,c
  2367  001022  ECD7  F00C         	call	___awmod	;wreg free
  2368  001026  501B               	movf	?___awmod,w,c
  2369  001028  0F30               	addlw	48
  2370  00102A  6EDF               	movwf	indf2,c
  2371                           
  2372                           ;volume.c: 199: o[3] = '.';
  2373  00102C  EE20 F003          	lfsr	2,3
  2374  001030  5021               	movf	volumeDB@o,w,c
  2375  001032  26D9               	addwf	fsr2l,f,c
  2376  001034  5022               	movf	volumeDB@o+1,w,c
  2377  001036  22DA               	addwfc	fsr2h,f,c
  2378  001038  0E2E               	movlw	46
  2379  00103A  6EDF               	movwf	indf2,c
  2380                           
  2381                           ;volume.c: 200: o[4] = '0'+gainDec % 10;
  2382  00103C  EE20 F004          	lfsr	2,4
  2383  001040  5021               	movf	volumeDB@o,w,c
  2384  001042  26D9               	addwf	fsr2l,f,c
  2385  001044  5022               	movf	volumeDB@o+1,w,c
  2386  001046  22DA               	addwfc	fsr2h,f,c
  2387  001048  C027  F01B         	movff	volumeDB@gainDec,___awmod@dividend
  2388  00104C  C028  F01C         	movff	volumeDB@gainDec+1,___awmod@dividend+1
  2389  001050  0E00               	movlw	0
  2390  001052  6E1E               	movwf	___awmod@divisor+1,c
  2391  001054  0E0A               	movlw	10
  2392  001056  6E1D               	movwf	___awmod@divisor,c
  2393  001058  ECD7  F00C         	call	___awmod	;wreg free
  2394  00105C  501B               	movf	?___awmod,w,c
  2395  00105E  0F30               	addlw	48
  2396  001060  6EDF               	movwf	indf2,c
  2397                           
  2398                           ;volume.c: 201: o[5] = 'd';
  2399  001062  EE20 F005          	lfsr	2,5
  2400  001066  5021               	movf	volumeDB@o,w,c
  2401  001068  26D9               	addwf	fsr2l,f,c
  2402  00106A  5022               	movf	volumeDB@o+1,w,c
  2403  00106C  22DA               	addwfc	fsr2h,f,c
  2404  00106E  0E64               	movlw	100
  2405  001070  6EDF               	movwf	indf2,c
  2406                           
  2407                           ;volume.c: 202: o[6] = 'B';
  2408  001072  EE20 F006          	lfsr	2,6
  2409  001076  5021               	movf	volumeDB@o,w,c
  2410  001078  26D9               	addwf	fsr2l,f,c
  2411  00107A  5022               	movf	volumeDB@o+1,w,c
  2412  00107C  22DA               	addwfc	fsr2h,f,c
  2413  00107E  0E42               	movlw	66
  2414  001080  6EDF               	movwf	indf2,c
  2415                           
  2416                           ;volume.c: 203: o[7] = '\0';
  2417  001082  EE20 F007          	lfsr	2,7
  2418  001086  5021               	movf	volumeDB@o,w,c
  2419  001088  26D9               	addwf	fsr2l,f,c
  2420  00108A  5022               	movf	volumeDB@o+1,w,c
  2421  00108C  22DA               	addwfc	fsr2h,f,c
  2422  00108E  0E00               	movlw	0
  2423  001090  6EDF               	movwf	indf2,c
  2424  001092  0012               	return		;funcret
  2425  001094                     __end_of_volumeDB:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           postinc0	equ	0xFEE
  2435                           wreg	equ	0xFE8
  2436                           postdec1	equ	0xFE5
  2437                           fsr1l	equ	0xFE1
  2438                           indf2	equ	0xFDF
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function ___awmod *****************
  2444 ;; Defined at:
  2445 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  dividend        2   26[COMRAM] int 
  2448 ;;  divisor         2   28[COMRAM] int 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  sign            1   31[COMRAM] unsigned char 
  2451 ;;  counter         1   30[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  2   26[COMRAM] int 
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2461 ;;      Params:         4       0       0       0       0       0       0       0       0
  2462 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2464 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2465 ;;Total ram usage:        6 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_volumeDB
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           	psect	text2
  2476  0019AE                     __ptext2:
  2477                           	opt stack 0
  2478  0019AE                     ___awmod:
  2479                           	opt stack 28
  2480                           
  2481                           ;incstack = 0
  2482  0019AE  0E00               	movlw	0
  2483  0019B0  6E20               	movwf	___awmod@sign,c
  2484  0019B2  AE1C               	btfss	___awmod@dividend+1,7,c
  2485  0019B4  D006               	goto	l873
  2486  0019B6  6C1B               	negf	___awmod@dividend,c
  2487  0019B8  1E1C               	comf	___awmod@dividend+1,f,c
  2488  0019BA  B0D8               	btfsc	status,0,c
  2489  0019BC  2A1C               	incf	___awmod@dividend+1,f,c
  2490  0019BE  0E01               	movlw	1
  2491  0019C0  6E20               	movwf	___awmod@sign,c
  2492  0019C2                     l873:
  2493  0019C2  AE1E               	btfss	___awmod@divisor+1,7,c
  2494  0019C4  D004               	goto	l874
  2495  0019C6  6C1D               	negf	___awmod@divisor,c
  2496  0019C8  1E1E               	comf	___awmod@divisor+1,f,c
  2497  0019CA  B0D8               	btfsc	status,0,c
  2498  0019CC  2A1E               	incf	___awmod@divisor+1,f,c
  2499  0019CE                     l874:
  2500  0019CE  501D               	movf	___awmod@divisor,w,c
  2501  0019D0  101E               	iorwf	___awmod@divisor+1,w,c
  2502  0019D2  B4D8               	btfsc	status,2,c
  2503  0019D4  D018               	goto	l881
  2504  0019D6  0E01               	movlw	1
  2505  0019D8  6E1F               	movwf	___awmod@counter,c
  2506  0019DA  D004               	goto	l876
  2507  0019DC  90D8               	bcf	status,0,c
  2508  0019DE  361D               	rlcf	___awmod@divisor,f,c
  2509  0019E0  361E               	rlcf	___awmod@divisor+1,f,c
  2510  0019E2  2A1F               	incf	___awmod@counter,f,c
  2511  0019E4                     l876:
  2512  0019E4  AE1E               	btfss	___awmod@divisor+1,7,c
  2513  0019E6  D7FA               	goto	l877
  2514  0019E8                     u3070:
  2515  0019E8  501D               	movf	___awmod@divisor,w,c
  2516  0019EA  5C1B               	subwf	___awmod@dividend,w,c
  2517  0019EC  501E               	movf	___awmod@divisor+1,w,c
  2518  0019EE  581C               	subwfb	___awmod@dividend+1,w,c
  2519  0019F0  A0D8               	btfss	status,0,c
  2520  0019F2  D004               	goto	l880
  2521  0019F4  501D               	movf	___awmod@divisor,w,c
  2522  0019F6  5E1B               	subwf	___awmod@dividend,f,c
  2523  0019F8  501E               	movf	___awmod@divisor+1,w,c
  2524  0019FA  5A1C               	subwfb	___awmod@dividend+1,f,c
  2525  0019FC                     l880:
  2526  0019FC  90D8               	bcf	status,0,c
  2527  0019FE  321E               	rrcf	___awmod@divisor+1,f,c
  2528  001A00  321D               	rrcf	___awmod@divisor,f,c
  2529  001A02  2E1F               	decfsz	___awmod@counter,f,c
  2530  001A04  D7F1               	goto	u3070
  2531  001A06                     l881:
  2532  001A06  5020               	movf	___awmod@sign,w,c
  2533  001A08  B4D8               	btfsc	status,2,c
  2534  001A0A  D004               	goto	l882
  2535  001A0C  6C1B               	negf	___awmod@dividend,c
  2536  001A0E  1E1C               	comf	___awmod@dividend+1,f,c
  2537  001A10  B0D8               	btfsc	status,0,c
  2538  001A12  2A1C               	incf	___awmod@dividend+1,f,c
  2539  001A14                     l882:
  2540  001A14  C01B  F01B         	movff	___awmod@dividend,?___awmod
  2541  001A18  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  2542  001A1C  0012               	return	
  2543  001A1E                     __end_of___awmod:
  2544                           	opt stack 0
  2545                           tblptru	equ	0xFF8
  2546                           tblptrh	equ	0xFF7
  2547                           tblptrl	equ	0xFF6
  2548                           tablat	equ	0xFF5
  2549                           prodh	equ	0xFF4
  2550                           prodl	equ	0xFF3
  2551                           intcon	equ	0xFF2
  2552                           postinc0	equ	0xFEE
  2553                           wreg	equ	0xFE8
  2554                           postdec1	equ	0xFE5
  2555                           fsr1l	equ	0xFE1
  2556                           indf2	equ	0xFDF
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function ___awdiv *****************
  2562 ;; Defined at:
  2563 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  dividend        2   18[COMRAM] int 
  2566 ;;  divisor         2   20[COMRAM] int 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  quotient        2   24[COMRAM] int 
  2569 ;;  sign            1   23[COMRAM] unsigned char 
  2570 ;;  counter         1   22[COMRAM] unsigned char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2   18[COMRAM] int 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2580 ;;      Params:         4       0       0       0       0       0       0       0       0
  2581 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2583 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2584 ;;Total ram usage:        8 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    1
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_volumeDB
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text3
  2595  00192A                     __ptext3:
  2596                           	opt stack 0
  2597  00192A                     ___awdiv:
  2598                           	opt stack 28
  2599                           
  2600                           ;incstack = 0
  2601  00192A  0E00               	movlw	0
  2602  00192C  6E18               	movwf	___awdiv@sign,c
  2603  00192E  AE16               	btfss	___awdiv@divisor+1,7,c
  2604  001930  D006               	goto	l860
  2605  001932  6C15               	negf	___awdiv@divisor,c
  2606  001934  1E16               	comf	___awdiv@divisor+1,f,c
  2607  001936  B0D8               	btfsc	status,0,c
  2608  001938  2A16               	incf	___awdiv@divisor+1,f,c
  2609  00193A  0E01               	movlw	1
  2610  00193C  6E18               	movwf	___awdiv@sign,c
  2611  00193E                     l860:
  2612  00193E  AE14               	btfss	___awdiv@dividend+1,7,c
  2613  001940  D006               	goto	l861
  2614  001942  6C13               	negf	___awdiv@dividend,c
  2615  001944  1E14               	comf	___awdiv@dividend+1,f,c
  2616  001946  B0D8               	btfsc	status,0,c
  2617  001948  2A14               	incf	___awdiv@dividend+1,f,c
  2618  00194A  0E01               	movlw	1
  2619  00194C  1A18               	xorwf	___awdiv@sign,f,c
  2620  00194E                     l861:
  2621  00194E  0E00               	movlw	0
  2622  001950  6E1A               	movwf	___awdiv@quotient+1,c
  2623  001952  0E00               	movlw	0
  2624  001954  6E19               	movwf	___awdiv@quotient,c
  2625  001956  5015               	movf	___awdiv@divisor,w,c
  2626  001958  1016               	iorwf	___awdiv@divisor+1,w,c
  2627  00195A  B4D8               	btfsc	status,2,c
  2628  00195C  D01C               	goto	l868
  2629  00195E  0E01               	movlw	1
  2630  001960  6E17               	movwf	___awdiv@counter,c
  2631  001962  D004               	goto	l863
  2632  001964  90D8               	bcf	status,0,c
  2633  001966  3615               	rlcf	___awdiv@divisor,f,c
  2634  001968  3616               	rlcf	___awdiv@divisor+1,f,c
  2635  00196A  2A17               	incf	___awdiv@counter,f,c
  2636  00196C                     l863:
  2637  00196C  AE16               	btfss	___awdiv@divisor+1,7,c
  2638  00196E  D7FA               	goto	l864
  2639  001970                     u3010:
  2640  001970  90D8               	bcf	status,0,c
  2641  001972  3619               	rlcf	___awdiv@quotient,f,c
  2642  001974  361A               	rlcf	___awdiv@quotient+1,f,c
  2643  001976  5015               	movf	___awdiv@divisor,w,c
  2644  001978  5C13               	subwf	___awdiv@dividend,w,c
  2645  00197A  5016               	movf	___awdiv@divisor+1,w,c
  2646  00197C  5814               	subwfb	___awdiv@dividend+1,w,c
  2647  00197E  A0D8               	btfss	status,0,c
  2648  001980  D005               	goto	l867
  2649  001982  5015               	movf	___awdiv@divisor,w,c
  2650  001984  5E13               	subwf	___awdiv@dividend,f,c
  2651  001986  5016               	movf	___awdiv@divisor+1,w,c
  2652  001988  5A14               	subwfb	___awdiv@dividend+1,f,c
  2653  00198A  8019               	bsf	___awdiv@quotient,0,c
  2654  00198C                     l867:
  2655  00198C  90D8               	bcf	status,0,c
  2656  00198E  3216               	rrcf	___awdiv@divisor+1,f,c
  2657  001990  3215               	rrcf	___awdiv@divisor,f,c
  2658  001992  2E17               	decfsz	___awdiv@counter,f,c
  2659  001994  D7ED               	goto	u3010
  2660  001996                     l868:
  2661  001996  5018               	movf	___awdiv@sign,w,c
  2662  001998  B4D8               	btfsc	status,2,c
  2663  00199A  D004               	goto	l869
  2664  00199C  6C19               	negf	___awdiv@quotient,c
  2665  00199E  1E1A               	comf	___awdiv@quotient+1,f,c
  2666  0019A0  B0D8               	btfsc	status,0,c
  2667  0019A2  2A1A               	incf	___awdiv@quotient+1,f,c
  2668  0019A4                     l869:
  2669  0019A4  C019  F013         	movff	___awdiv@quotient,?___awdiv
  2670  0019A8  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  2671  0019AC  0012               	return	
  2672  0019AE                     __end_of___awdiv:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           intcon	equ	0xFF2
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           fsr1l	equ	0xFE1
  2685                           indf2	equ	0xFDF
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _update_switches_and_relays *****************
  2691 ;; Defined at:
  2692 ;;		line 211 in file "switches.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  i               1   23[COMRAM] unsigned char 
  2697 ;;  i               1   22[COMRAM] unsigned char 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         0       0       0       0       0       0       0       0       0
  2708 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2709 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2710 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        6 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;;		_startup_sequence
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text4
  2723  0017D6                     __ptext4:
  2724                           	opt stack 0
  2725  0017D6                     _update_switches_and_relays:
  2726                           	opt stack 29
  2727                           
  2728                           ;switches.c: 213: LATCbits.LC2 = 0;
  2729                           
  2730                           ;incstack = 0
  2731  0017D6  948B               	bcf	3979,2,c	;volatile
  2732                           
  2733                           ;switches.c: 219: for (char i = 8; i != 0; i--) {
  2734  0017D8  0E08               	movlw	8
  2735  0017DA  6E17               	movwf	update_switches_and_relays@i,c
  2736  0017DC  5017               	movf	update_switches_and_relays@i,w,c
  2737  0017DE  B4D8               	btfsc	status,2,c
  2738  0017E0  D025               	goto	u3140
  2739                           
  2740                           ;switches.c: 221: LATCbits.LC0 = (((led) & (1 << (i))) >> (i));
  2741  0017E2  C017  F013         	movff	update_switches_and_relays@i,??_update_switches_and_relays
  2742  0017E6  C017  F014         	movff	update_switches_and_relays@i,??_update_switches_and_relays+1
  2743  0017EA  0E01               	movlw	1
  2744  0017EC  6E15               	movwf	(??_update_switches_and_relays+2)& (0+255),c
  2745  0017EE  0E00               	movlw	0
  2746  0017F0  6E16               	movwf	(??_update_switches_and_relays+3)& (0+255),c
  2747  0017F2  2A14               	incf	??_update_switches_and_relays+1,f,c
  2748  0017F4  D003               	goto	u3124
  2749  0017F6                     u3125:
  2750  0017F6  90D8               	bcf	status,0,c
  2751  0017F8  3615               	rlcf	??_update_switches_and_relays+2,f,c
  2752  0017FA  3616               	rlcf	??_update_switches_and_relays+3,f,c
  2753  0017FC                     u3124:
  2754  0017FC  2E14               	decfsz	??_update_switches_and_relays+1,f,c
  2755  0017FE  D7FB               	goto	u3125
  2756  001800  0100               	movlb	0	; () banked
  2757  001802  517A               	movf	_led& (0+255),w,b
  2758  001804  1615               	andwf	??_update_switches_and_relays+2,f,c
  2759  001806  517B               	movf	(_led+1)& (0+255),w,b
  2760  001808  1616               	andwf	??_update_switches_and_relays+3,f,c
  2761  00180A  2A13               	incf	??_update_switches_and_relays,f,c
  2762  00180C  D003               	goto	u3134
  2763  00180E                     u3135:
  2764  00180E  90D8               	bcf	status,0,c
  2765  001810  3216               	rrcf	??_update_switches_and_relays+3,f,c
  2766  001812  3215               	rrcf	??_update_switches_and_relays+2,f,c
  2767  001814                     u3134:
  2768  001814  2E13               	decfsz	??_update_switches_and_relays,f,c
  2769  001816  D7FB               	goto	u3135
  2770  001818  508B               	movf	3979,w,c	;volatile
  2771  00181A  1815               	xorwf	??_update_switches_and_relays+2,w,c
  2772  00181C  0BFE               	andlw	-2
  2773  00181E  1815               	xorwf	??_update_switches_and_relays+2,w,c
  2774  001820  6E8B               	movwf	3979,c	;volatile
  2775                           
  2776                           ;switches.c: 224: LATCbits.LC1 = 1;
  2777  001822  828B               	bsf	3979,1,c	;volatile
  2778  001824  F000               	nop		;# 
  2779                           
  2780                           ;switches.c: 226: LATCbits.LC1 = 0;
  2781  001826  928B               	bcf	3979,1,c	;volatile
  2782  001828  0617               	decf	update_switches_and_relays@i,f,c
  2783  00182A  D7D8               	goto	L11
  2784  00182C                     u3140:
  2785                           
  2786                           ;switches.c: 230: }
  2787                           ;switches.c: 233: for (char i = 8; i!= 0; i--) {
  2788  00182C  0E08               	movlw	8
  2789  00182E  6E18               	movwf	update_switches_and_relays@i_1104,c
  2790  001830  D024               	goto	l4138
  2791  001832                     
  2792                           ;switches.c: 234: LATCbits.LC0 = (((relay_source) & (1 << (i))) >> (i));
  2793  001832  C018  F013         	movff	update_switches_and_relays@i_1104,??_update_switches_and_relays
  2794  001836  C018  F014         	movff	update_switches_and_relays@i_1104,??_update_switches_and_relays+1
  2795  00183A  0E01               	movlw	1
  2796  00183C  6E15               	movwf	(??_update_switches_and_relays+2)& (0+255),c
  2797  00183E  0E00               	movlw	0
  2798  001840  6E16               	movwf	(??_update_switches_and_relays+3)& (0+255),c
  2799  001842  2A14               	incf	??_update_switches_and_relays+1,f,c
  2800  001844  D003               	goto	u3164
  2801  001846                     u3165:
  2802  001846  90D8               	bcf	status,0,c
  2803  001848  3615               	rlcf	??_update_switches_and_relays+2,f,c
  2804  00184A  3616               	rlcf	??_update_switches_and_relays+3,f,c
  2805  00184C                     u3164:
  2806  00184C  2E14               	decfsz	??_update_switches_and_relays+1,f,c
  2807  00184E  D7FB               	goto	u3165
  2808  001850  0100               	movlb	0	; () banked
  2809  001852  517C               	movf	_relay_source& (0+255),w,b
  2810  001854  1615               	andwf	??_update_switches_and_relays+2,f,c
  2811  001856  517D               	movf	(_relay_source+1)& (0+255),w,b
  2812  001858  1616               	andwf	??_update_switches_and_relays+3,f,c
  2813  00185A  2A13               	incf	??_update_switches_and_relays,f,c
  2814  00185C  D003               	goto	u3174
  2815  00185E                     u3175:
  2816  00185E  90D8               	bcf	status,0,c
  2817  001860  3216               	rrcf	??_update_switches_and_relays+3,f,c
  2818  001862  3215               	rrcf	??_update_switches_and_relays+2,f,c
  2819  001864                     u3174:
  2820  001864  2E13               	decfsz	??_update_switches_and_relays,f,c
  2821  001866  D7FB               	goto	u3175
  2822  001868  508B               	movf	3979,w,c	;volatile
  2823  00186A  1815               	xorwf	??_update_switches_and_relays+2,w,c
  2824  00186C  0BFE               	andlw	-2
  2825  00186E  1815               	xorwf	??_update_switches_and_relays+2,w,c
  2826  001870  6E8B               	movwf	3979,c	;volatile
  2827                           
  2828                           ;switches.c: 235: LATCbits.LC1 = 1;
  2829  001872  828B               	bsf	3979,1,c	;volatile
  2830  001874  F000               	nop		;# 
  2831                           
  2832                           ;switches.c: 237: LATCbits.LC1 = 0;
  2833  001876  928B               	bcf	3979,1,c	;volatile
  2834  001878  0618               	decf	update_switches_and_relays@i_1104,f,c
  2835  00187A                     l4138:
  2836  00187A  5018               	movf	update_switches_and_relays@i_1104,w,c
  2837  00187C  A4D8               	btfss	status,2,c
  2838  00187E  D7D9               	goto	l446
  2839                           
  2840                           ;switches.c: 242: }
  2841                           ;switches.c: 245: LATCbits.LC2 = 1;
  2842  001880  848B               	bsf	3979,2,c	;volatile
  2843  001882  0012               	return		;funcret
  2844  001884                     __end_of_update_switches_and_relays:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           intcon	equ	0xFF2
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _toggle_mute *****************
  2863 ;; Defined at:
  2864 ;;		line 107 in file "volume.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2878 ;;      Params:         0       0       0       0       0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2881 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    2
  2885 ;; This function calls:
  2886 ;;		_clear_mute_led
  2887 ;;		_set_mute_led
  2888 ;;		_set_volume
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text5
  2895  001CB0                     __ptext5:
  2896                           	opt stack 0
  2897  001CB0                     _toggle_mute:
  2898                           	opt stack 28
  2899                           
  2900                           ;volume.c: 108: if (is_muted) {
  2901                           
  2902                           ;incstack = 0
  2903  001CB0  0100               	movlb	0	; () banked
  2904  001CB2  5180               	movf	_is_muted& (0+255),w,b
  2905  001CB4  B4D8               	btfsc	status,2,c
  2906  001CB6  D00F               	goto	l282
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;volume.c: 109: volume_left = muted_volume_left;
  2910  001CB8  C037  F040         	movff	_muted_volume_left,_volume_left	;volatile
  2911                           
  2912                           ;volume.c: 110: volume_right = muted_volume_right;
  2913  001CBC  C081  F03F         	movff	_muted_volume_right,_volume_right	;volatile
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;volume.c: 111: set_volume(volume_left,volume_right);
  2917  001CC0  C03F  F013         	movff	_volume_right,set_volume@vol_right	;volatile
  2918  001CC4  5040               	movf	_volume_left,w,c	;volatile
  2919  001CC6  EC75  F00D         	call	_set_volume
  2920                           
  2921                           ;volume.c: 112: clear_mute_led();
  2922  001CCA  EC30  F010         	call	_clear_mute_led	;wreg free
  2923                           
  2924                           ;volume.c: 113: is_muted = 0;
  2925  001CCE  0E00               	movlw	0
  2926  001CD0  0100               	movlb	0	; () banked
  2927  001CD2  6F80               	movwf	_is_muted& (0+255),b
  2928                           
  2929                           ;volume.c: 114: } else {
  2930  001CD4  0012               	return	
  2931  001CD6                     l282:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;volume.c: 115: muted_volume_left = volume_left;
  2935  001CD6  C040  F037         	movff	_volume_left,_muted_volume_left	;volatile
  2936                           
  2937                           ;volume.c: 116: muted_volume_right = volume_right;
  2938  001CDA  C03F  F081         	movff	_volume_right,_muted_volume_right	;volatile
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;volume.c: 117: volume_left = 0;
  2942  001CDE  0E00               	movlw	0
  2943  001CE0  6E40               	movwf	_volume_left,c	;volatile
  2944                           
  2945                           ;volume.c: 118: volume_right = 0;
  2946  001CE2  0E00               	movlw	0
  2947  001CE4  6E3F               	movwf	_volume_right,c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;volume.c: 119: set_volume(0,0);
  2951  001CE6  0E00               	movlw	0
  2952  001CE8  6E13               	movwf	set_volume@vol_right,c
  2953  001CEA  0E00               	movlw	0
  2954  001CEC  EC75  F00D         	call	_set_volume
  2955                           
  2956                           ;volume.c: 120: set_mute_led();
  2957  001CF0  EC2E  F010         	call	_set_mute_led	;wreg free
  2958                           
  2959                           ;volume.c: 121: is_muted = 1;
  2960  001CF4  0E01               	movlw	1
  2961  001CF6  0100               	movlb	0	; () banked
  2962  001CF8  6F80               	movwf	_is_muted& (0+255),b
  2963  001CFA  0012               	return	
  2964  001CFC                     __end_of_toggle_mute:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           intcon	equ	0xFF2
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _set_volume *****************
  2983 ;; Defined at:
  2984 ;;		line 60 in file "volume.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  vol_left        1    wreg     unsigned char 
  2987 ;;  vol_right       1   18[COMRAM] unsigned char 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  vol_left        1   19[COMRAM] unsigned char 
  2990 ;;  i               1   21[COMRAM] unsigned char 
  2991 ;;  i               1   20[COMRAM] unsigned char 
  2992 ;;  vbitsel         1   22[COMRAM] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, status,2, status,0
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3002 ;;      Params:         1       0       0       0       0       0       0       0       0
  3003 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3005 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3006 ;;Total ram usage:        5 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    1
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;;		_toggle_mute
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text6
  3018  001AEA                     __ptext6:
  3019                           	opt stack 0
  3020  001AEA                     _set_volume:
  3021                           	opt stack 28
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;incstack = 0
  3025                           ;set_volume@vol_left stored from wreg
  3026  001AEA  6E14               	movwf	set_volume@vol_left,c
  3027                           
  3028                           ;volume.c: 61: unsigned char vbitsel = 0x80;
  3029  001AEC  0E80               	movlw	128
  3030  001AEE  6E17               	movwf	set_volume@vbitsel,c
  3031                           
  3032                           ;volume.c: 64: LATEbits.LE2 = 0;
  3033  001AF0  948D               	bcf	3981,2,c	;volatile
  3034                           
  3035                           ;volume.c: 67: for (char i = 0; i< 8; i++) {
  3036  001AF2  0E00               	movlw	0
  3037  001AF4  6E15               	movwf	set_volume@i,c
  3038  001AF6                     l3958:
  3039  001AF6  0E07               	movlw	7
  3040  001AF8  6415               	cpfsgt	set_volume@i,c
  3041  001AFA  D001               	goto	l271
  3042  001AFC  D00F               	goto	u2880
  3043  001AFE                     l271:
  3044                           
  3045                           ;volume.c: 69: LATEbits.LE0 = 0;
  3046  001AFE  908D               	bcf	3981,0,c	;volatile
  3047                           
  3048                           ;volume.c: 72: if (vol_left & vbitsel) {
  3049  001B00  5014               	movf	set_volume@vol_left,w,c
  3050  001B02  1417               	andwf	set_volume@vbitsel,w,c
  3051  001B04  0900               	iorlw	0
  3052  001B06  B4D8               	btfsc	status,2,c
  3053  001B08  D002               	goto	l273
  3054                           
  3055                           ;volume.c: 73: LATEbits.LE1 = 1;
  3056  001B0A  828D               	bsf	3981,1,c	;volatile
  3057                           
  3058                           ;volume.c: 74: } else {
  3059  001B0C  D001               	goto	l274
  3060  001B0E                     l273:
  3061                           
  3062                           ;volume.c: 75: LATEbits.LE1 = 0;
  3063  001B0E  928D               	bcf	3981,1,c	;volatile
  3064  001B10                     l274:
  3065                           
  3066                           ;volume.c: 76: }
  3067                           ;volume.c: 79: LATEbits.LE0 = 1;
  3068  001B10  808D               	bsf	3981,0,c	;volatile
  3069                           
  3070                           ;volume.c: 82: vbitsel = vbitsel >> 1;
  3071  001B12  90D8               	bcf	status,0,c
  3072  001B14  3017               	rrcf	set_volume@vbitsel,w,c
  3073  001B16  6E17               	movwf	set_volume@vbitsel,c
  3074  001B18  2A15               	incf	set_volume@i,f,c
  3075  001B1A  D7ED               	goto	l3958
  3076  001B1C                     u2880:
  3077                           
  3078                           ;volume.c: 83: }
  3079                           ;volume.c: 84: vbitsel = 0x80;
  3080  001B1C  0E80               	movlw	128
  3081  001B1E  6E17               	movwf	set_volume@vbitsel,c
  3082                           
  3083                           ;volume.c: 85: for (char i = 0; i< 8; i++) {
  3084  001B20  0E00               	movlw	0
  3085  001B22  6E16               	movwf	set_volume@i_650,c
  3086  001B24  D00E               	goto	l3986
  3087  001B26                     l275:
  3088                           
  3089                           ;volume.c: 87: LATEbits.LE0 = 0;
  3090  001B26  908D               	bcf	3981,0,c	;volatile
  3091                           
  3092                           ;volume.c: 90: if (vol_right & vbitsel) {
  3093  001B28  5013               	movf	set_volume@vol_right,w,c
  3094  001B2A  1417               	andwf	set_volume@vbitsel,w,c
  3095  001B2C  0900               	iorlw	0
  3096  001B2E  B4D8               	btfsc	status,2,c
  3097  001B30  D002               	goto	l277
  3098                           
  3099                           ;volume.c: 91: LATEbits.LE1 = 1;
  3100  001B32  828D               	bsf	3981,1,c	;volatile
  3101                           
  3102                           ;volume.c: 92: } else {
  3103  001B34  D001               	goto	l278
  3104  001B36                     l277:
  3105                           
  3106                           ;volume.c: 93: LATEbits.LE1 = 0;
  3107  001B36  928D               	bcf	3981,1,c	;volatile
  3108  001B38                     l278:
  3109                           
  3110                           ;volume.c: 94: }
  3111                           ;volume.c: 97: LATEbits.LE0 = 1;
  3112  001B38  808D               	bsf	3981,0,c	;volatile
  3113                           
  3114                           ;volume.c: 100: vbitsel = vbitsel >> 1;
  3115  001B3A  90D8               	bcf	status,0,c
  3116  001B3C  3017               	rrcf	set_volume@vbitsel,w,c
  3117  001B3E  6E17               	movwf	set_volume@vbitsel,c
  3118  001B40  2A16               	incf	set_volume@i_650,f,c
  3119  001B42                     l3986:
  3120  001B42  0E07               	movlw	7
  3121  001B44  6416               	cpfsgt	set_volume@i_650,c
  3122  001B46  D7EF               	goto	l275
  3123                           
  3124                           ;volume.c: 101: }
  3125                           ;volume.c: 104: LATEbits.LE2 = 1;
  3126  001B48  848D               	bsf	3981,2,c	;volatile
  3127  001B4A  0012               	return		;funcret
  3128  001B4C                     __end_of_set_volume:
  3129                           	opt stack 0
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1l	equ	0xFE1
  3141                           indf2	equ	0xFDF
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           
  3146 ;; *************** function _set_mute_led *****************
  3147 ;; Defined at:
  3148 ;;		line 70 in file "switches.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		None
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3162 ;;      Params:         0       0       0       0       0       0       0       0       0
  3163 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3165 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3166 ;;Total ram usage:        0 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    1
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_toggle_mute
  3173 ;;		_startup_sequence
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           	psect	text7
  3178  00205C                     __ptext7:
  3179                           	opt stack 0
  3180  00205C                     _set_mute_led:
  3181                           	opt stack 28
  3182                           
  3183                           ;switches.c: 71: LATAbits.LATA1 = 1;
  3184                           
  3185                           ;incstack = 0
  3186  00205C  8289               	bsf	3977,1,c	;volatile
  3187  00205E  0012               	return		;funcret
  3188  002060                     __end_of_set_mute_led:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _clear_mute_led *****************
  3207 ;; Defined at:
  3208 ;;		line 74 in file "switches.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      void 
  3215 ;; Registers used:
  3216 ;;		None
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3222 ;;      Params:         0       0       0       0       0       0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3225 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3226 ;;Total ram usage:        0 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    1
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;;		_toggle_mute
  3234 ;;		_startup_sequence
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text8
  3239  002060                     __ptext8:
  3240                           	opt stack 0
  3241  002060                     _clear_mute_led:
  3242                           	opt stack 28
  3243                           
  3244                           ;switches.c: 75: LATAbits.LATA1 = 0;
  3245                           
  3246                           ;incstack = 0
  3247  002060  9289               	bcf	3977,1,c	;volatile
  3248  002062  0012               	return		;funcret
  3249  002064                     __end_of_clear_mute_led:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postdec1	equ	0xFE5
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _set_standby_led *****************
  3268 ;; Defined at:
  3269 ;;		line 62 in file "switches.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		None
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3283 ;;      Params:         0       0       0       0       0       0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3286 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3287 ;;Total ram usage:        0 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    1
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_main
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text9
  3298  002064                     __ptext9:
  3299                           	opt stack 0
  3300  002064                     _set_standby_led:
  3301                           	opt stack 29
  3302                           
  3303                           ;switches.c: 63: LATAbits.LATA5 = 1;
  3304                           
  3305                           ;incstack = 0
  3306  002064  8A89               	bsf	3977,5,c	;volatile
  3307  002066  0012               	return		;funcret
  3308  002068                     __end_of_set_standby_led:
  3309                           	opt stack 0
  3310                           tblptru	equ	0xFF8
  3311                           tblptrh	equ	0xFF7
  3312                           tblptrl	equ	0xFF6
  3313                           tablat	equ	0xFF5
  3314                           prodh	equ	0xFF4
  3315                           prodl	equ	0xFF3
  3316                           intcon	equ	0xFF2
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1l	equ	0xFE1
  3321                           indf2	equ	0xFDF
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function _set_led_and_source *****************
  3327 ;; Defined at:
  3328 ;;		line 204 in file "switches.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  s               1    wreg     unsigned char 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  s               1   21[COMRAM] unsigned char 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3342 ;;      Params:         0       0       0       0       0       0       0       0       0
  3343 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3344 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3345 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3346 ;;Total ram usage:        4 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    1
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_main
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text10
  3357  001A1E                     __ptext10:
  3358                           	opt stack 0
  3359  001A1E                     _set_led_and_source:
  3360                           	opt stack 29
  3361                           
  3362                           ;incstack = 0
  3363                           ;set_led_and_source@s stored from wreg
  3364  001A1E  6E16               	movwf	set_led_and_source@s,c
  3365                           
  3366                           ;switches.c: 205: led = 0;
  3367  001A20  0E00               	movlw	0
  3368  001A22  0100               	movlb	0	; () banked
  3369  001A24  6F7B               	movwf	(_led+1)& (0+255),b
  3370  001A26  0E00               	movlw	0
  3371  001A28  6F7A               	movwf	_led& (0+255),b
  3372                           
  3373                           ;switches.c: 206: relay_source=0;
  3374  001A2A  0E00               	movlw	0
  3375  001A2C  6F7D               	movwf	(_relay_source+1)& (0+255),b
  3376  001A2E  0E00               	movlw	0
  3377  001A30  6F7C               	movwf	_relay_source& (0+255),b
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;switches.c: 207: (led|=(1<<s+1));
  3381  001A32  C016  F013         	movff	set_led_and_source@s,??_set_led_and_source
  3382  001A36  0E01               	movlw	1
  3383  001A38  2613               	addwf	??_set_led_and_source,f,c
  3384  001A3A  0E01               	movlw	1
  3385  001A3C  6E14               	movwf	(??_set_led_and_source+1)& (0+255),c
  3386  001A3E  0E00               	movlw	0
  3387  001A40  6E15               	movwf	(??_set_led_and_source+2)& (0+255),c
  3388  001A42  2A13               	incf	??_set_led_and_source,f,c
  3389  001A44  D003               	goto	u3324
  3390  001A46                     u3325:
  3391  001A46  90D8               	bcf	status,0,c
  3392  001A48  3614               	rlcf	??_set_led_and_source+1,f,c
  3393  001A4A  3615               	rlcf	??_set_led_and_source+2,f,c
  3394  001A4C                     u3324:
  3395  001A4C  2E13               	decfsz	??_set_led_and_source,f,c
  3396  001A4E  D7FB               	goto	u3325
  3397  001A50  5014               	movf	??_set_led_and_source+1,w,c
  3398  001A52  0100               	movlb	0	; () banked
  3399  001A54  137A               	iorwf	_led& (0+255),f,b
  3400  001A56  5015               	movf	??_set_led_and_source+2,w,c
  3401  001A58  137B               	iorwf	(_led+1)& (0+255),f,b
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;switches.c: 208: (relay_source|=(1<<s+2));
  3405  001A5A  C016  F013         	movff	set_led_and_source@s,??_set_led_and_source
  3406  001A5E  0E02               	movlw	2
  3407  001A60  2613               	addwf	??_set_led_and_source,f,c
  3408  001A62  0E01               	movlw	1
  3409  001A64  6E14               	movwf	(??_set_led_and_source+1)& (0+255),c
  3410  001A66  0E00               	movlw	0
  3411  001A68  6E15               	movwf	(??_set_led_and_source+2)& (0+255),c
  3412  001A6A  2A13               	incf	??_set_led_and_source,f,c
  3413  001A6C  D003               	goto	u3334
  3414  001A6E                     u3335:
  3415  001A6E  90D8               	bcf	status,0,c
  3416  001A70  3614               	rlcf	??_set_led_and_source+1,f,c
  3417  001A72  3615               	rlcf	??_set_led_and_source+2,f,c
  3418  001A74                     u3334:
  3419  001A74  2E13               	decfsz	??_set_led_and_source,f,c
  3420  001A76  D7FB               	goto	u3335
  3421  001A78  5014               	movf	??_set_led_and_source+1,w,c
  3422  001A7A  0100               	movlb	0	; () banked
  3423  001A7C  137C               	iorwf	_relay_source& (0+255),f,b
  3424  001A7E  5015               	movf	??_set_led_and_source+2,w,c
  3425  001A80  137D               	iorwf	(_relay_source+1)& (0+255),f,b
  3426                           
  3427                           ; BSR set to: 0
  3428  001A82  0012               	return		;funcret
  3429  001A84                     __end_of_set_led_and_source:
  3430                           	opt stack 0
  3431                           tblptru	equ	0xFF8
  3432                           tblptrh	equ	0xFF7
  3433                           tblptrl	equ	0xFF6
  3434                           tablat	equ	0xFF5
  3435                           prodh	equ	0xFF4
  3436                           prodl	equ	0xFF3
  3437                           intcon	equ	0xFF2
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _read_switches_synchronous *****************
  3448 ;; Defined at:
  3449 ;;		line 162 in file "switches.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  s               1   22[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      unsigned char 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3463 ;;      Params:         0       0       0       0       0       0       0       0       0
  3464 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3466 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3467 ;;Total ram usage:        1 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    2
  3470 ;; This function calls:
  3471 ;;		_read_switches
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text11
  3478  001F12                     __ptext11:
  3479                           	opt stack 0
  3480  001F12                     _read_switches_synchronous:
  3481                           	opt stack 28
  3482                           
  3483                           ;switches.c: 163: char s;
  3484                           ;switches.c: 165: s = read_switches();
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;incstack = 0
  3488  001F12  EC48  F00A         	call	_read_switches	;wreg free
  3489  001F16  6E17               	movwf	read_switches_synchronous@s,c
  3490                           
  3491                           ;switches.c: 167: if (s == 0)
  3492  001F18  5017               	movf	read_switches_synchronous@s,w,c
  3493  001F1A  A4D8               	btfss	status,2,c
  3494  001F1C  D007               	goto	l418
  3495                           
  3496                           ;switches.c: 168: return 0;
  3497  001F1E  0E00               	movlw	0
  3498  001F20  0012               	return	
  3499  001F22                     
  3500                           ;switches.c: 171: _delay((unsigned long)((100)*(20000000/4000000.0)));
  3501  001F22  0EA6               	movlw	166
  3502  001F24                     u3707:
  3503  001F24  2EE8               	decfsz	wreg,f,c
  3504  001F26  D7FE               	bra	u3707
  3505  001F28  F000 F000          	nop2	
  3506  001F2C                     l418:
  3507  001F2C  EC48  F00A         	call	_read_switches	;wreg free
  3508  001F30  0900               	iorlw	0
  3509  001F32  A4D8               	btfss	status,2,c
  3510  001F34  D7F6               	goto	l419
  3511                           
  3512                           ;switches.c: 172: }
  3513                           ;switches.c: 173: return s;
  3514  001F36  5017               	movf	read_switches_synchronous@s,w,c
  3515  001F38  0012               	return	
  3516  001F3A                     __end_of_read_switches_synchronous:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _read_switches *****************
  3535 ;; Defined at:
  3536 ;;		line 102 in file "switches.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  a2dval          2   20[COMRAM] int 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3550 ;;      Params:         0       0       0       0       0       0       0       0       0
  3551 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3552 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3553 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3554 ;;Total ram usage:        4 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_main
  3561 ;;		_read_switches_synchronous
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text12
  3566  001490                     __ptext12:
  3567                           	opt stack 0
  3568  001490                     _read_switches:
  3569                           	opt stack 28
  3570                           
  3571                           ;switches.c: 104: int a2dval;
  3572                           ;switches.c: 120: ADCON0bits.GO_DONE = 1;
  3573                           
  3574                           ;incstack = 0
  3575  001490  82C2               	bsf	4034,1,c	;volatile
  3576                           
  3577                           ;switches.c: 124: while (ADCON0bits.GO_DONE) {
  3578  001492  D001               	goto	l389
  3579  001494                     l390:
  3580  001494  F000               	nop		;# 
  3581  001496                     l389:
  3582  001496  B2C2               	btfsc	4034,1,c	;volatile
  3583  001498  D7FD               	goto	l390
  3584                           
  3585                           ;switches.c: 126: }
  3586                           ;switches.c: 127: a2dval = ((ADRESH << 8)+ADRESL);
  3587  00149A  50C4               	movf	4036,w,c	;volatile
  3588  00149C  6E14               	movwf	(??_read_switches+1)& (0+255),c
  3589  00149E  6A13               	clrf	??_read_switches& (0+255),c
  3590  0014A0  50C3               	movf	4035,w,c	;volatile
  3591  0014A2  2413               	addwf	??_read_switches,w,c
  3592  0014A4  6E15               	movwf	read_switches@a2dval,c
  3593  0014A6  0E00               	movlw	0
  3594  0014A8  2014               	addwfc	??_read_switches+1,w,c
  3595  0014AA  6E16               	movwf	read_switches@a2dval+1,c
  3596                           
  3597                           ;switches.c: 129: if (a2dval < 89) {
  3598  0014AC  BE16               	btfsc	read_switches@a2dval+1,7,c
  3599  0014AE  D006               	goto	u2750
  3600  0014B0  5016               	movf	read_switches@a2dval+1,w,c
  3601  0014B2  E106               	bnz	l3872
  3602  0014B4  0E59               	movlw	89
  3603  0014B6  5C15               	subwf	read_switches@a2dval,w,c
  3604  0014B8  B0D8               	btfsc	status,0,c
  3605  0014BA  D002               	goto	l392
  3606  0014BC                     u2750:
  3607                           
  3608                           ;switches.c: 130: return 1;
  3609  0014BC  0E01               	movlw	1
  3610  0014BE  0012               	return	
  3611  0014C0                     l392:
  3612  0014C0                     l3872:
  3613  0014C0  BE16               	btfsc	read_switches@a2dval+1,7,c
  3614  0014C2  D006               	goto	u2760
  3615  0014C4  5016               	movf	read_switches@a2dval+1,w,c
  3616  0014C6  E106               	bnz	l3880
  3617  0014C8  0E9A               	movlw	154
  3618  0014CA  5C15               	subwf	read_switches@a2dval,w,c
  3619  0014CC  B0D8               	btfsc	status,0,c
  3620  0014CE  D002               	goto	l395
  3621  0014D0                     u2760:
  3622                           
  3623                           ;switches.c: 132: return 2;
  3624  0014D0  0E02               	movlw	2
  3625  0014D2  0012               	return	
  3626  0014D4                     l395:
  3627  0014D4                     l3880:
  3628  0014D4  BE16               	btfsc	read_switches@a2dval+1,7,c
  3629  0014D6  D006               	goto	u2770
  3630  0014D8  5016               	movf	read_switches@a2dval+1,w,c
  3631  0014DA  E106               	bnz	l3888
  3632  0014DC  0EDE               	movlw	222
  3633  0014DE  5C15               	subwf	read_switches@a2dval,w,c
  3634  0014E0  B0D8               	btfsc	status,0,c
  3635  0014E2  D002               	goto	l397
  3636  0014E4                     u2770:
  3637                           
  3638                           ;switches.c: 134: return 3;
  3639  0014E4  0E03               	movlw	3
  3640  0014E6  0012               	return	
  3641  0014E8                     l397:
  3642  0014E8                     l3888:
  3643  0014E8  BE16               	btfsc	read_switches@a2dval+1,7,c
  3644  0014EA  D006               	goto	u2780
  3645  0014EC  0E1E               	movlw	30
  3646  0014EE  5C15               	subwf	read_switches@a2dval,w,c
  3647  0014F0  0E01               	movlw	1
  3648  0014F2  5816               	subwfb	read_switches@a2dval+1,w,c
  3649  0014F4  B0D8               	btfsc	status,0,c
  3650  0014F6  D002               	goto	l399
  3651  0014F8                     u2780:
  3652                           
  3653                           ;switches.c: 136: return 4;
  3654  0014F8  0E04               	movlw	4
  3655  0014FA  0012               	return	
  3656  0014FC                     l399:
  3657  0014FC  BE16               	btfsc	read_switches@a2dval+1,7,c
  3658  0014FE  D006               	goto	u2790
  3659  001500  0E59               	movlw	89
  3660  001502  5C15               	subwf	read_switches@a2dval,w,c
  3661  001504  0E01               	movlw	1
  3662  001506  5816               	subwfb	read_switches@a2dval+1,w,c
  3663  001508  B0D8               	btfsc	status,0,c
  3664  00150A  D002               	goto	l401
  3665  00150C                     u2790:
  3666                           
  3667                           ;switches.c: 138: return 5;
  3668  00150C  0E05               	movlw	5
  3669  00150E  0012               	return	
  3670  001510                     l401:
  3671  001510  BE16               	btfsc	read_switches@a2dval+1,7,c
  3672  001512  D006               	goto	u2800
  3673  001514  0E96               	movlw	150
  3674  001516  5C15               	subwf	read_switches@a2dval,w,c
  3675  001518  0E01               	movlw	1
  3676  00151A  5816               	subwfb	read_switches@a2dval+1,w,c
  3677  00151C  B0D8               	btfsc	status,0,c
  3678  00151E  D002               	goto	l403
  3679  001520                     u2800:
  3680                           
  3681                           ;switches.c: 140: return 6;
  3682  001520  0E06               	movlw	6
  3683  001522  0012               	return	
  3684  001524                     l403:
  3685  001524  BE16               	btfsc	read_switches@a2dval+1,7,c
  3686  001526  D006               	goto	u2810
  3687  001528  0ED3               	movlw	211
  3688  00152A  5C15               	subwf	read_switches@a2dval,w,c
  3689  00152C  0E01               	movlw	1
  3690  00152E  5816               	subwfb	read_switches@a2dval+1,w,c
  3691  001530  B0D8               	btfsc	status,0,c
  3692  001532  D002               	goto	l405
  3693  001534                     u2810:
  3694                           
  3695                           ;switches.c: 142: return 7;
  3696  001534  0E07               	movlw	7
  3697  001536  0012               	return	
  3698  001538                     l405:
  3699  001538  BE16               	btfsc	read_switches@a2dval+1,7,c
  3700  00153A  D006               	goto	u2820
  3701  00153C  0E0D               	movlw	13
  3702  00153E  5C15               	subwf	read_switches@a2dval,w,c
  3703  001540  0E02               	movlw	2
  3704  001542  5816               	subwfb	read_switches@a2dval+1,w,c
  3705  001544  B0D8               	btfsc	status,0,c
  3706  001546  D002               	goto	l407
  3707  001548                     u2820:
  3708                           
  3709                           ;switches.c: 144: return 8;
  3710  001548  0E08               	movlw	8
  3711  00154A  0012               	return	
  3712  00154C                     l407:
  3713  00154C  BE16               	btfsc	read_switches@a2dval+1,7,c
  3714  00154E  D006               	goto	u2830
  3715  001550  0E49               	movlw	73
  3716  001552  5C15               	subwf	read_switches@a2dval,w,c
  3717  001554  0E02               	movlw	2
  3718  001556  5816               	subwfb	read_switches@a2dval+1,w,c
  3719  001558  B0D8               	btfsc	status,0,c
  3720  00155A  D002               	goto	l409
  3721  00155C                     u2830:
  3722                           
  3723                           ;switches.c: 146: return 9;
  3724  00155C  0E09               	movlw	9
  3725  00155E  0012               	return	
  3726  001560                     l409:
  3727  001560  BE16               	btfsc	read_switches@a2dval+1,7,c
  3728  001562  D006               	goto	u2840
  3729  001564  0E85               	movlw	133
  3730  001566  5C15               	subwf	read_switches@a2dval,w,c
  3731  001568  0E02               	movlw	2
  3732  00156A  5816               	subwfb	read_switches@a2dval+1,w,c
  3733  00156C  B0D8               	btfsc	status,0,c
  3734  00156E  D002               	goto	l411
  3735  001570                     u2840:
  3736                           
  3737                           ;switches.c: 148: return 10;
  3738  001570  0E0A               	movlw	10
  3739  001572  0012               	return	
  3740  001574                     l411:
  3741  001574  BE16               	btfsc	read_switches@a2dval+1,7,c
  3742  001576  D006               	goto	u2850
  3743  001578  0EC0               	movlw	192
  3744  00157A  5C15               	subwf	read_switches@a2dval,w,c
  3745  00157C  0E02               	movlw	2
  3746  00157E  5816               	subwfb	read_switches@a2dval+1,w,c
  3747  001580  B0D8               	btfsc	status,0,c
  3748  001582  D002               	goto	l413
  3749  001584                     u2850:
  3750                           
  3751                           ;switches.c: 150: return 11;
  3752  001584  0E0B               	movlw	11
  3753  001586  0012               	return	
  3754  001588                     l413:
  3755                           
  3756                           ;switches.c: 151: }
  3757                           ;switches.c: 152: return 0;
  3758  001588  0E00               	movlw	0
  3759  00158A  0012               	return	
  3760  00158C                     __end_of_read_switches:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postdec1	equ	0xFE5
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _init_volume *****************
  3779 ;; Defined at:
  3780 ;;		line 29 in file "volume.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    1
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text13
  3809  001EE6                     __ptext13:
  3810                           	opt stack 0
  3811  001EE6                     _init_volume:
  3812                           	opt stack 29
  3813                           
  3814                           ;volume.c: 32: PORTEbits.RE0 = 0;
  3815                           
  3816                           ;incstack = 0
  3817  001EE6  9084               	bcf	3972,0,c	;volatile
  3818                           
  3819                           ;volume.c: 33: PORTEbits.RE1 = 0;
  3820  001EE8  9284               	bcf	3972,1,c	;volatile
  3821                           
  3822                           ;volume.c: 34: PORTEbits.RE2 = 0;
  3823  001EEA  9484               	bcf	3972,2,c	;volatile
  3824                           
  3825                           ;volume.c: 37: LATEbits.LE0 = 0;
  3826  001EEC  908D               	bcf	3981,0,c	;volatile
  3827                           
  3828                           ;volume.c: 38: LATEbits.LE1 = 0;
  3829  001EEE  928D               	bcf	3981,1,c	;volatile
  3830                           
  3831                           ;volume.c: 39: LATEbits.LE2 = 0;
  3832  001EF0  948D               	bcf	3981,2,c	;volatile
  3833                           
  3834                           ;volume.c: 42: ADCON1 = 0x0E;
  3835  001EF2  0E0E               	movlw	14
  3836  001EF4  6EC1               	movwf	4033,c	;volatile
  3837                           
  3838                           ;volume.c: 43: ADCON0 = 0x01;
  3839  001EF6  0E01               	movlw	1
  3840  001EF8  6EC2               	movwf	4034,c	;volatile
  3841                           
  3842                           ;volume.c: 44: ADCON2 = 0xA5;
  3843  001EFA  0EA5               	movlw	165
  3844  001EFC  6EC0               	movwf	4032,c	;volatile
  3845                           
  3846                           ;volume.c: 47: CMCON = 0x07;
  3847  001EFE  0E07               	movlw	7
  3848  001F00  6EB4               	movwf	4020,c	;volatile
  3849                           
  3850                           ;volume.c: 50: TRISE = 0x00;
  3851  001F02  0E00               	movlw	0
  3852  001F04  6E96               	movwf	3990,c	;volatile
  3853                           
  3854                           ;volume.c: 52: TRISBbits.RB3 = 1;
  3855  001F06  8693               	bsf	3987,3,c	;volatile
  3856                           
  3857                           ;volume.c: 53: TRISBbits.RB4 = 1;
  3858  001F08  8893               	bsf	3987,4,c	;volatile
  3859                           
  3860                           ;volume.c: 55: INTCON2bits.RBIP = 1;
  3861  001F0A  80F1               	bsf	intcon2,0,c	;volatile
  3862                           
  3863                           ;volume.c: 56: INTCONbits.RBIF = 0;
  3864  001F0C  90F2               	bcf	intcon,0,c	;volatile
  3865                           
  3866                           ;volume.c: 57: INTCONbits.RBIE = 1;
  3867  001F0E  86F2               	bsf	intcon,3,c	;volatile
  3868  001F10  0012               	return		;funcret
  3869  001F12                     __end_of_init_volume:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           intcon	equ	0xFF2
  3878                           intcon2	equ	0xFF1
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           postdec1	equ	0xFE5
  3882                           fsr1l	equ	0xFE1
  3883                           indf2	equ	0xFDF
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _init_timer *****************
  3889 ;; Defined at:
  3890 ;;		line 101 in file "newmain.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		None
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    1
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text14
  3919  001FF2                     __ptext14:
  3920                           	opt stack 0
  3921  001FF2                     _init_timer:
  3922                           	opt stack 29
  3923                           
  3924                           ;newmain.c: 103: T0CONbits.T08BIT = 0;
  3925                           
  3926                           ;incstack = 0
  3927  001FF2  9CD5               	bcf	4053,6,c	;volatile
  3928                           
  3929                           ;newmain.c: 106: T0CONbits.T0CS = 0;
  3930  001FF4  9AD5               	bcf	4053,5,c	;volatile
  3931                           
  3932                           ;newmain.c: 109: T0CONbits.PSA = 0;
  3933  001FF6  96D5               	bcf	4053,3,c	;volatile
  3934                           
  3935                           ;newmain.c: 112: T0CONbits.T0PS2 = 1;
  3936  001FF8  84D5               	bsf	4053,2,c	;volatile
  3937                           
  3938                           ;newmain.c: 113: T0CONbits.T0PS1 = 0;
  3939  001FFA  92D5               	bcf	4053,1,c	;volatile
  3940                           
  3941                           ;newmain.c: 114: T0CONbits.T0PS0 = 0;
  3942  001FFC  90D5               	bcf	4053,0,c	;volatile
  3943                           
  3944                           ;newmain.c: 117: T0CONbits.TMR0ON = 1;
  3945  001FFE  8ED5               	bsf	4053,7,c	;volatile
  3946                           
  3947                           ;newmain.c: 120: INTCONbits.TMR0IE = 1;
  3948  002000  8AF2               	bsf	intcon,5,c	;volatile
  3949  002002  0012               	return		;funcret
  3950  002004                     __end_of_init_timer:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           wreg	equ	0xFE8
  3962                           postdec1	equ	0xFE5
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           fsr2h	equ	0xFDA
  3966                           fsr2l	equ	0xFD9
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _init_switches *****************
  3970 ;; Defined at:
  3971 ;;		line 48 in file "switches.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		None
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3988 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    1
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text15
  4000  002028                     __ptext15:
  4001                           	opt stack 0
  4002  002028                     _init_switches:
  4003                           	opt stack 29
  4004                           
  4005                           ;switches.c: 51: TRISAbits.RA1 = 0;
  4006                           
  4007                           ;incstack = 0
  4008  002028  9292               	bcf	3986,1,c	;volatile
  4009                           
  4010                           ;switches.c: 52: TRISAbits.RA2 = 0;
  4011  00202A  9492               	bcf	3986,2,c	;volatile
  4012                           
  4013                           ;switches.c: 53: TRISAbits.RA3 = 0;
  4014  00202C  9692               	bcf	3986,3,c	;volatile
  4015                           
  4016                           ;switches.c: 54: TRISAbits.RA5 = 0;
  4017  00202E  9A92               	bcf	3986,5,c	;volatile
  4018                           
  4019                           ;switches.c: 57: LATAbits.LATA1 = 1;
  4020  002030  8289               	bsf	3977,1,c	;volatile
  4021                           
  4022                           ;switches.c: 58: LATAbits.LATA2 = 1;
  4023  002032  8489               	bsf	3977,2,c	;volatile
  4024                           
  4025                           ;switches.c: 59: LATAbits.LATA3 = 1;
  4026  002034  8689               	bsf	3977,3,c	;volatile
  4027  002036  0012               	return		;funcret
  4028  002038                     __end_of_init_switches:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           postdec1	equ	0xFE5
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           fsr2h	equ	0xFDA
  4044                           fsr2l	equ	0xFD9
  4045                           status	equ	0xFD8
  4046                           
  4047 ;; *************** function _init_shiftreg *****************
  4048 ;; Defined at:
  4049 ;;		line 27 in file "switches.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;		None
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;		None
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg, status,2
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4063 ;;      Params:         0       0       0       0       0       0       0       0       0
  4064 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4066 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4067 ;;Total ram usage:        0 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    1
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_main
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text16
  4078  001F5E                     __ptext16:
  4079                           	opt stack 0
  4080  001F5E                     _init_shiftreg:
  4081                           	opt stack 29
  4082                           
  4083                           ;switches.c: 30: UCONbits.USBEN = 0;
  4084                           
  4085                           ;incstack = 0
  4086  001F5E  966D               	bcf	3949,3,c	;volatile
  4087                           
  4088                           ;switches.c: 31: UCFGbits.UTRDIS = 1;
  4089  001F60  866F               	bsf	3951,3,c	;volatile
  4090                           
  4091                           ;switches.c: 34: T1CONbits.TMR1ON = 0;
  4092  001F62  90CD               	bcf	4045,0,c	;volatile
  4093                           
  4094                           ;switches.c: 35: T3CONbits.TMR3ON = 0;
  4095  001F64  90B1               	bcf	4017,0,c	;volatile
  4096                           
  4097                           ;switches.c: 38: CCP1CON = 0x00;
  4098  001F66  0E00               	movlw	0
  4099  001F68  6EBD               	movwf	4029,c	;volatile
  4100                           
  4101                           ;switches.c: 39: CCP2CON = 0x00;
  4102  001F6A  0E00               	movlw	0
  4103  001F6C  6EBA               	movwf	4026,c	;volatile
  4104                           
  4105                           ;switches.c: 42: PORTC = 0x00;
  4106  001F6E  0E00               	movlw	0
  4107  001F70  6E82               	movwf	3970,c	;volatile
  4108                           
  4109                           ;switches.c: 43: LATC = 0x00;
  4110  001F72  0E00               	movlw	0
  4111  001F74  6E8B               	movwf	3979,c	;volatile
  4112                           
  4113                           ;switches.c: 44: TRISC = 0x00;
  4114  001F76  0E00               	movlw	0
  4115  001F78  6E94               	movwf	3988,c	;volatile
  4116  001F7A  0012               	return		;funcret
  4117  001F7C                     __end_of_init_shiftreg:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           intcon2	equ	0xFF1
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           postdec1	equ	0xFE5
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _init_lcd_chars *****************
  4137 ;; Defined at:
  4138 ;;		line 183 in file "newmain.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, status,2, status,0, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4155 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    5
  4159 ;; This function calls:
  4160 ;;		_LCD_code
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text17
  4167  001094                     __ptext17:
  4168                           	opt stack 0
  4169  001094                     _init_lcd_chars:
  4170                           	opt stack 25
  4171                           
  4172                           ;newmain.c: 185: LCD_code(0b0001000000);
  4173                           
  4174                           ;incstack = 0
  4175  001094  0E00               	movlw	0
  4176  001096  6E1B               	movwf	LCD_code@code+1,c
  4177  001098  0E40               	movlw	64
  4178  00109A  6E1A               	movwf	LCD_code@code,c
  4179  00109C  ECD7  F00D         	call	_LCD_code	;wreg free
  4180                           
  4181                           ;newmain.c: 186: LCD_code(0b1000000010);
  4182  0010A0  0E02               	movlw	2
  4183  0010A2  6E1B               	movwf	LCD_code@code+1,c
  4184  0010A4  0E02               	movlw	2
  4185  0010A6  6E1A               	movwf	LCD_code@code,c
  4186  0010A8  ECD7  F00D         	call	_LCD_code	;wreg free
  4187                           
  4188                           ;newmain.c: 188: LCD_code(0b0001000001);
  4189  0010AC  0E00               	movlw	0
  4190  0010AE  6E1B               	movwf	LCD_code@code+1,c
  4191  0010B0  0E41               	movlw	65
  4192  0010B2  6E1A               	movwf	LCD_code@code,c
  4193  0010B4  ECD7  F00D         	call	_LCD_code	;wreg free
  4194                           
  4195                           ;newmain.c: 189: LCD_code(0b1000000110);
  4196  0010B8  0E02               	movlw	2
  4197  0010BA  6E1B               	movwf	LCD_code@code+1,c
  4198  0010BC  0E06               	movlw	6
  4199  0010BE  6E1A               	movwf	LCD_code@code,c
  4200  0010C0  ECD7  F00D         	call	_LCD_code	;wreg free
  4201                           
  4202                           ;newmain.c: 191: LCD_code(0b0001000010);
  4203  0010C4  0E00               	movlw	0
  4204  0010C6  6E1B               	movwf	LCD_code@code+1,c
  4205  0010C8  0E42               	movlw	66
  4206  0010CA  6E1A               	movwf	LCD_code@code,c
  4207  0010CC  ECD7  F00D         	call	_LCD_code	;wreg free
  4208                           
  4209                           ;newmain.c: 192: LCD_code(0b1000001110);
  4210  0010D0  0E02               	movlw	2
  4211  0010D2  6E1B               	movwf	LCD_code@code+1,c
  4212  0010D4  0E0E               	movlw	14
  4213  0010D6  6E1A               	movwf	LCD_code@code,c
  4214  0010D8  ECD7  F00D         	call	_LCD_code	;wreg free
  4215                           
  4216                           ;newmain.c: 194: LCD_code(0b0001000011);
  4217  0010DC  0E00               	movlw	0
  4218  0010DE  6E1B               	movwf	LCD_code@code+1,c
  4219  0010E0  0E43               	movlw	67
  4220  0010E2  6E1A               	movwf	LCD_code@code,c
  4221  0010E4  ECD7  F00D         	call	_LCD_code	;wreg free
  4222                           
  4223                           ;newmain.c: 195: LCD_code(0b1000011110);
  4224  0010E8  0E02               	movlw	2
  4225  0010EA  6E1B               	movwf	LCD_code@code+1,c
  4226  0010EC  0E1E               	movlw	30
  4227  0010EE  6E1A               	movwf	LCD_code@code,c
  4228  0010F0  ECD7  F00D         	call	_LCD_code	;wreg free
  4229                           
  4230                           ;newmain.c: 197: LCD_code(0b0001000100);
  4231  0010F4  0E00               	movlw	0
  4232  0010F6  6E1B               	movwf	LCD_code@code+1,c
  4233  0010F8  0E44               	movlw	68
  4234  0010FA  6E1A               	movwf	LCD_code@code,c
  4235  0010FC  ECD7  F00D         	call	_LCD_code	;wreg free
  4236                           
  4237                           ;newmain.c: 198: LCD_code(0b1000001110);
  4238  001100  0E02               	movlw	2
  4239  001102  6E1B               	movwf	LCD_code@code+1,c
  4240  001104  0E0E               	movlw	14
  4241  001106  6E1A               	movwf	LCD_code@code,c
  4242  001108  ECD7  F00D         	call	_LCD_code	;wreg free
  4243                           
  4244                           ;newmain.c: 200: LCD_code(0b0001000101);
  4245  00110C  0E00               	movlw	0
  4246  00110E  6E1B               	movwf	LCD_code@code+1,c
  4247  001110  0E45               	movlw	69
  4248  001112  6E1A               	movwf	LCD_code@code,c
  4249  001114  ECD7  F00D         	call	_LCD_code	;wreg free
  4250                           
  4251                           ;newmain.c: 201: LCD_code(0b1000000110);
  4252  001118  0E02               	movlw	2
  4253  00111A  6E1B               	movwf	LCD_code@code+1,c
  4254  00111C  0E06               	movlw	6
  4255  00111E  6E1A               	movwf	LCD_code@code,c
  4256  001120  ECD7  F00D         	call	_LCD_code	;wreg free
  4257                           
  4258                           ;newmain.c: 203: LCD_code(0b0001000110);
  4259  001124  0E00               	movlw	0
  4260  001126  6E1B               	movwf	LCD_code@code+1,c
  4261  001128  0E46               	movlw	70
  4262  00112A  6E1A               	movwf	LCD_code@code,c
  4263  00112C  ECD7  F00D         	call	_LCD_code	;wreg free
  4264                           
  4265                           ;newmain.c: 204: LCD_code(0b1000000010);
  4266  001130  0E02               	movlw	2
  4267  001132  6E1B               	movwf	LCD_code@code+1,c
  4268  001134  0E02               	movlw	2
  4269  001136  6E1A               	movwf	LCD_code@code,c
  4270  001138  ECD7  F00D         	call	_LCD_code	;wreg free
  4271                           
  4272                           ;newmain.c: 206: LCD_code(0b0001000111);
  4273  00113C  0E00               	movlw	0
  4274  00113E  6E1B               	movwf	LCD_code@code+1,c
  4275  001140  0E47               	movlw	71
  4276  001142  6E1A               	movwf	LCD_code@code,c
  4277  001144  ECD7  F00D         	call	_LCD_code	;wreg free
  4278                           
  4279                           ;newmain.c: 207: LCD_code(0b1000000000);
  4280  001148  0E02               	movlw	2
  4281  00114A  6E1B               	movwf	LCD_code@code+1,c
  4282  00114C  0E00               	movlw	0
  4283  00114E  6E1A               	movwf	LCD_code@code,c
  4284  001150  ECD7  F00D         	call	_LCD_code	;wreg free
  4285                           
  4286                           ;newmain.c: 210: LCD_code(0b0001001000);
  4287  001154  0E00               	movlw	0
  4288  001156  6E1B               	movwf	LCD_code@code+1,c
  4289  001158  0E48               	movlw	72
  4290  00115A  6E1A               	movwf	LCD_code@code,c
  4291  00115C  ECD7  F00D         	call	_LCD_code	;wreg free
  4292                           
  4293                           ;newmain.c: 211: LCD_code(0b1000001000);
  4294  001160  0E02               	movlw	2
  4295  001162  6E1B               	movwf	LCD_code@code+1,c
  4296  001164  0E08               	movlw	8
  4297  001166  6E1A               	movwf	LCD_code@code,c
  4298  001168  ECD7  F00D         	call	_LCD_code	;wreg free
  4299                           
  4300                           ;newmain.c: 213: LCD_code(0b0001001001);
  4301  00116C  0E00               	movlw	0
  4302  00116E  6E1B               	movwf	LCD_code@code+1,c
  4303  001170  0E49               	movlw	73
  4304  001172  6E1A               	movwf	LCD_code@code,c
  4305  001174  ECD7  F00D         	call	_LCD_code	;wreg free
  4306                           
  4307                           ;newmain.c: 214: LCD_code(0b1000001100);
  4308  001178  0E02               	movlw	2
  4309  00117A  6E1B               	movwf	LCD_code@code+1,c
  4310  00117C  0E0C               	movlw	12
  4311  00117E  6E1A               	movwf	LCD_code@code,c
  4312  001180  ECD7  F00D         	call	_LCD_code	;wreg free
  4313                           
  4314                           ;newmain.c: 216: LCD_code(0b0001001010);
  4315  001184  0E00               	movlw	0
  4316  001186  6E1B               	movwf	LCD_code@code+1,c
  4317  001188  0E4A               	movlw	74
  4318  00118A  6E1A               	movwf	LCD_code@code,c
  4319  00118C  ECD7  F00D         	call	_LCD_code	;wreg free
  4320                           
  4321                           ;newmain.c: 217: LCD_code(0b1000001110);
  4322  001190  0E02               	movlw	2
  4323  001192  6E1B               	movwf	LCD_code@code+1,c
  4324  001194  0E0E               	movlw	14
  4325  001196  6E1A               	movwf	LCD_code@code,c
  4326  001198  ECD7  F00D         	call	_LCD_code	;wreg free
  4327                           
  4328                           ;newmain.c: 219: LCD_code(0b0001001011);
  4329  00119C  0E00               	movlw	0
  4330  00119E  6E1B               	movwf	LCD_code@code+1,c
  4331  0011A0  0E4B               	movlw	75
  4332  0011A2  6E1A               	movwf	LCD_code@code,c
  4333  0011A4  ECD7  F00D         	call	_LCD_code	;wreg free
  4334                           
  4335                           ;newmain.c: 220: LCD_code(0b1000001111);
  4336  0011A8  0E02               	movlw	2
  4337  0011AA  6E1B               	movwf	LCD_code@code+1,c
  4338  0011AC  0E0F               	movlw	15
  4339  0011AE  6E1A               	movwf	LCD_code@code,c
  4340  0011B0  ECD7  F00D         	call	_LCD_code	;wreg free
  4341                           
  4342                           ;newmain.c: 222: LCD_code(0b0001001100);
  4343  0011B4  0E00               	movlw	0
  4344  0011B6  6E1B               	movwf	LCD_code@code+1,c
  4345  0011B8  0E4C               	movlw	76
  4346  0011BA  6E1A               	movwf	LCD_code@code,c
  4347  0011BC  ECD7  F00D         	call	_LCD_code	;wreg free
  4348                           
  4349                           ;newmain.c: 223: LCD_code(0b1000001110);
  4350  0011C0  0E02               	movlw	2
  4351  0011C2  6E1B               	movwf	LCD_code@code+1,c
  4352  0011C4  0E0E               	movlw	14
  4353  0011C6  6E1A               	movwf	LCD_code@code,c
  4354  0011C8  ECD7  F00D         	call	_LCD_code	;wreg free
  4355                           
  4356                           ;newmain.c: 225: LCD_code(0b0001001101);
  4357  0011CC  0E00               	movlw	0
  4358  0011CE  6E1B               	movwf	LCD_code@code+1,c
  4359  0011D0  0E4D               	movlw	77
  4360  0011D2  6E1A               	movwf	LCD_code@code,c
  4361  0011D4  ECD7  F00D         	call	_LCD_code	;wreg free
  4362                           
  4363                           ;newmain.c: 226: LCD_code(0b1000001100);
  4364  0011D8  0E02               	movlw	2
  4365  0011DA  6E1B               	movwf	LCD_code@code+1,c
  4366  0011DC  0E0C               	movlw	12
  4367  0011DE  6E1A               	movwf	LCD_code@code,c
  4368  0011E0  ECD7  F00D         	call	_LCD_code	;wreg free
  4369                           
  4370                           ;newmain.c: 228: LCD_code(0b0001001110);
  4371  0011E4  0E00               	movlw	0
  4372  0011E6  6E1B               	movwf	LCD_code@code+1,c
  4373  0011E8  0E4E               	movlw	78
  4374  0011EA  6E1A               	movwf	LCD_code@code,c
  4375  0011EC  ECD7  F00D         	call	_LCD_code	;wreg free
  4376                           
  4377                           ;newmain.c: 229: LCD_code(0b1000001000);
  4378  0011F0  0E02               	movlw	2
  4379  0011F2  6E1B               	movwf	LCD_code@code+1,c
  4380  0011F4  0E08               	movlw	8
  4381  0011F6  6E1A               	movwf	LCD_code@code,c
  4382  0011F8  ECD7  F00D         	call	_LCD_code	;wreg free
  4383                           
  4384                           ;newmain.c: 231: LCD_code(0b0001001111);
  4385  0011FC  0E00               	movlw	0
  4386  0011FE  6E1B               	movwf	LCD_code@code+1,c
  4387  001200  0E4F               	movlw	79
  4388  001202  6E1A               	movwf	LCD_code@code,c
  4389  001204  ECD7  F00D         	call	_LCD_code	;wreg free
  4390                           
  4391                           ;newmain.c: 232: LCD_code(0b1000000000);
  4392  001208  0E02               	movlw	2
  4393  00120A  6E1B               	movwf	LCD_code@code+1,c
  4394  00120C  0E00               	movlw	0
  4395  00120E  6E1A               	movwf	LCD_code@code,c
  4396  001210  ECD7  F00D         	call	_LCD_code	;wreg free
  4397                           
  4398                           ;newmain.c: 235: LCD_code(0b0001010000);
  4399  001214  0E00               	movlw	0
  4400  001216  6E1B               	movwf	LCD_code@code+1,c
  4401  001218  0E50               	movlw	80
  4402  00121A  6E1A               	movwf	LCD_code@code,c
  4403  00121C  ECD7  F00D         	call	_LCD_code	;wreg free
  4404                           
  4405                           ;newmain.c: 236: LCD_code(0b1000011011);
  4406  001220  0E02               	movlw	2
  4407  001222  6E1B               	movwf	LCD_code@code+1,c
  4408  001224  0E1B               	movlw	27
  4409  001226  6E1A               	movwf	LCD_code@code,c
  4410  001228  ECD7  F00D         	call	_LCD_code	;wreg free
  4411                           
  4412                           ;newmain.c: 238: LCD_code(0b0001010001);
  4413  00122C  0E00               	movlw	0
  4414  00122E  6E1B               	movwf	LCD_code@code+1,c
  4415  001230  0E51               	movlw	81
  4416  001232  6E1A               	movwf	LCD_code@code,c
  4417  001234  ECD7  F00D         	call	_LCD_code	;wreg free
  4418                           
  4419                           ;newmain.c: 239: LCD_code(0b1000011011);
  4420  001238  0E02               	movlw	2
  4421  00123A  6E1B               	movwf	LCD_code@code+1,c
  4422  00123C  0E1B               	movlw	27
  4423  00123E  6E1A               	movwf	LCD_code@code,c
  4424  001240  ECD7  F00D         	call	_LCD_code	;wreg free
  4425                           
  4426                           ;newmain.c: 241: LCD_code(0b0001010010);
  4427  001244  0E00               	movlw	0
  4428  001246  6E1B               	movwf	LCD_code@code+1,c
  4429  001248  0E52               	movlw	82
  4430  00124A  6E1A               	movwf	LCD_code@code,c
  4431  00124C  ECD7  F00D         	call	_LCD_code	;wreg free
  4432                           
  4433                           ;newmain.c: 242: LCD_code(0b1000011011);
  4434  001250  0E02               	movlw	2
  4435  001252  6E1B               	movwf	LCD_code@code+1,c
  4436  001254  0E1B               	movlw	27
  4437  001256  6E1A               	movwf	LCD_code@code,c
  4438  001258  ECD7  F00D         	call	_LCD_code	;wreg free
  4439                           
  4440                           ;newmain.c: 244: LCD_code(0b0001010011);
  4441  00125C  0E00               	movlw	0
  4442  00125E  6E1B               	movwf	LCD_code@code+1,c
  4443  001260  0E53               	movlw	83
  4444  001262  6E1A               	movwf	LCD_code@code,c
  4445  001264  ECD7  F00D         	call	_LCD_code	;wreg free
  4446                           
  4447                           ;newmain.c: 245: LCD_code(0b1000011011);
  4448  001268  0E02               	movlw	2
  4449  00126A  6E1B               	movwf	LCD_code@code+1,c
  4450  00126C  0E1B               	movlw	27
  4451  00126E  6E1A               	movwf	LCD_code@code,c
  4452  001270  ECD7  F00D         	call	_LCD_code	;wreg free
  4453                           
  4454                           ;newmain.c: 247: LCD_code(0b0001010100);
  4455  001274  0E00               	movlw	0
  4456  001276  6E1B               	movwf	LCD_code@code+1,c
  4457  001278  0E54               	movlw	84
  4458  00127A  6E1A               	movwf	LCD_code@code,c
  4459  00127C  ECD7  F00D         	call	_LCD_code	;wreg free
  4460                           
  4461                           ;newmain.c: 248: LCD_code(0b1000011011);
  4462  001280  0E02               	movlw	2
  4463  001282  6E1B               	movwf	LCD_code@code+1,c
  4464  001284  0E1B               	movlw	27
  4465  001286  6E1A               	movwf	LCD_code@code,c
  4466  001288  ECD7  F00D         	call	_LCD_code	;wreg free
  4467                           
  4468                           ;newmain.c: 250: LCD_code(0b0001010101);
  4469  00128C  0E00               	movlw	0
  4470  00128E  6E1B               	movwf	LCD_code@code+1,c
  4471  001290  0E55               	movlw	85
  4472  001292  6E1A               	movwf	LCD_code@code,c
  4473  001294  ECD7  F00D         	call	_LCD_code	;wreg free
  4474                           
  4475                           ;newmain.c: 251: LCD_code(0b1000011011);
  4476  001298  0E02               	movlw	2
  4477  00129A  6E1B               	movwf	LCD_code@code+1,c
  4478  00129C  0E1B               	movlw	27
  4479  00129E  6E1A               	movwf	LCD_code@code,c
  4480  0012A0  ECD7  F00D         	call	_LCD_code	;wreg free
  4481                           
  4482                           ;newmain.c: 253: LCD_code(0b0001010110);
  4483  0012A4  0E00               	movlw	0
  4484  0012A6  6E1B               	movwf	LCD_code@code+1,c
  4485  0012A8  0E56               	movlw	86
  4486  0012AA  6E1A               	movwf	LCD_code@code,c
  4487  0012AC  ECD7  F00D         	call	_LCD_code	;wreg free
  4488                           
  4489                           ;newmain.c: 254: LCD_code(0b1000011011);
  4490  0012B0  0E02               	movlw	2
  4491  0012B2  6E1B               	movwf	LCD_code@code+1,c
  4492  0012B4  0E1B               	movlw	27
  4493  0012B6  6E1A               	movwf	LCD_code@code,c
  4494  0012B8  ECD7  F00D         	call	_LCD_code	;wreg free
  4495                           
  4496                           ;newmain.c: 256: LCD_code(0b0001010111);
  4497  0012BC  0E00               	movlw	0
  4498  0012BE  6E1B               	movwf	LCD_code@code+1,c
  4499  0012C0  0E57               	movlw	87
  4500  0012C2  6E1A               	movwf	LCD_code@code,c
  4501  0012C4  ECD7  F00D         	call	_LCD_code	;wreg free
  4502                           
  4503                           ;newmain.c: 257: LCD_code(0b1000000000);
  4504  0012C8  0E02               	movlw	2
  4505  0012CA  6E1B               	movwf	LCD_code@code+1,c
  4506  0012CC  0E00               	movlw	0
  4507  0012CE  6E1A               	movwf	LCD_code@code,c
  4508  0012D0  ECD7  F00D         	call	_LCD_code	;wreg free
  4509  0012D4  0012               	return		;funcret
  4510  0012D6                     __end_of_init_lcd_chars:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _clear_view_led *****************
  4530 ;; Defined at:
  4531 ;;		line 82 in file "switches.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		None
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;;		_startup_sequence
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text18
  4561  002068                     __ptext18:
  4562                           	opt stack 0
  4563  002068                     _clear_view_led:
  4564                           	opt stack 29
  4565                           
  4566                           ;switches.c: 83: LATAbits.LATA2 = 0;
  4567                           
  4568                           ;incstack = 0
  4569  002068  9489               	bcf	3977,2,c	;volatile
  4570  00206A  0012               	return		;funcret
  4571  00206C                     __end_of_clear_view_led:
  4572                           	opt stack 0
  4573                           tblptru	equ	0xFF8
  4574                           tblptrh	equ	0xFF7
  4575                           tblptrl	equ	0xFF6
  4576                           tablat	equ	0xFF5
  4577                           prodh	equ	0xFF4
  4578                           prodl	equ	0xFF3
  4579                           intcon	equ	0xFF2
  4580                           intcon2	equ	0xFF1
  4581                           postinc0	equ	0xFEE
  4582                           wreg	equ	0xFE8
  4583                           postdec1	equ	0xFE5
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function _clear_store_led *****************
  4591 ;; Defined at:
  4592 ;;		line 90 in file "switches.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;		None
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      void 
  4599 ;; Registers used:
  4600 ;;		None
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0
  4607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4610 ;;Total ram usage:        0 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    1
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		_main
  4617 ;;		_startup_sequence
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text19
  4622  00206C                     __ptext19:
  4623                           	opt stack 0
  4624  00206C                     _clear_store_led:
  4625                           	opt stack 29
  4626                           
  4627                           ;switches.c: 91: LATAbits.LATA3 = 0;
  4628                           
  4629                           ;incstack = 0
  4630  00206C  9689               	bcf	3977,3,c	;volatile
  4631  00206E  0012               	return		;funcret
  4632  002070                     __end_of_clear_store_led:
  4633                           	opt stack 0
  4634                           tblptru	equ	0xFF8
  4635                           tblptrh	equ	0xFF7
  4636                           tblptrl	equ	0xFF6
  4637                           tablat	equ	0xFF5
  4638                           prodh	equ	0xFF4
  4639                           prodl	equ	0xFF3
  4640                           intcon	equ	0xFF2
  4641                           intcon2	equ	0xFF1
  4642                           postinc0	equ	0xFEE
  4643                           wreg	equ	0xFE8
  4644                           postdec1	equ	0xFE5
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           fsr2h	equ	0xFDA
  4648                           fsr2l	equ	0xFD9
  4649                           status	equ	0xFD8
  4650                           
  4651 ;; *************** function _clear_standby_led *****************
  4652 ;; Defined at:
  4653 ;;		line 66 in file "switches.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		None
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4667 ;;      Params:         0       0       0       0       0       0       0       0       0
  4668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4670 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4671 ;;Total ram usage:        0 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    1
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_main
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text20
  4682  002070                     __ptext20:
  4683                           	opt stack 0
  4684  002070                     _clear_standby_led:
  4685                           	opt stack 29
  4686                           
  4687                           ;switches.c: 67: LATAbits.LATA5 = 0;
  4688                           
  4689                           ;incstack = 0
  4690  002070  9A89               	bcf	3977,5,c	;volatile
  4691  002072  0012               	return		;funcret
  4692  002074                     __end_of_clear_standby_led:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           postdec1	equ	0xFE5
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           fsr2h	equ	0xFDA
  4708                           fsr2l	equ	0xFD9
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function _clear_all_switch_leds *****************
  4712 ;; Defined at:
  4713 ;;		line 186 in file "switches.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    1
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;;		_startup_sequence
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text21
  4743  002044                     __ptext21:
  4744                           	opt stack 0
  4745  002044                     _clear_all_switch_leds:
  4746                           	opt stack 29
  4747                           
  4748                           ;switches.c: 187: led = 0;
  4749                           
  4750                           ;incstack = 0
  4751  002044  0E00               	movlw	0
  4752  002046  0100               	movlb	0	; () banked
  4753  002048  6F7B               	movwf	(_led+1)& (0+255),b
  4754  00204A  0E00               	movlw	0
  4755  00204C  6F7A               	movwf	_led& (0+255),b
  4756                           
  4757                           ; BSR set to: 0
  4758  00204E  0012               	return		;funcret
  4759  002050                     __end_of_clear_all_switch_leds:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           postinc0	equ	0xFEE
  4770                           wreg	equ	0xFE8
  4771                           postdec1	equ	0xFE5
  4772                           fsr1l	equ	0xFE1
  4773                           indf2	equ	0xFDF
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function _clear_all_sources *****************
  4779 ;; Defined at:
  4780 ;;		line 200 in file "switches.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4794 ;;      Params:         0       0       0       0       0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        0 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_main
  4805 ;;		_startup_sequence
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text22
  4810  002050                     __ptext22:
  4811                           	opt stack 0
  4812  002050                     _clear_all_sources:
  4813                           	opt stack 29
  4814                           
  4815                           ;switches.c: 201: relay_source = 0;
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;incstack = 0
  4819  002050  0E00               	movlw	0
  4820  002052  0100               	movlb	0	; () banked
  4821  002054  6F7D               	movwf	(_relay_source+1)& (0+255),b
  4822  002056  0E00               	movlw	0
  4823  002058  6F7C               	movwf	_relay_source& (0+255),b
  4824                           
  4825                           ; BSR set to: 0
  4826  00205A  0012               	return		;funcret
  4827  00205C                     __end_of_clear_all_sources:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           prodh	equ	0xFF4
  4834                           prodl	equ	0xFF3
  4835                           intcon	equ	0xFF2
  4836                           intcon2	equ	0xFF1
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           postdec1	equ	0xFE5
  4840                           fsr1l	equ	0xFE1
  4841                           indf2	equ	0xFDF
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _backlight_on *****************
  4847 ;; Defined at:
  4848 ;;		line 298 in file "LCD-library.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  1    wreg      void 
  4855 ;; Registers used:
  4856 ;;		None
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4865 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4866 ;;Total ram usage:        0 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    1
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_main
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text23
  4877  002074                     __ptext23:
  4878                           	opt stack 0
  4879  002074                     _backlight_on:
  4880                           	opt stack 29
  4881                           
  4882                           ;LCD-library.c: 299: LATBbits.LATB2 = 1;
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;incstack = 0
  4886  002074  848A               	bsf	3978,2,c	;volatile
  4887  002076  0012               	return		;funcret
  4888  002078                     __end_of_backlight_on:
  4889                           	opt stack 0
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           intcon	equ	0xFF2
  4897                           intcon2	equ	0xFF1
  4898                           postinc0	equ	0xFEE
  4899                           wreg	equ	0xFE8
  4900                           postdec1	equ	0xFE5
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _backlight_off *****************
  4908 ;; Defined at:
  4909 ;;		line 302 in file "LCD-library.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		None
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text24
  4938  002078                     __ptext24:
  4939                           	opt stack 0
  4940  002078                     _backlight_off:
  4941                           	opt stack 29
  4942                           
  4943                           ;LCD-library.c: 303: LATBbits.LATB2 = 0;
  4944                           
  4945                           ;incstack = 0
  4946  002078  948A               	bcf	3978,2,c	;volatile
  4947  00207A  0012               	return		;funcret
  4948  00207C                     __end_of_backlight_off:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           intcon2	equ	0xFF1
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postdec1	equ	0xFE5
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _Wait *****************
  4968 ;; Defined at:
  4969 ;;		line 123 in file "newmain.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  delay           2   18[COMRAM] unsigned int 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4983 ;;      Params:         2       0       0       0       0       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4986 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4987 ;;Total ram usage:        2 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    1
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text25
  4998  001FD6                     __ptext25:
  4999                           	opt stack 0
  5000  001FD6                     _Wait:
  5001                           	opt stack 29
  5002                           
  5003                           ;newmain.c: 125: for(;delay;delay--)
  5004                           
  5005                           ;incstack = 0
  5006  001FD6  D008               	goto	l137
  5007  001FD8                     
  5008                           ;newmain.c: 126: _delay((unsigned long)((100)*(20000000/4000000.0)));
  5009  001FD8  0EA6               	movlw	166
  5010  001FDA                     u3717:
  5011  001FDA  2EE8               	decfsz	wreg,f,c
  5012  001FDC  D7FE               	bra	u3717
  5013  001FDE  F000 F000          	nop2	
  5014  001FE2  0613               	decf	Wait@delay,f,c
  5015  001FE4  A0D8               	btfss	status,0,c
  5016  001FE6  0614               	decf	Wait@delay+1,f,c
  5017  001FE8                     l137:
  5018  001FE8  5013               	movf	Wait@delay,w,c
  5019  001FEA  1014               	iorwf	Wait@delay+1,w,c
  5020  001FEC  B4D8               	btfsc	status,2,c
  5021  001FEE  0012               	return	
  5022  001FF0  D7F3               	goto	l138
  5023  001FF2                     __end_of_Wait:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           intcon	equ	0xFF2
  5032                           intcon2	equ	0xFF1
  5033                           postinc0	equ	0xFEE
  5034                           wreg	equ	0xFE8
  5035                           postdec1	equ	0xFE5
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function _LCD_slider *****************
  5043 ;; Defined at:
  5044 ;;		line 306 in file "LCD-library.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  pos             1    wreg     unsigned char 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  pos             1   43[COMRAM] unsigned char 
  5049 ;;  i               1   44[COMRAM] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      void 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5059 ;;      Params:         0       0       0       0       0       0       0       0       0
  5060 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5062 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5063 ;;Total ram usage:        2 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    8
  5066 ;; This function calls:
  5067 ;;		_LCD_displayChar
  5068 ;;		_LCD_moveRight
  5069 ;;		_LCD_setCursor
  5070 ;; This function is called by:
  5071 ;;		_main
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text26
  5076  001B4C                     __ptext26:
  5077                           	opt stack 0
  5078  001B4C                     _LCD_slider:
  5079                           	opt stack 22
  5080                           
  5081                           ;incstack = 0
  5082                           ;LCD_slider@pos stored from wreg
  5083  001B4C  6E2C               	movwf	LCD_slider@pos,c
  5084                           
  5085                           ;LCD-library.c: 307: char i;
  5086                           ;LCD-library.c: 309: LCD_setCursor(1,2);
  5087  001B4E  0E00               	movlw	0
  5088  001B50  6E22               	movwf	LCD_setCursor@pos+1,c
  5089  001B52  0E01               	movlw	1
  5090  001B54  6E21               	movwf	LCD_setCursor@pos,c
  5091  001B56  0E00               	movlw	0
  5092  001B58  6E24               	movwf	LCD_setCursor@row+1,c
  5093  001B5A  0E02               	movlw	2
  5094  001B5C  6E23               	movwf	LCD_setCursor@row,c
  5095  001B5E  EC42  F00C         	call	_LCD_setCursor	;wreg free
  5096                           
  5097                           ;LCD-library.c: 310: LCD_displayChar(0b00000000);
  5098  001B62  0E00               	movlw	0
  5099  001B64  EC2F  F00E         	call	_LCD_displayChar
  5100                           
  5101                           ;LCD-library.c: 311: LCD_moveRight(1);
  5102  001B68  0E00               	movlw	0
  5103  001B6A  6E28               	movwf	LCD_moveRight@howMuch+1,c
  5104  001B6C  0E01               	movlw	1
  5105  001B6E  6E27               	movwf	LCD_moveRight@howMuch,c
  5106  001B70  EC08  F00F         	call	_LCD_moveRight	;wreg free
  5107                           
  5108                           ;LCD-library.c: 313: for (i=0; i<14; i++) {
  5109  001B74  0E00               	movlw	0
  5110  001B76  6E2D               	movwf	LCD_slider@i,c
  5111  001B78                     l4350:
  5112  001B78  0E0D               	movlw	13
  5113  001B7A  642D               	cpfsgt	LCD_slider@i,c
  5114  001B7C  D001               	goto	l688
  5115  001B7E  D013               	goto	u3420
  5116  001B80                     l688:
  5117                           
  5118                           ;LCD-library.c: 314: if (i == pos) {
  5119  001B80  502C               	movf	LCD_slider@pos,w,c
  5120  001B82  182D               	xorwf	LCD_slider@i,w,c
  5121  001B84  A4D8               	btfss	status,2,c
  5122  001B86  D004               	goto	l690
  5123                           
  5124                           ;LCD-library.c: 315: LCD_displayChar(0b00000010);
  5125  001B88  0E02               	movlw	2
  5126  001B8A  EC2F  F00E         	call	_LCD_displayChar
  5127                           
  5128                           ;LCD-library.c: 316: } else {
  5129  001B8E  D003               	goto	l691
  5130  001B90                     l690:
  5131                           
  5132                           ;LCD-library.c: 317: LCD_displayChar(0b00101101);
  5133  001B90  0E2D               	movlw	45
  5134  001B92  EC2F  F00E         	call	_LCD_displayChar
  5135  001B96                     l691:
  5136                           
  5137                           ;LCD-library.c: 318: }
  5138                           ;LCD-library.c: 319: LCD_moveRight(1);
  5139  001B96  0E00               	movlw	0
  5140  001B98  6E28               	movwf	LCD_moveRight@howMuch+1,c
  5141  001B9A  0E01               	movlw	1
  5142  001B9C  6E27               	movwf	LCD_moveRight@howMuch,c
  5143  001B9E  EC08  F00F         	call	_LCD_moveRight	;wreg free
  5144  001BA2  2A2D               	incf	LCD_slider@i,f,c
  5145  001BA4  D7E9               	goto	l4350
  5146  001BA6                     u3420:
  5147                           
  5148                           ;LCD-library.c: 320: }
  5149                           ;LCD-library.c: 321: LCD_displayChar(0b00000001);
  5150  001BA6  0E01               	movlw	1
  5151  001BA8  EC2F  F00E         	call	_LCD_displayChar
  5152  001BAC  0012               	return		;funcret
  5153  001BAE                     __end_of_LCD_slider:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _LCD_on *****************
  5173 ;; Defined at:
  5174 ;;		line 216 in file "LCD-library.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;		None
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5190 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5191 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5192 ;;Total ram usage:        2 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    5
  5195 ;; This function calls:
  5196 ;;		_LCD_code
  5197 ;; This function is called by:
  5198 ;;		_main
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text27
  5203  001E4C                     __ptext27:
  5204                           	opt stack 0
  5205  001E4C                     _LCD_on:
  5206                           	opt stack 25
  5207                           
  5208                           ;LCD-library.c: 217: if(!LCD_isDisplayOn) {
  5209                           
  5210                           ;incstack = 0
  5211  001E4C  5043               	movf	_LCD_isDisplayOn,w,c
  5212  001E4E  1044               	iorwf	_LCD_isDisplayOn+1,w,c
  5213  001E50  A4D8               	btfss	status,2,c
  5214  001E52  0012               	return	
  5215                           
  5216                           ;LCD-library.c: 218: LCD_code(0b0000001100 + (LCD_isCursorOn<<1) + LCD_isCursorBlinking)
      +                          ;
  5217  001E54  C041  F021         	movff	_LCD_isCursorOn,??_LCD_on
  5218  001E58  C042  F022         	movff	_LCD_isCursorOn+1,??_LCD_on+1
  5219  001E5C  90D8               	bcf	status,0,c
  5220  001E5E  3621               	rlcf	??_LCD_on,f,c
  5221  001E60  3622               	rlcf	??_LCD_on+1,f,c
  5222  001E62  5035               	movf	_LCD_isCursorBlinking,w,c
  5223  001E64  2621               	addwf	??_LCD_on,f,c
  5224  001E66  5036               	movf	_LCD_isCursorBlinking+1,w,c
  5225  001E68  2222               	addwfc	??_LCD_on+1,f,c
  5226  001E6A  0E0C               	movlw	12
  5227  001E6C  2421               	addwf	??_LCD_on,w,c
  5228  001E6E  6E1A               	movwf	LCD_code@code,c
  5229  001E70  0E00               	movlw	0
  5230  001E72  2022               	addwfc	??_LCD_on+1,w,c
  5231  001E74  6E1B               	movwf	LCD_code@code+1,c
  5232  001E76  ECD7  F00D         	call	_LCD_code	;wreg free
  5233                           
  5234                           ;LCD-library.c: 219: LCD_isDisplayOn = 1;
  5235  001E7A  0E00               	movlw	0
  5236  001E7C  6E44               	movwf	_LCD_isDisplayOn+1,c
  5237  001E7E  0E01               	movlw	1
  5238  001E80  6E43               	movwf	_LCD_isDisplayOn,c
  5239  001E82  0012               	return	
  5240  001E84                     __end_of_LCD_on:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           postdec1	equ	0xFE5
  5253                           fsr1l	equ	0xFE1
  5254                           indf2	equ	0xFDF
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _LCD_off *****************
  5260 ;; Defined at:
  5261 ;;		line 208 in file "LCD-library.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    5
  5282 ;; This function calls:
  5283 ;;		_LCD_code
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text28
  5290  001F7C                     __ptext28:
  5291                           	opt stack 0
  5292  001F7C                     _LCD_off:
  5293                           	opt stack 25
  5294                           
  5295                           ;LCD-library.c: 209: if(LCD_isDisplayOn) {
  5296                           
  5297                           ;incstack = 0
  5298  001F7C  5043               	movf	_LCD_isDisplayOn,w,c
  5299  001F7E  1044               	iorwf	_LCD_isDisplayOn+1,w,c
  5300  001F80  B4D8               	btfsc	status,2,c
  5301  001F82  0012               	return	
  5302                           
  5303                           ;LCD-library.c: 210: LCD_code(0b0000001000);
  5304  001F84  0E00               	movlw	0
  5305  001F86  6E1B               	movwf	LCD_code@code+1,c
  5306  001F88  0E08               	movlw	8
  5307  001F8A  6E1A               	movwf	LCD_code@code,c
  5308  001F8C  ECD7  F00D         	call	_LCD_code	;wreg free
  5309                           
  5310                           ;LCD-library.c: 211: LCD_isDisplayOn = 0;
  5311  001F90  0E00               	movlw	0
  5312  001F92  6E44               	movwf	_LCD_isDisplayOn+1,c
  5313  001F94  0E00               	movlw	0
  5314  001F96  6E43               	movwf	_LCD_isDisplayOn,c
  5315  001F98  0012               	return	
  5316  001F9A                     __end_of_LCD_off:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           intcon2	equ	0xFF1
  5326                           postinc0	equ	0xFEE
  5327                           wreg	equ	0xFE8
  5328                           postdec1	equ	0xFE5
  5329                           fsr1l	equ	0xFE1
  5330                           indf2	equ	0xFDF
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _LCD_init *****************
  5336 ;; Defined at:
  5337 ;;		line 85 in file "LCD-library.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  LCD_f           2   48[COMRAM] int 
  5342 ;;  LCD_n           2   46[COMRAM] int 
  5343 ;;  LCD_dl          2   44[COMRAM] int 
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5353 ;;      Params:         0       0       0       0       0       0       0       0       0
  5354 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5355 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5356 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5357 ;;Total ram usage:       12 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:    6
  5360 ;; This function calls:
  5361 ;;		_LCD_4bitCode
  5362 ;;		_LCD_4bitCodeNoWait
  5363 ;;		_LCD_8bitCode
  5364 ;;		_LCD_8bitCodeNoWait
  5365 ;;		_LCD_delay_ms
  5366 ;;		_LCD_delay_us
  5367 ;;		_LCD_setCursor
  5368 ;; This function is called by:
  5369 ;;		_main
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text29
  5374  0012D6                     __ptext29:
  5375                           	opt stack 0
  5376  0012D6                     _LCD_init:
  5377                           	opt stack 24
  5378                           
  5379                           ;LCD-library.c: 86: TRISD = TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = 0;
  5380                           
  5381                           ;incstack = 0
  5382  0012D6  9495               	bcf	3989,2,c	;volatile
  5383  0012D8  9295               	bcf	3989,1,c	;volatile
  5384  0012DA  9095               	bcf	3989,0,c	;volatile
  5385  0012DC  0E00               	movlw	0
  5386  0012DE  B095               	btfsc	3989,0,c	;volatile
  5387  0012E0  0E01               	movlw	1
  5388  0012E2  6E95               	movwf	3989,c	;volatile
  5389                           
  5390                           ;LCD-library.c: 87: PORTDbits.RD3 = PORTDbits.RD2 = PORTDbits.RD1 = PORTD = 0;
  5391  0012E4  0E00               	movlw	0
  5392  0012E6  6E83               	movwf	3971,c	;volatile
  5393  0012E8  B083               	btfsc	3971,0,c	;volatile
  5394  0012EA  D002               	bra	u3245
  5395  0012EC  9283               	bcf	3971,1,c	;volatile
  5396  0012EE  D001               	bra	u3246
  5397  0012F0                     u3245:
  5398  0012F0  8283               	bsf	3971,1,c	;volatile
  5399  0012F2                     u3246:
  5400  0012F2  B283               	btfsc	3971,1,c	;volatile
  5401  0012F4  D002               	bra	u3255
  5402  0012F6  9483               	bcf	3971,2,c	;volatile
  5403  0012F8  D001               	bra	u3256
  5404  0012FA                     u3255:
  5405  0012FA  8483               	bsf	3971,2,c	;volatile
  5406  0012FC                     u3256:
  5407  0012FC  A483               	btfss	3971,2,c	;volatile
  5408  0012FE  D002               	bra	u3265
  5409  001300  8683               	bsf	3971,3,c	;volatile
  5410  001302  D001               	bra	u3267
  5411  001304                     u3265:
  5412  001304  9683               	bcf	3971,3,c	;volatile
  5413  001306                     u3267:
  5414                           
  5415                           ;LCD-library.c: 90: int LCD_dl, LCD_n, LCD_f;
  5416                           ;LCD-library.c: 91: if(4 == 8) LCD_dl = 1; else if(4 == 4) LCD_dl = 0;
  5417  001306  0E00               	movlw	0
  5418  001308  6E2E               	movwf	LCD_init@LCD_dl+1,c
  5419  00130A  0E00               	movlw	0
  5420  00130C  6E2D               	movwf	LCD_init@LCD_dl,c
  5421                           
  5422                           ;LCD-library.c: 92: if(2 == 2) LCD_n = 1; else if(2 == 1) LCD_n = 0;
  5423  00130E  0E00               	movlw	0
  5424  001310  6E30               	movwf	LCD_init@LCD_n+1,c
  5425  001312  0E01               	movlw	1
  5426  001314  6E2F               	movwf	LCD_init@LCD_n,c
  5427                           
  5428                           ;LCD-library.c: 93: if(8 == 10) LCD_f = 1; else if(8 == 8) LCD_f = 0;
  5429  001316  0E00               	movlw	0
  5430  001318  6E32               	movwf	LCD_init@LCD_f+1,c
  5431  00131A  0E00               	movlw	0
  5432  00131C  6E31               	movwf	LCD_init@LCD_f,c
  5433                           
  5434                           ;LCD-library.c: 117: LCD_delay_ms(50);
  5435                           
  5436                           ;LCD-library.c: 115: else if(4 == 4) {
  5437                           
  5438                           ;LCD-library.c: 114: }
  5439                           
  5440                           ;LCD-library.c: 113: LCD_8bitCode(0b0000001000 + (LCD_isDisplayOn<<2) + (LCD_isCursorOn<
      +                          <1) + LCD_isCursorBlinking);
  5441                           
  5442                           ;LCD-library.c: 110: LCD_8bitCode(0b0000000100 + (LCD_isIncrement<<1) + LCD_isShift);
  5443                           
  5444                           ;LCD-library.c: 109: LCD_8bitCode(0b0000000001);
  5445                           
  5446                           ;LCD-library.c: 108: LCD_8bitCode(0b0000001000);
  5447                           
  5448                           ;LCD-library.c: 107: LCD_8bitCode(0b0000100000 + (LCD_dl<<4) + (LCD_n<<3) + (LCD_f<<2));
  5449                           
  5450                           ;LCD-library.c: 105: LCD_delay_us(200);
  5451                           
  5452                           ;LCD-library.c: 103: LCD_8bitCodeNoWait(0b0000100000 + (LCD_dl<<4) + (LCD_n<<3) + (LCD_f
      +                          <<2));
  5453                           
  5454                           ;LCD-library.c: 102: LCD_delay_us(200);
  5455                           
  5456                           ;LCD-library.c: 101: LCD_8bitCodeNoWait(0b0000100000 + (LCD_dl<<4) + (LCD_n<<3) + (LCD_f
      +                          <<2));
  5457                           
  5458                           ;LCD-library.c: 100: LCD_delay_ms(10);
  5459                           
  5460                           ;LCD-library.c: 99: LCD_8bitCodeNoWait(0b0000100000 + (LCD_dl<<4) + (LCD_n<<3) + (LCD_f<
      +                          <2));
  5461                           
  5462                           ;LCD-library.c: 98: LCD_delay_ms(50);
  5463                           
  5464                           ;LCD-library.c: 95: if(4 == 8) {
  5465  00131E  0E00               	movlw	0
  5466  001320  6E14               	movwf	LCD_delay_ms@ms+1,c
  5467  001322  0E32               	movlw	50
  5468  001324  6E13               	movwf	LCD_delay_ms@ms,c
  5469  001326  EC42  F00F         	call	_LCD_delay_ms	;wreg free
  5470                           
  5471                           ;LCD-library.c: 118: LCD_4bitCodeNoWait(0b000011);
  5472  00132A  0E00               	movlw	0
  5473  00132C  6E14               	movwf	LCD_4bitCodeNoWait@code+1,c
  5474  00132E  0E03               	movlw	3
  5475  001330  6E13               	movwf	LCD_4bitCodeNoWait@code,c
  5476  001332  EC42  F00D         	call	_LCD_4bitCodeNoWait	;wreg free
  5477                           
  5478                           ;LCD-library.c: 119: LCD_delay_ms(10);
  5479  001336  0E00               	movlw	0
  5480  001338  6E14               	movwf	LCD_delay_ms@ms+1,c
  5481  00133A  0E0A               	movlw	10
  5482  00133C  6E13               	movwf	LCD_delay_ms@ms,c
  5483  00133E  EC42  F00F         	call	_LCD_delay_ms	;wreg free
  5484                           
  5485                           ;LCD-library.c: 120: LCD_4bitCodeNoWait(0b000011);
  5486  001342  0E00               	movlw	0
  5487  001344  6E14               	movwf	LCD_4bitCodeNoWait@code+1,c
  5488  001346  0E03               	movlw	3
  5489  001348  6E13               	movwf	LCD_4bitCodeNoWait@code,c
  5490  00134A  EC42  F00D         	call	_LCD_4bitCodeNoWait	;wreg free
  5491                           
  5492                           ;LCD-library.c: 121: LCD_delay_us(200);
  5493  00134E  0E00               	movlw	0
  5494  001350  6E14               	movwf	LCD_delay_us@us+1,c
  5495  001352  0EC8               	movlw	200
  5496  001354  6E13               	movwf	LCD_delay_us@us,c
  5497  001356  EC5C  F00F         	call	_LCD_delay_us	;wreg free
  5498                           
  5499                           ;LCD-library.c: 122: LCD_4bitCodeNoWait(0b000011);
  5500  00135A  0E00               	movlw	0
  5501  00135C  6E14               	movwf	LCD_4bitCodeNoWait@code+1,c
  5502  00135E  0E03               	movlw	3
  5503  001360  6E13               	movwf	LCD_4bitCodeNoWait@code,c
  5504  001362  EC42  F00D         	call	_LCD_4bitCodeNoWait	;wreg free
  5505                           
  5506                           ;LCD-library.c: 124: LCD_delay_us(200);
  5507  001366  0E00               	movlw	0
  5508  001368  6E14               	movwf	LCD_delay_us@us+1,c
  5509  00136A  0EC8               	movlw	200
  5510  00136C  6E13               	movwf	LCD_delay_us@us,c
  5511  00136E  EC5C  F00F         	call	_LCD_delay_us	;wreg free
  5512                           
  5513                           ;LCD-library.c: 126: LCD_4bitCode(0b000010);
  5514  001372  0E00               	movlw	0
  5515  001374  6E19               	movwf	LCD_4bitCode@code+1,c
  5516  001376  0E02               	movlw	2
  5517  001378  6E18               	movwf	LCD_4bitCode@code,c
  5518  00137A  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5519                           
  5520                           ;LCD-library.c: 127: LCD_4bitCode(0b000010); LCD_4bitCode(0b000000 + (LCD_n<<3) + (LCD_f
      +                          <<2));
  5521  00137E  0E00               	movlw	0
  5522  001380  6E19               	movwf	LCD_4bitCode@code+1,c
  5523  001382  0E02               	movlw	2
  5524  001384  6E18               	movwf	LCD_4bitCode@code,c
  5525  001386  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5526  00138A  C031  F027         	movff	LCD_init@LCD_f,??_LCD_init
  5527  00138E  C032  F028         	movff	LCD_init@LCD_f+1,??_LCD_init+1
  5528  001392  90D8               	bcf	status,0,c
  5529  001394  3627               	rlcf	??_LCD_init,f,c
  5530  001396  3628               	rlcf	??_LCD_init+1,f,c
  5531  001398  90D8               	bcf	status,0,c
  5532  00139A  3627               	rlcf	??_LCD_init,f,c
  5533  00139C  3628               	rlcf	??_LCD_init+1,f,c
  5534  00139E  C02F  F029         	movff	LCD_init@LCD_n,??_LCD_init+2
  5535  0013A2  C030  F02A         	movff	LCD_init@LCD_n+1,??_LCD_init+3
  5536  0013A6  90D8               	bcf	status,0,c
  5537  0013A8  3629               	rlcf	??_LCD_init+2,f,c
  5538  0013AA  362A               	rlcf	??_LCD_init+3,f,c
  5539  0013AC  90D8               	bcf	status,0,c
  5540  0013AE  3629               	rlcf	??_LCD_init+2,f,c
  5541  0013B0  362A               	rlcf	??_LCD_init+3,f,c
  5542  0013B2  90D8               	bcf	status,0,c
  5543  0013B4  3629               	rlcf	??_LCD_init+2,f,c
  5544  0013B6  362A               	rlcf	??_LCD_init+3,f,c
  5545  0013B8  5027               	movf	??_LCD_init,w,c
  5546  0013BA  2429               	addwf	??_LCD_init+2,w,c
  5547  0013BC  6E18               	movwf	LCD_4bitCode@code,c
  5548  0013BE  5028               	movf	??_LCD_init+1,w,c
  5549  0013C0  202A               	addwfc	??_LCD_init+3,w,c
  5550  0013C2  6E19               	movwf	LCD_4bitCode@code+1,c
  5551  0013C4  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5552                           
  5553                           ;LCD-library.c: 128: LCD_4bitCode(0b000000); LCD_4bitCode(0b001000);
  5554  0013C8  0E00               	movlw	0
  5555  0013CA  6E19               	movwf	LCD_4bitCode@code+1,c
  5556  0013CC  0E00               	movlw	0
  5557  0013CE  6E18               	movwf	LCD_4bitCode@code,c
  5558  0013D0  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5559  0013D4  0E00               	movlw	0
  5560  0013D6  6E19               	movwf	LCD_4bitCode@code+1,c
  5561  0013D8  0E08               	movlw	8
  5562  0013DA  6E18               	movwf	LCD_4bitCode@code,c
  5563  0013DC  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5564                           
  5565                           ;LCD-library.c: 129: LCD_4bitCode(0b000000); LCD_4bitCode(0b000001);
  5566  0013E0  0E00               	movlw	0
  5567  0013E2  6E19               	movwf	LCD_4bitCode@code+1,c
  5568  0013E4  0E00               	movlw	0
  5569  0013E6  6E18               	movwf	LCD_4bitCode@code,c
  5570  0013E8  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5571  0013EC  0E00               	movlw	0
  5572  0013EE  6E19               	movwf	LCD_4bitCode@code+1,c
  5573  0013F0  0E01               	movlw	1
  5574  0013F2  6E18               	movwf	LCD_4bitCode@code,c
  5575  0013F4  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5576                           
  5577                           ;LCD-library.c: 130: LCD_4bitCode(0b000000); LCD_4bitCode(0b000100 + (LCD_isIncrement<<1
      +                          ) + LCD_isShift);
  5578  0013F8  0E00               	movlw	0
  5579  0013FA  6E19               	movwf	LCD_4bitCode@code+1,c
  5580  0013FC  0E00               	movlw	0
  5581  0013FE  6E18               	movwf	LCD_4bitCode@code,c
  5582  001400  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5583  001404  C045  F027         	movff	_LCD_isIncrement,??_LCD_init
  5584  001408  C046  F028         	movff	_LCD_isIncrement+1,??_LCD_init+1
  5585  00140C  90D8               	bcf	status,0,c
  5586  00140E  3627               	rlcf	??_LCD_init,f,c
  5587  001410  3628               	rlcf	??_LCD_init+1,f,c
  5588  001412  0100               	movlb	0	; () banked
  5589  001414  517E               	movf	_LCD_isShift& (0+255),w,b
  5590  001416  2627               	addwf	??_LCD_init,f,c
  5591  001418  517F               	movf	(_LCD_isShift+1)& (0+255),w,b
  5592  00141A  2228               	addwfc	??_LCD_init+1,f,c
  5593  00141C  0E04               	movlw	4
  5594  00141E  2427               	addwf	??_LCD_init,w,c
  5595  001420  6E18               	movwf	LCD_4bitCode@code,c
  5596  001422  0E00               	movlw	0
  5597  001424  2028               	addwfc	??_LCD_init+1,w,c
  5598  001426  6E19               	movwf	LCD_4bitCode@code+1,c
  5599  001428  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5600                           
  5601                           ;LCD-library.c: 133: LCD_4bitCode(0b000000); LCD_4bitCode(0b001000 + (LCD_isDisplayOn<<2
      +                          ) + (LCD_isCursorOn<<1) + LCD_isCursorBlinking);
  5602  00142C  0E00               	movlw	0
  5603  00142E  6E19               	movwf	LCD_4bitCode@code+1,c
  5604  001430  0E00               	movlw	0
  5605  001432  6E18               	movwf	LCD_4bitCode@code,c
  5606  001434  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5607  001438  C041  F027         	movff	_LCD_isCursorOn,??_LCD_init
  5608  00143C  C042  F028         	movff	_LCD_isCursorOn+1,??_LCD_init+1
  5609  001440  90D8               	bcf	status,0,c
  5610  001442  3627               	rlcf	??_LCD_init,f,c
  5611  001444  3628               	rlcf	??_LCD_init+1,f,c
  5612  001446  C043  F029         	movff	_LCD_isDisplayOn,??_LCD_init+2
  5613  00144A  C044  F02A         	movff	_LCD_isDisplayOn+1,??_LCD_init+3
  5614  00144E  90D8               	bcf	status,0,c
  5615  001450  3629               	rlcf	??_LCD_init+2,f,c
  5616  001452  362A               	rlcf	??_LCD_init+3,f,c
  5617  001454  90D8               	bcf	status,0,c
  5618  001456  3629               	rlcf	??_LCD_init+2,f,c
  5619  001458  362A               	rlcf	??_LCD_init+3,f,c
  5620  00145A  5027               	movf	??_LCD_init,w,c
  5621  00145C  2629               	addwf	??_LCD_init+2,f,c
  5622  00145E  5028               	movf	??_LCD_init+1,w,c
  5623  001460  222A               	addwfc	??_LCD_init+3,f,c
  5624  001462  5035               	movf	_LCD_isCursorBlinking,w,c
  5625  001464  2629               	addwf	??_LCD_init+2,f,c
  5626  001466  5036               	movf	_LCD_isCursorBlinking+1,w,c
  5627  001468  222A               	addwfc	??_LCD_init+3,f,c
  5628  00146A  0E08               	movlw	8
  5629  00146C  2429               	addwf	??_LCD_init+2,w,c
  5630  00146E  6E18               	movwf	LCD_4bitCode@code,c
  5631  001470  0E00               	movlw	0
  5632  001472  202A               	addwfc	??_LCD_init+3,w,c
  5633  001474  6E19               	movwf	LCD_4bitCode@code+1,c
  5634  001476  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  5635                           
  5636                           ;LCD-library.c: 134: }
  5637                           ;LCD-library.c: 135: LCD_setCursor(LCD_posX, LCD_posY);
  5638  00147A  C049  F021         	movff	_LCD_posX,LCD_setCursor@pos
  5639  00147E  C04A  F022         	movff	_LCD_posX+1,LCD_setCursor@pos+1
  5640  001482  C047  F023         	movff	_LCD_posY,LCD_setCursor@row
  5641  001486  C048  F024         	movff	_LCD_posY+1,LCD_setCursor@row+1
  5642  00148A  EC42  F00C         	call	_LCD_setCursor	;wreg free
  5643  00148E  0012               	return		;funcret
  5644  001490                     __end_of_LCD_init:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           intcon2	equ	0xFF1
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           postdec1	equ	0xFE5
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _LCD_delay_ms *****************
  5664 ;; Defined at:
  5665 ;;		line 8 in file "LCD-library.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  ms              2   18[COMRAM] int 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               2   21[COMRAM] int 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5679 ;;      Params:         2       0       0       0       0       0       0       0       0
  5680 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5681 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5682 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5683 ;;Total ram usage:        5 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    1
  5686 ;; This function calls:
  5687 ;;		Nothing
  5688 ;; This function is called by:
  5689 ;;		_LCD_init
  5690 ;;		_LCD_typewriteString
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text30
  5695  001E84                     __ptext30:
  5696                           	opt stack 0
  5697  001E84                     _LCD_delay_ms:
  5698                           	opt stack 28
  5699                           
  5700                           ;incstack = 0
  5701  001E84  0E00               	movlw	0
  5702  001E86  6E17               	movwf	LCD_delay_ms@i+1,c
  5703  001E88  0E00               	movlw	0
  5704  001E8A  6E16               	movwf	LCD_delay_ms@i,c
  5705  001E8C  D00A               	goto	l532
  5706  001E8E  0E07               	movlw	7
  5707  001E90  6E15               	movwf	??_LCD_delay_ms& (0+255),c
  5708  001E92  0E7D               	movlw	125
  5709  001E94                     u3727:
  5710  001E94  2EE8               	decfsz	wreg,f,c
  5711  001E96  D7FE               	bra	u3727
  5712  001E98  2E15               	decfsz	??_LCD_delay_ms& (0+255),f,c
  5713  001E9A  D7FC               	bra	u3727
  5714  001E9C  F000               	nop	
  5715  001E9E  4A16               	infsnz	LCD_delay_ms@i,f,c
  5716  001EA0  2A17               	incf	LCD_delay_ms@i+1,f,c
  5717  001EA2                     l532:
  5718  001EA2  5013               	movf	LCD_delay_ms@ms,w,c
  5719  001EA4  5C16               	subwf	LCD_delay_ms@i,w,c
  5720  001EA6  5017               	movf	LCD_delay_ms@i+1,w,c
  5721  001EA8  0A80               	xorlw	128
  5722  001EAA  6E15               	movwf	??_LCD_delay_ms& (0+255),c
  5723  001EAC  5014               	movf	LCD_delay_ms@ms+1,w,c
  5724  001EAE  0A80               	xorlw	128
  5725  001EB0  5815               	subwfb	??_LCD_delay_ms& (0+255),w,c
  5726  001EB2  B0D8               	btfsc	status,0,c
  5727  001EB4  0012               	return	
  5728  001EB6  D7EB               	goto	l533
  5729  001EB8                     __end_of_LCD_delay_ms:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           postdec1	equ	0xFE5
  5742                           fsr1l	equ	0xFE1
  5743                           indf2	equ	0xFDF
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function _LCD_home *****************
  5749 ;; Defined at:
  5750 ;;		line 237 in file "LCD-library.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;		None
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5767 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5768 ;;Total ram usage:        0 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    5
  5771 ;; This function calls:
  5772 ;;		_LCD_code
  5773 ;; This function is called by:
  5774 ;;		_main
  5775 ;;		_startup_sequence
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text31
  5780  001F9A                     __ptext31:
  5781                           	opt stack 0
  5782  001F9A                     _LCD_home:
  5783                           	opt stack 25
  5784                           
  5785                           ;LCD-library.c: 238: LCD_code(0b0000000010);
  5786                           
  5787                           ;incstack = 0
  5788  001F9A  0E00               	movlw	0
  5789  001F9C  6E1B               	movwf	LCD_code@code+1,c
  5790  001F9E  0E02               	movlw	2
  5791  001FA0  6E1A               	movwf	LCD_code@code,c
  5792  001FA2  ECD7  F00D         	call	_LCD_code	;wreg free
  5793                           
  5794                           ;LCD-library.c: 239: LCD_posX = LCD_posY = 1;
  5795  001FA6  0E00               	movlw	0
  5796  001FA8  6E48               	movwf	_LCD_posY+1,c
  5797  001FAA  0E01               	movlw	1
  5798  001FAC  6E47               	movwf	_LCD_posY,c
  5799  001FAE  C047  F049         	movff	_LCD_posY,_LCD_posX
  5800  001FB2  C048  F04A         	movff	_LCD_posY+1,_LCD_posX+1
  5801  001FB6  0012               	return		;funcret
  5802  001FB8                     __end_of_LCD_home:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon	equ	0xFF2
  5811                           intcon2	equ	0xFF1
  5812                           postinc0	equ	0xFEE
  5813                           wreg	equ	0xFE8
  5814                           postdec1	equ	0xFE5
  5815                           fsr1l	equ	0xFE1
  5816                           indf2	equ	0xFDF
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _LCD_displayString *****************
  5822 ;; Defined at:
  5823 ;;		line 151 in file "LCD-library.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  str             2   43[COMRAM] PTR const unsigned char 
  5826 ;;		 -> LCD_displayNumberRight@strNumber(20), LCD_displayNumber@strNumber(20), STR_10(14), STR_9(9), 
  5827 ;;		 -> STR_8(4), STR_7(13), STR_6(5), STR_5(7), 
  5828 ;;		 -> STR_4(8), main@volstring(8), STR_3(17), STR_2(17), 
  5829 ;;		 -> STR_1(17), 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  i               2    4[BANK0 ] int 
  5832 ;;  initialY        2    2[BANK0 ] int 
  5833 ;;  initialX        2    0[BANK0 ] int 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5843 ;;      Params:         2       0       0       0       0       0       0       0       0
  5844 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5845 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5846 ;;      Totals:         4       6       0       0       0       0       0       0       0
  5847 ;;Total ram usage:       10 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    8
  5850 ;; This function calls:
  5851 ;;		_LCD_displayChar
  5852 ;;		_LCD_moveLeft
  5853 ;;		_LCD_moveRight
  5854 ;;		_LCD_setCursor
  5855 ;;		_strlen
  5856 ;; This function is called by:
  5857 ;;		_main
  5858 ;;		_startup_sequence
  5859 ;;		_LCD_displayNumber
  5860 ;;		_LCD_displayNumberRight
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text32
  5865  001722                     __ptext32:
  5866                           	opt stack 0
  5867  001722                     _LCD_displayString:
  5868                           	opt stack 22
  5869                           
  5870                           ;LCD-library.c: 153: int initialX = LCD_posX;
  5871                           
  5872                           ;incstack = 0
  5873  001722  C049  F083         	movff	_LCD_posX,LCD_displayString@initialX
  5874  001726  C04A  F084         	movff	_LCD_posX+1,LCD_displayString@initialX+1
  5875                           
  5876                           ;LCD-library.c: 154: int initialY = LCD_posY;
  5877  00172A  C047  F085         	movff	_LCD_posY,LCD_displayString@initialY
  5878  00172E  C048  F086         	movff	_LCD_posY+1,LCD_displayString@initialY+1
  5879                           
  5880                           ;LCD-library.c: 156: for(int i = 0; i < strlen(str); i++) {
  5881  001732  0E00               	movlw	0
  5882  001734  0100               	movlb	0	; () banked
  5883  001736  6F88               	movwf	(LCD_displayString@i+1)& (0+255),b
  5884  001738  0E00               	movlw	0
  5885  00173A  6F87               	movwf	LCD_displayString@i& (0+255),b
  5886  00173C  D030               	goto	l600
  5887  00173E                     
  5888                           ; BSR set to: 0
  5889                           ;LCD-library.c: 157: LCD_displayChar(str[i]);
  5890                           
  5891                           ; BSR set to: 0
  5892  00173E  5187               	movf	LCD_displayString@i& (0+255),w,b
  5893  001740  242C               	addwf	LCD_displayString@str,w,c
  5894  001742  6E2E               	movwf	??_LCD_displayString& (0+255),c
  5895  001744  5188               	movf	(LCD_displayString@i+1)& (0+255),w,b
  5896  001746  202D               	addwfc	LCD_displayString@str+1,w,c
  5897  001748  6E2F               	movwf	(??_LCD_displayString+1)& (0+255),c
  5898  00174A  C02E  FFF6         	movff	??_LCD_displayString,tblptrl
  5899  00174E  C02F  FFF7         	movff	??_LCD_displayString+1,tblptrh
  5900  001752  6AF8               	clrf	tblptru,c
  5901  001754  0E07               	movlw	(high __ramtop+-1)
  5902  001756  64F7               	cpfsgt	tblptrh,c
  5903  001758  D003               	bra	u3197
  5904  00175A  0008               	tblrd		*
  5905  00175C  50F5               	movf	tablat,w,c
  5906  00175E  D005               	bra	u3190
  5907  001760                     u3197:
  5908  001760  CFF6 FFE9          	movff	tblptrl,fsr0l
  5909  001764  CFF7 FFEA          	movff	tblptrh,fsr0h
  5910  001768  50EF               	movf	indf0,w,c
  5911  00176A                     u3190:
  5912  00176A  EC2F  F00E         	call	_LCD_displayChar
  5913                           
  5914                           ;LCD-library.c: 159: if(!LCD_isCursorMoving) {
  5915  00176E  5033               	movf	_LCD_isCursorMoving,w,c
  5916  001770  1034               	iorwf	_LCD_isCursorMoving+1,w,c
  5917  001772  A4D8               	btfss	status,2,c
  5918  001774  D011               	goto	l604
  5919                           
  5920                           ;LCD-library.c: 160: if(LCD_isIncrement) LCD_moveRight(1);
  5921  001776  5045               	movf	_LCD_isIncrement,w,c
  5922  001778  1046               	iorwf	_LCD_isIncrement+1,w,c
  5923  00177A  B4D8               	btfsc	status,2,c
  5924  00177C  D007               	goto	l603
  5925  00177E  0E00               	movlw	0
  5926  001780  6E28               	movwf	LCD_moveRight@howMuch+1,c
  5927  001782  0E01               	movlw	1
  5928  001784  6E27               	movwf	LCD_moveRight@howMuch,c
  5929  001786  EC08  F00F         	call	_LCD_moveRight	;wreg free
  5930  00178A  D006               	goto	l604
  5931  00178C                     l603:
  5932                           
  5933                           ;LCD-library.c: 161: else LCD_moveLeft(1);
  5934  00178C  0E00               	movlw	0
  5935  00178E  6E28               	movwf	LCD_moveLeft@howMuch+1,c
  5936  001790  0E01               	movlw	1
  5937  001792  6E27               	movwf	LCD_moveLeft@howMuch,c
  5938  001794  ECC7  F00E         	call	_LCD_moveLeft	;wreg free
  5939  001798                     l604:
  5940  001798  0100               	movlb	0	; () banked
  5941  00179A  4B87               	infsnz	LCD_displayString@i& (0+255),f,b
  5942  00179C  2B88               	incf	(LCD_displayString@i+1)& (0+255),f,b
  5943  00179E                     l600:
  5944                           
  5945                           ; BSR set to: 0
  5946                           
  5947                           ; BSR set to: 0
  5948  00179E  C02C  F013         	movff	LCD_displayString@str,strlen@s
  5949  0017A2  C02D  F014         	movff	LCD_displayString@str+1,strlen@s+1
  5950  0017A6  EC06  F00E         	call	_strlen	;wreg free
  5951  0017AA  5013               	movf	?_strlen,w,c
  5952  0017AC  0100               	movlb	0	; () banked
  5953  0017AE  5D87               	subwf	LCD_displayString@i& (0+255),w,b
  5954  0017B0  5014               	movf	?_strlen+1,w,c
  5955  0017B2  5988               	subwfb	(LCD_displayString@i+1)& (0+255),w,b
  5956  0017B4  A0D8               	btfss	status,0,c
  5957  0017B6  D7C3               	goto	l601
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;LCD-library.c: 162: }
  5961                           ;LCD-library.c: 163: }
  5962                           ;LCD-library.c: 165: if(!LCD_isCursorMoving) LCD_setCursor(initialX, initialY);
  5963                           
  5964                           ; BSR set to: 0
  5965  0017B8  5033               	movf	_LCD_isCursorMoving,w,c
  5966  0017BA  1034               	iorwf	_LCD_isCursorMoving+1,w,c
  5967  0017BC  A4D8               	btfss	status,2,c
  5968  0017BE  0012               	return	
  5969                           
  5970                           ; BSR set to: 0
  5971  0017C0  C083  F021         	movff	LCD_displayString@initialX,LCD_setCursor@pos
  5972  0017C4  C084  F022         	movff	LCD_displayString@initialX+1,LCD_setCursor@pos+1
  5973  0017C8  C085  F023         	movff	LCD_displayString@initialY,LCD_setCursor@row
  5974  0017CC  C086  F024         	movff	LCD_displayString@initialY+1,LCD_setCursor@row+1
  5975  0017D0  EC42  F00C         	call	_LCD_setCursor	;wreg free
  5976  0017D4  0012               	return	
  5977  0017D6                     __end_of_LCD_displayString:
  5978                           	opt stack 0
  5979                           tblptru	equ	0xFF8
  5980                           tblptrh	equ	0xFF7
  5981                           tblptrl	equ	0xFF6
  5982                           tablat	equ	0xFF5
  5983                           prodh	equ	0xFF4
  5984                           prodl	equ	0xFF3
  5985                           intcon	equ	0xFF2
  5986                           intcon2	equ	0xFF1
  5987                           indf0	equ	0xFEF
  5988                           postinc0	equ	0xFEE
  5989                           fsr0h	equ	0xFEA
  5990                           fsr0l	equ	0xFE9
  5991                           wreg	equ	0xFE8
  5992                           postdec1	equ	0xFE5
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function _strlen *****************
  6000 ;; Defined at:
  6001 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;  s               2   18[COMRAM] PTR const unsigned char 
  6004 ;;		 -> LCD_displayNumberRight@strNumber(20), LCD_displayNumber@strNumber(20), STR_10(14), STR_9(9), 
  6005 ;;		 -> STR_8(4), STR_7(13), STR_6(5), STR_5(7), 
  6006 ;;		 -> STR_4(8), main@volstring(8), STR_3(17), STR_2(17), 
  6007 ;;		 -> STR_1(17), 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  cp              2   22[COMRAM] PTR const unsigned char 
  6010 ;;		 -> LCD_displayNumberRight@strNumber(20), LCD_displayNumber@strNumber(20), STR_10(14), STR_9(9), 
  6011 ;;		 -> STR_8(4), STR_7(13), STR_6(5), STR_5(7), 
  6012 ;;		 -> STR_4(8), main@volstring(8), STR_3(17), STR_2(17), 
  6013 ;;		 -> STR_1(17), 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  2   18[COMRAM] unsigned int 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6023 ;;      Params:         2       0       0       0       0       0       0       0       0
  6024 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6025 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6026 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6027 ;;Total ram usage:        6 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_LCD_displayString
  6034 ;;		_LCD_typewriteString
  6035 ;;		_LCD_displayNumberRight
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text33
  6040  001C0C                     __ptext33:
  6041                           	opt stack 0
  6042  001C0C                     _strlen:
  6043                           	opt stack 28
  6044                           
  6045                           ;incstack = 0
  6046  001C0C  C013  F017         	movff	strlen@s,strlen@cp
  6047  001C10  C014  F018         	movff	strlen@s+1,strlen@cp+1
  6048  001C14  D002               	goto	l1254
  6049  001C16  4A17               	infsnz	strlen@cp,f,c
  6050  001C18  2A18               	incf	strlen@cp+1,f,c
  6051  001C1A                     l1254:
  6052  001C1A  C017  FFF6         	movff	strlen@cp,tblptrl
  6053  001C1E  C018  FFF7         	movff	strlen@cp+1,tblptrh
  6054  001C22  6AF8               	clrf	tblptru,c
  6055  001C24  0E07               	movlw	(high __ramtop+-1)
  6056  001C26  64F7               	cpfsgt	tblptrh,c
  6057  001C28  D003               	bra	u2967
  6058  001C2A  0008               	tblrd		*
  6059  001C2C  50F5               	movf	tablat,w,c
  6060  001C2E  D005               	bra	u2960
  6061  001C30                     u2967:
  6062  001C30  CFF6 FFE9          	movff	tblptrl,fsr0l
  6063  001C34  CFF7 FFEA          	movff	tblptrh,fsr0h
  6064  001C38  50EF               	movf	indf0,w,c
  6065  001C3A                     u2960:
  6066  001C3A  0900               	iorlw	0
  6067  001C3C  A4D8               	btfss	status,2,c
  6068  001C3E  D7EB               	goto	l1255
  6069  001C40  C013  F015         	movff	strlen@s,??_strlen
  6070  001C44  C014  F016         	movff	strlen@s+1,??_strlen+1
  6071  001C48  1E15               	comf	??_strlen,f,c
  6072  001C4A  1E16               	comf	??_strlen+1,f,c
  6073  001C4C  4A15               	infsnz	??_strlen,f,c
  6074  001C4E  2A16               	incf	??_strlen+1,f,c
  6075  001C50  5017               	movf	strlen@cp,w,c
  6076  001C52  2415               	addwf	??_strlen,w,c
  6077  001C54  6E13               	movwf	?_strlen,c
  6078  001C56  5018               	movf	strlen@cp+1,w,c
  6079  001C58  2016               	addwfc	??_strlen+1,w,c
  6080  001C5A  6E14               	movwf	?_strlen+1,c
  6081  001C5C  0012               	return	
  6082  001C5E                     __end_of_strlen:
  6083                           	opt stack 0
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           intcon	equ	0xFF2
  6091                           intcon2	equ	0xFF1
  6092                           indf0	equ	0xFEF
  6093                           postinc0	equ	0xFEE
  6094                           fsr0h	equ	0xFEA
  6095                           fsr0l	equ	0xFE9
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _LCD_displayChar *****************
  6105 ;; Defined at:
  6106 ;;		line 139 in file "LCD-library.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  inputChar       1    wreg     unsigned char 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  inputChar       1   42[COMRAM] unsigned char 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6120 ;;      Params:         0       0       0       0       0       0       0       0       0
  6121 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6123 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    7
  6127 ;; This function calls:
  6128 ;;		_LCD_code
  6129 ;;		_LCD_moveLeft
  6130 ;;		_LCD_moveRight
  6131 ;; This function is called by:
  6132 ;;		_LCD_displayString
  6133 ;;		_LCD_slider
  6134 ;;		_LCD_typewriteString
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           	psect	text34
  6139  001C5E                     __ptext34:
  6140                           	opt stack 0
  6141  001C5E                     _LCD_displayChar:
  6142                           	opt stack 22
  6143                           
  6144                           ;incstack = 0
  6145                           ;LCD_displayChar@inputChar stored from wreg
  6146  001C5E  6E2B               	movwf	LCD_displayChar@inputChar,c
  6147                           
  6148                           ;LCD-library.c: 140: LCD_code(0b1000000000 + inputChar);
  6149  001C60  0E00               	movlw	0
  6150  001C62  242B               	addwf	LCD_displayChar@inputChar,w,c
  6151  001C64  6E1A               	movwf	LCD_code@code,c
  6152  001C66  6A1B               	clrf	LCD_code@code+1,c
  6153  001C68  0E02               	movlw	2
  6154  001C6A  221B               	addwfc	LCD_code@code+1,f,c
  6155  001C6C  ECD7  F00D         	call	_LCD_code	;wreg free
  6156                           
  6157                           ;LCD-library.c: 142: if(LCD_isIncrement) LCD_posX++; else LCD_posX--;
  6158  001C70  5045               	movf	_LCD_isIncrement,w,c
  6159  001C72  1046               	iorwf	_LCD_isIncrement+1,w,c
  6160  001C74  B4D8               	btfsc	status,2,c
  6161  001C76  D003               	goto	l592
  6162  001C78  4A49               	infsnz	_LCD_posX,f,c
  6163  001C7A  2A4A               	incf	_LCD_posX+1,f,c
  6164  001C7C  D003               	goto	l593
  6165  001C7E                     l592:
  6166  001C7E  0649               	decf	_LCD_posX,f,c
  6167  001C80  A0D8               	btfss	status,0,c
  6168  001C82  064A               	decf	_LCD_posX+1,f,c
  6169  001C84                     l593:
  6170                           
  6171                           ;LCD-library.c: 144: if(!LCD_isCursorMoving) {
  6172  001C84  5033               	movf	_LCD_isCursorMoving,w,c
  6173  001C86  1034               	iorwf	_LCD_isCursorMoving+1,w,c
  6174  001C88  A4D8               	btfss	status,2,c
  6175  001C8A  0012               	return	
  6176                           
  6177                           ;LCD-library.c: 145: if(LCD_isIncrement) LCD_moveLeft(1);
  6178  001C8C  5045               	movf	_LCD_isIncrement,w,c
  6179  001C8E  1046               	iorwf	_LCD_isIncrement+1,w,c
  6180  001C90  B4D8               	btfsc	status,2,c
  6181  001C92  D007               	goto	l595
  6182  001C94  0E00               	movlw	0
  6183  001C96  6E28               	movwf	LCD_moveLeft@howMuch+1,c
  6184  001C98  0E01               	movlw	1
  6185  001C9A  6E27               	movwf	LCD_moveLeft@howMuch,c
  6186  001C9C  ECC7  F00E         	call	_LCD_moveLeft	;wreg free
  6187  001CA0  0012               	return	
  6188  001CA2                     l595:
  6189                           
  6190                           ;LCD-library.c: 146: else LCD_moveRight(1);
  6191  001CA2  0E00               	movlw	0
  6192  001CA4  6E28               	movwf	LCD_moveRight@howMuch+1,c
  6193  001CA6  0E01               	movlw	1
  6194  001CA8  6E27               	movwf	LCD_moveRight@howMuch,c
  6195  001CAA  EC08  F00F         	call	_LCD_moveRight	;wreg free
  6196  001CAE  0012               	return	
  6197  001CB0                     __end_of_LCD_displayChar:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           intcon2	equ	0xFF1
  6207                           indf0	equ	0xFEF
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           postdec1	equ	0xFE5
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _LCD_moveRight *****************
  6220 ;; Defined at:
  6221 ;;		line 277 in file "LCD-library.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  howMuch         2   38[COMRAM] int 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6235 ;;      Params:         2       0       0       0       0       0       0       0       0
  6236 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6237 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6238 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6239 ;;Total ram usage:        4 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    6
  6242 ;; This function calls:
  6243 ;;		_LCD_setCursor
  6244 ;; This function is called by:
  6245 ;;		_LCD_displayChar
  6246 ;;		_LCD_displayString
  6247 ;;		_LCD_slider
  6248 ;;		_LCD_typewriteString
  6249 ;;		_LCD_displayNumberRight
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text35
  6254  001E10                     __ptext35:
  6255                           	opt stack 0
  6256  001E10                     _LCD_moveRight:
  6257                           	opt stack 23
  6258                           
  6259                           ;LCD-library.c: 278: if(LCD_posX +howMuch <= 16) {
  6260                           
  6261                           ;incstack = 0
  6262  001E10  5027               	movf	LCD_moveRight@howMuch,w,c
  6263  001E12  2449               	addwf	_LCD_posX,w,c
  6264  001E14  6E29               	movwf	??_LCD_moveRight& (0+255),c
  6265  001E16  5028               	movf	LCD_moveRight@howMuch+1,w,c
  6266  001E18  204A               	addwfc	_LCD_posX+1,w,c
  6267  001E1A  6E2A               	movwf	(??_LCD_moveRight+1)& (0+255),c
  6268  001E1C  BE2A               	btfsc	??_LCD_moveRight+1,7,c
  6269  001E1E  D006               	goto	u2730
  6270  001E20  502A               	movf	??_LCD_moveRight+1,w,c
  6271  001E22  E113               	bnz	l671
  6272  001E24  0E11               	movlw	17
  6273  001E26  5C29               	subwf	??_LCD_moveRight,w,c
  6274  001E28  B0D8               	btfsc	status,0,c
  6275  001E2A  0012               	return	
  6276  001E2C                     u2730:
  6277                           
  6278                           ;LCD-library.c: 279: LCD_posX += howMuch;
  6279  001E2C  5027               	movf	LCD_moveRight@howMuch,w,c
  6280  001E2E  2649               	addwf	_LCD_posX,f,c
  6281  001E30  5028               	movf	LCD_moveRight@howMuch+1,w,c
  6282  001E32  224A               	addwfc	_LCD_posX+1,f,c
  6283                           
  6284                           ;LCD-library.c: 280: LCD_setCursor(LCD_posX, LCD_posY);
  6285  001E34  C049  F021         	movff	_LCD_posX,LCD_setCursor@pos
  6286  001E38  C04A  F022         	movff	_LCD_posX+1,LCD_setCursor@pos+1
  6287  001E3C  C047  F023         	movff	_LCD_posY,LCD_setCursor@row
  6288  001E40  C048  F024         	movff	_LCD_posY+1,LCD_setCursor@row+1
  6289  001E44  EC42  F00C         	call	_LCD_setCursor	;wreg free
  6290  001E48  0012               	return	
  6291  001E4A                     l671:
  6292  001E4A  0012               	return		;funcret
  6293  001E4C                     __end_of_LCD_moveRight:
  6294                           	opt stack 0
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           intcon2	equ	0xFF1
  6303                           indf0	equ	0xFEF
  6304                           postinc0	equ	0xFEE
  6305                           fsr0h	equ	0xFEA
  6306                           fsr0l	equ	0xFE9
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1l	equ	0xFE1
  6310                           indf2	equ	0xFDF
  6311                           fsr2h	equ	0xFDA
  6312                           fsr2l	equ	0xFD9
  6313                           status	equ	0xFD8
  6314                           
  6315 ;; *************** function _LCD_moveLeft *****************
  6316 ;; Defined at:
  6317 ;;		line 270 in file "LCD-library.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  howMuch         2   38[COMRAM] int 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;		None
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      void 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6331 ;;      Params:         2       0       0       0       0       0       0       0       0
  6332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6333 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6334 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6335 ;;Total ram usage:        4 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:    6
  6338 ;; This function calls:
  6339 ;;		_LCD_setCursor
  6340 ;; This function is called by:
  6341 ;;		_LCD_displayChar
  6342 ;;		_LCD_displayString
  6343 ;;		_LCD_typewriteString
  6344 ;;		_LCD_displayNumberRight
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text36
  6349  001D8E                     __ptext36:
  6350                           	opt stack 0
  6351  001D8E                     _LCD_moveLeft:
  6352                           	opt stack 22
  6353                           
  6354                           ;LCD-library.c: 271: if(LCD_posX -howMuch >= 1) {
  6355                           
  6356                           ;incstack = 0
  6357  001D8E  C027  F029         	movff	LCD_moveLeft@howMuch,??_LCD_moveLeft
  6358  001D92  C028  F02A         	movff	LCD_moveLeft@howMuch+1,??_LCD_moveLeft+1
  6359  001D96  1E29               	comf	??_LCD_moveLeft,f,c
  6360  001D98  1E2A               	comf	??_LCD_moveLeft+1,f,c
  6361  001D9A  4A29               	infsnz	??_LCD_moveLeft,f,c
  6362  001D9C  2A2A               	incf	??_LCD_moveLeft+1,f,c
  6363  001D9E  5049               	movf	_LCD_posX,w,c
  6364  001DA0  2629               	addwf	??_LCD_moveLeft,f,c
  6365  001DA2  504A               	movf	_LCD_posX+1,w,c
  6366  001DA4  222A               	addwfc	??_LCD_moveLeft+1,f,c
  6367  001DA6  BE2A               	btfsc	??_LCD_moveLeft+1,7,c
  6368  001DA8  0012               	return	
  6369  001DAA  502A               	movf	??_LCD_moveLeft+1,w,c
  6370  001DAC  E103               	bnz	u2720
  6371  001DAE  0429               	decf	??_LCD_moveLeft,w,c
  6372  001DB0  A0D8               	btfss	status,0,c
  6373  001DB2  0012               	return	
  6374  001DB4                     u2720:
  6375                           
  6376                           ;LCD-library.c: 272: LCD_posX -= howMuch;
  6377  001DB4  5027               	movf	LCD_moveLeft@howMuch,w,c
  6378  001DB6  5E49               	subwf	_LCD_posX,f,c
  6379  001DB8  5028               	movf	LCD_moveLeft@howMuch+1,w,c
  6380  001DBA  5A4A               	subwfb	_LCD_posX+1,f,c
  6381                           
  6382                           ;LCD-library.c: 273: LCD_setCursor(LCD_posX, LCD_posY);
  6383  001DBC  C049  F021         	movff	_LCD_posX,LCD_setCursor@pos
  6384  001DC0  C04A  F022         	movff	_LCD_posX+1,LCD_setCursor@pos+1
  6385  001DC4  C047  F023         	movff	_LCD_posY,LCD_setCursor@row
  6386  001DC8  C048  F024         	movff	_LCD_posY+1,LCD_setCursor@row+1
  6387  001DCC  EC42  F00C         	call	_LCD_setCursor	;wreg free
  6388  001DD0  0012               	return	
  6389  001DD2                     __end_of_LCD_moveLeft:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           intcon2	equ	0xFF1
  6399                           indf0	equ	0xFEF
  6400                           postinc0	equ	0xFEE
  6401                           fsr0h	equ	0xFEA
  6402                           fsr0l	equ	0xFE9
  6403                           wreg	equ	0xFE8
  6404                           postdec1	equ	0xFE5
  6405                           fsr1l	equ	0xFE1
  6406                           indf2	equ	0xFDF
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function _LCD_setCursor *****************
  6412 ;; Defined at:
  6413 ;;		line 223 in file "LCD-library.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  pos             2   32[COMRAM] int 
  6416 ;;  row             2   34[COMRAM] int 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6428 ;;      Params:         4       0       0       0       0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6430 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6431 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6432 ;;Total ram usage:        6 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    5
  6435 ;; This function calls:
  6436 ;;		_LCD_code
  6437 ;; This function is called by:
  6438 ;;		_main
  6439 ;;		_LCD_init
  6440 ;;		_LCD_displayString
  6441 ;;		_LCD_moveLeft
  6442 ;;		_LCD_moveRight
  6443 ;;		_LCD_slider
  6444 ;;		_startup_sequence
  6445 ;;		_LCD_typewriteString
  6446 ;;		_LCD_moveUp
  6447 ;;		_LCD_moveDown
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text37
  6452  001884                     __ptext37:
  6453                           	opt stack 0
  6454  001884                     _LCD_setCursor:
  6455                           	opt stack 24
  6456                           
  6457                           ;LCD-library.c: 224: if(pos >= 1 && pos <= 16 && row >= 1 && row <= 2){
  6458                           
  6459                           ;incstack = 0
  6460  001884  BE22               	btfsc	LCD_setCursor@pos+1,7,c
  6461  001886  0012               	return	
  6462  001888  5022               	movf	LCD_setCursor@pos+1,w,c
  6463  00188A  E103               	bnz	u2680
  6464  00188C  0421               	decf	LCD_setCursor@pos,w,c
  6465  00188E  A0D8               	btfss	status,0,c
  6466  001890  0012               	return	
  6467  001892                     u2680:
  6468  001892  BE22               	btfsc	LCD_setCursor@pos+1,7,c
  6469  001894  D006               	goto	u2690
  6470  001896  5022               	movf	LCD_setCursor@pos+1,w,c
  6471  001898  E147               	bnz	l644
  6472  00189A  0E11               	movlw	17
  6473  00189C  5C21               	subwf	LCD_setCursor@pos,w,c
  6474  00189E  B0D8               	btfsc	status,0,c
  6475  0018A0  0012               	return	
  6476  0018A2                     u2690:
  6477  0018A2  BE24               	btfsc	LCD_setCursor@row+1,7,c
  6478  0018A4  0012               	return	
  6479  0018A6  5024               	movf	LCD_setCursor@row+1,w,c
  6480  0018A8  E103               	bnz	u2700
  6481  0018AA  0423               	decf	LCD_setCursor@row,w,c
  6482  0018AC  A0D8               	btfss	status,0,c
  6483  0018AE  0012               	return	
  6484  0018B0                     u2700:
  6485  0018B0  BE24               	btfsc	LCD_setCursor@row+1,7,c
  6486  0018B2  D006               	goto	u2710
  6487  0018B4  5024               	movf	LCD_setCursor@row+1,w,c
  6488  0018B6  E138               	bnz	l644
  6489  0018B8  0E03               	movlw	3
  6490  0018BA  5C23               	subwf	LCD_setCursor@row,w,c
  6491  0018BC  B0D8               	btfsc	status,0,c
  6492  0018BE  0012               	return	
  6493  0018C0                     u2710:
  6494                           
  6495                           ;LCD-library.c: 225: LCD_posX = pos;
  6496  0018C0  C021  F049         	movff	LCD_setCursor@pos,_LCD_posX
  6497  0018C4  C022  F04A         	movff	LCD_setCursor@pos+1,_LCD_posX+1
  6498                           
  6499                           ;LCD-library.c: 226: LCD_posY = row;
  6500  0018C8  C023  F047         	movff	LCD_setCursor@row,_LCD_posY
  6501  0018CC  C024  F048         	movff	LCD_setCursor@row+1,_LCD_posY+1
  6502                           
  6503                           ;LCD-library.c: 227: switch(row) {
  6504  0018D0  D01B               	goto	l639
  6505  0018D2  0E7F               	movlw	127
  6506  0018D4  2421               	addwf	LCD_setCursor@pos,w,c
  6507  0018D6  6E1A               	movwf	LCD_code@code,c
  6508  0018D8  0E00               	movlw	0
  6509  0018DA  2022               	addwfc	LCD_setCursor@pos+1,w,c
  6510  0018DC  6E1B               	movwf	LCD_code@code+1,c
  6511  0018DE  ECD7  F00D         	call	_LCD_code	;wreg free
  6512  0018E2  0012               	return	
  6513  0018E4  0EBF               	movlw	191
  6514  0018E6  2421               	addwf	LCD_setCursor@pos,w,c
  6515  0018E8  6E1A               	movwf	LCD_code@code,c
  6516  0018EA  0E00               	movlw	0
  6517  0018EC  2022               	addwfc	LCD_setCursor@pos+1,w,c
  6518  0018EE  6E1B               	movwf	LCD_code@code+1,c
  6519  0018F0  ECD7  F00D         	call	_LCD_code	;wreg free
  6520  0018F4  0012               	return	
  6521  0018F6  0E7F               	movlw	127
  6522  0018F8  2421               	addwf	LCD_setCursor@pos,w,c
  6523  0018FA  6E1A               	movwf	LCD_code@code,c
  6524  0018FC  0E00               	movlw	0
  6525  0018FE  2022               	addwfc	LCD_setCursor@pos+1,w,c
  6526  001900  6E1B               	movwf	LCD_code@code+1,c
  6527  001902  ECD7  F00D         	call	_LCD_code	;wreg free
  6528                           
  6529                           ;LCD-library.c: 233: }
  6530  001906  0012               	return	
  6531  001908                     l639:
  6532  001908  C023  F025         	movff	LCD_setCursor@row,??_LCD_setCursor
  6533  00190C  C024  F026         	movff	LCD_setCursor@row+1,??_LCD_setCursor+1
  6534                           
  6535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6536                           ; Switch size 1, requested type "space"
  6537                           ; Number of cases is 1, Range of values is 0 to 0
  6538                           ; switch strategies available:
  6539                           ; Name         Instructions Cycles
  6540                           ; simple_byte            4     3 (average)
  6541                           ;	Chosen strategy is simple_byte
  6542  001910  5026               	movf	??_LCD_setCursor+1,w,c
  6543  001912  0A00               	xorlw	0	; case 0
  6544  001914  A4D8               	btfss	status,2,c
  6545  001916  D7EF               	goto	l643
  6546                           
  6547                           ; Switch size 1, requested type "space"
  6548                           ; Number of cases is 2, Range of values is 1 to 2
  6549                           ; switch strategies available:
  6550                           ; Name         Instructions Cycles
  6551                           ; simple_byte            7     4 (average)
  6552                           ;	Chosen strategy is simple_byte
  6553  001918  5025               	movf	??_LCD_setCursor,w,c
  6554  00191A  0A01               	xorlw	1	; case 1
  6555  00191C  B4D8               	btfsc	status,2,c
  6556  00191E  D7D9               	goto	l640
  6557  001920  0A03               	xorlw	3	; case 2
  6558  001922  B4D8               	btfsc	status,2,c
  6559  001924  D7DF               	goto	l642
  6560  001926  D7E7               	goto	l643
  6561  001928                     l644:
  6562  001928  0012               	return		;funcret
  6563  00192A                     __end_of_LCD_setCursor:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           intcon2	equ	0xFF1
  6573                           indf0	equ	0xFEF
  6574                           postinc0	equ	0xFEE
  6575                           fsr0h	equ	0xFEA
  6576                           fsr0l	equ	0xFE9
  6577                           wreg	equ	0xFE8
  6578                           postdec1	equ	0xFE5
  6579                           fsr1l	equ	0xFE1
  6580                           indf2	equ	0xFDF
  6581                           fsr2h	equ	0xFDA
  6582                           fsr2l	equ	0xFD9
  6583                           status	equ	0xFD8
  6584                           
  6585 ;; *************** function _LCD_cursorOff *****************
  6586 ;; Defined at:
  6587 ;;		line 242 in file "LCD-library.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;		None
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;		None
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      void 
  6594 ;; Registers used:
  6595 ;;		wreg, status,2, status,0, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0
  6602 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6603 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6604 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6605 ;;Total ram usage:        2 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    5
  6608 ;; This function calls:
  6609 ;;		_LCD_code
  6610 ;; This function is called by:
  6611 ;;		_main
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text38
  6616  001DD2                     __ptext38:
  6617                           	opt stack 0
  6618  001DD2                     _LCD_cursorOff:
  6619                           	opt stack 25
  6620                           
  6621                           ;LCD-library.c: 243: if(LCD_isCursorOn) {
  6622                           
  6623                           ;incstack = 0
  6624  001DD2  5041               	movf	_LCD_isCursorOn,w,c
  6625  001DD4  1042               	iorwf	_LCD_isCursorOn+1,w,c
  6626  001DD6  B4D8               	btfsc	status,2,c
  6627  001DD8  0012               	return	
  6628                           
  6629                           ;LCD-library.c: 244: LCD_code(0b0000001000 + (LCD_isDisplayOn<<2) + LCD_isCursorBlinking
      +                          );
  6630  001DDA  C043  F021         	movff	_LCD_isDisplayOn,??_LCD_cursorOff
  6631  001DDE  C044  F022         	movff	_LCD_isDisplayOn+1,??_LCD_cursorOff+1
  6632  001DE2  90D8               	bcf	status,0,c
  6633  001DE4  3621               	rlcf	??_LCD_cursorOff,f,c
  6634  001DE6  3622               	rlcf	??_LCD_cursorOff+1,f,c
  6635  001DE8  90D8               	bcf	status,0,c
  6636  001DEA  3621               	rlcf	??_LCD_cursorOff,f,c
  6637  001DEC  3622               	rlcf	??_LCD_cursorOff+1,f,c
  6638  001DEE  5035               	movf	_LCD_isCursorBlinking,w,c
  6639  001DF0  2621               	addwf	??_LCD_cursorOff,f,c
  6640  001DF2  5036               	movf	_LCD_isCursorBlinking+1,w,c
  6641  001DF4  2222               	addwfc	??_LCD_cursorOff+1,f,c
  6642  001DF6  0E08               	movlw	8
  6643  001DF8  2421               	addwf	??_LCD_cursorOff,w,c
  6644  001DFA  6E1A               	movwf	LCD_code@code,c
  6645  001DFC  0E00               	movlw	0
  6646  001DFE  2022               	addwfc	??_LCD_cursorOff+1,w,c
  6647  001E00  6E1B               	movwf	LCD_code@code+1,c
  6648  001E02  ECD7  F00D         	call	_LCD_code	;wreg free
  6649                           
  6650                           ;LCD-library.c: 245: LCD_isCursorOn = 0;
  6651  001E06  0E00               	movlw	0
  6652  001E08  6E42               	movwf	_LCD_isCursorOn+1,c
  6653  001E0A  0E00               	movlw	0
  6654  001E0C  6E41               	movwf	_LCD_isCursorOn,c
  6655  001E0E  0012               	return	
  6656  001E10                     __end_of_LCD_cursorOff:
  6657                           	opt stack 0
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           prodh	equ	0xFF4
  6663                           prodl	equ	0xFF3
  6664                           intcon	equ	0xFF2
  6665                           intcon2	equ	0xFF1
  6666                           indf0	equ	0xFEF
  6667                           postinc0	equ	0xFEE
  6668                           fsr0h	equ	0xFEA
  6669                           fsr0l	equ	0xFE9
  6670                           wreg	equ	0xFE8
  6671                           postdec1	equ	0xFE5
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _LCD_clear *****************
  6679 ;; Defined at:
  6680 ;;		line 201 in file "LCD-library.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      void 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6694 ;;      Params:         0       0       0       0       0       0       0       0       0
  6695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6697 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    5
  6701 ;; This function calls:
  6702 ;;		_LCD_code
  6703 ;; This function is called by:
  6704 ;;		_main
  6705 ;;		_startup_sequence
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text39
  6710  001FB8                     __ptext39:
  6711                           	opt stack 0
  6712  001FB8                     _LCD_clear:
  6713                           	opt stack 25
  6714                           
  6715                           ;LCD-library.c: 202: LCD_code(0b0000000001);
  6716                           
  6717                           ;incstack = 0
  6718  001FB8  0E00               	movlw	0
  6719  001FBA  6E1B               	movwf	LCD_code@code+1,c
  6720  001FBC  0E01               	movlw	1
  6721  001FBE  6E1A               	movwf	LCD_code@code,c
  6722  001FC0  ECD7  F00D         	call	_LCD_code	;wreg free
  6723                           
  6724                           ;LCD-library.c: 203: LCD_posX = LCD_posY = 1;
  6725  001FC4  0E00               	movlw	0
  6726  001FC6  6E48               	movwf	_LCD_posY+1,c
  6727  001FC8  0E01               	movlw	1
  6728  001FCA  6E47               	movwf	_LCD_posY,c
  6729  001FCC  C047  F049         	movff	_LCD_posY,_LCD_posX
  6730  001FD0  C048  F04A         	movff	_LCD_posY+1,_LCD_posX+1
  6731  001FD4  0012               	return		;funcret
  6732  001FD6                     __end_of_LCD_clear:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           intcon2	equ	0xFF1
  6742                           indf0	equ	0xFEF
  6743                           postinc0	equ	0xFEE
  6744                           fsr0h	equ	0xFEA
  6745                           fsr0l	equ	0xFE9
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _LCD_code *****************
  6755 ;; Defined at:
  6756 ;;		line 77 in file "LCD-library.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  code            2   25[COMRAM] int 
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6770 ;;      Params:         2       0       0       0       0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6772 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6773 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6774 ;;Total ram usage:        7 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    4
  6777 ;; This function calls:
  6778 ;;		_LCD_4bitCode
  6779 ;;		_LCD_8bitCode
  6780 ;; This function is called by:
  6781 ;;		_init_lcd_chars
  6782 ;;		_LCD_displayChar
  6783 ;;		_LCD_clear
  6784 ;;		_LCD_off
  6785 ;;		_LCD_on
  6786 ;;		_LCD_setCursor
  6787 ;;		_LCD_home
  6788 ;;		_LCD_cursorOff
  6789 ;;		_LCD_cursorOn
  6790 ;;		_LCD_blinkCursor
  6791 ;;		_LCD_stopCursorBlinking
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text40
  6796  001BAE                     __ptext40:
  6797                           	opt stack 0
  6798  001BAE                     _LCD_code:
  6799                           	opt stack 25
  6800                           
  6801                           ;LCD-library.c: 80: LCD_4bitCode(code >> 4);
  6802                           
  6803                           ;LCD-library.c: 79: if(4 == 4) {
  6804                           
  6805                           ;LCD-library.c: 78: if(4 == 8) LCD_8bitCode(code);
  6806                           
  6807                           ;incstack = 0
  6808  001BAE  C01A  F01C         	movff	LCD_code@code,??_LCD_code
  6809  001BB2  C01B  F01D         	movff	LCD_code@code+1,??_LCD_code+1
  6810  001BB6  0E04               	movlw	4
  6811  001BB8  6E1E               	movwf	(??_LCD_code+2)& (0+255),c
  6812  001BBA                     u2665:
  6813  001BBA  341D               	rlcf	??_LCD_code+1,w,c
  6814  001BBC  321D               	rrcf	??_LCD_code+1,f,c
  6815  001BBE  321C               	rrcf	??_LCD_code,f,c
  6816  001BC0  2E1E               	decfsz	(??_LCD_code+2)& (0+255),f,c
  6817  001BC2  D7FB               	goto	u2665
  6818  001BC4  C01C  F018         	movff	??_LCD_code,LCD_4bitCode@code
  6819  001BC8  C01D  F019         	movff	??_LCD_code+1,LCD_4bitCode@code+1
  6820  001BCC  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  6821                           
  6822                           ;LCD-library.c: 81: LCD_4bitCode(((code & 0b1100000000)>>4) + (code & 0b1111));
  6823  001BD0  0E0F               	movlw	15
  6824  001BD2  141A               	andwf	LCD_code@code,w,c
  6825  001BD4  6E1C               	movwf	??_LCD_code& (0+255),c
  6826  001BD6  0E00               	movlw	0
  6827  001BD8  141B               	andwf	LCD_code@code+1,w,c
  6828  001BDA  6E1D               	movwf	(??_LCD_code+1)& (0+255),c
  6829  001BDC  C01A  F01E         	movff	LCD_code@code,??_LCD_code+2
  6830  001BE0  C01B  F01F         	movff	LCD_code@code+1,??_LCD_code+3
  6831  001BE4  0E04               	movlw	4
  6832  001BE6  6E20               	movwf	(??_LCD_code+4)& (0+255),c
  6833  001BE8                     u2675:
  6834  001BE8  341F               	rlcf	??_LCD_code+3,w,c
  6835  001BEA  321F               	rrcf	??_LCD_code+3,f,c
  6836  001BEC  321E               	rrcf	??_LCD_code+2,f,c
  6837  001BEE  2E20               	decfsz	(??_LCD_code+4)& (0+255),f,c
  6838  001BF0  D7FB               	goto	u2675
  6839  001BF2  0E30               	movlw	48
  6840  001BF4  161E               	andwf	??_LCD_code+2,f,c
  6841  001BF6  0E00               	movlw	0
  6842  001BF8  161F               	andwf	??_LCD_code+3,f,c
  6843  001BFA  501C               	movf	??_LCD_code,w,c
  6844  001BFC  241E               	addwf	??_LCD_code+2,w,c
  6845  001BFE  6E18               	movwf	LCD_4bitCode@code,c
  6846  001C00  501D               	movf	??_LCD_code+1,w,c
  6847  001C02  201F               	addwfc	??_LCD_code+3,w,c
  6848  001C04  6E19               	movwf	LCD_4bitCode@code+1,c
  6849  001C06  EC0B  F010         	call	_LCD_4bitCode	;wreg free
  6850  001C0A  0012               	return	
  6851  001C0C                     __end_of_LCD_code:
  6852                           	opt stack 0
  6853                           tblptru	equ	0xFF8
  6854                           tblptrh	equ	0xFF7
  6855                           tblptrl	equ	0xFF6
  6856                           tablat	equ	0xFF5
  6857                           prodh	equ	0xFF4
  6858                           prodl	equ	0xFF3
  6859                           intcon	equ	0xFF2
  6860                           intcon2	equ	0xFF1
  6861                           indf0	equ	0xFEF
  6862                           postinc0	equ	0xFEE
  6863                           fsr0h	equ	0xFEA
  6864                           fsr0l	equ	0xFE9
  6865                           wreg	equ	0xFE8
  6866                           postdec1	equ	0xFE5
  6867                           fsr1l	equ	0xFE1
  6868                           indf2	equ	0xFDF
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _LCD_8bitCode *****************
  6874 ;; Defined at:
  6875 ;;		line 59 in file "LCD-library.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  code            2   23[COMRAM] int 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      void 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6889 ;;      Params:         2       0       0       0       0       0       0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6892 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6893 ;;Total ram usage:        2 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    3
  6896 ;; This function calls:
  6897 ;;		_LCD_8bitCodeNoWait
  6898 ;;		_LCD_wait
  6899 ;; This function is called by:
  6900 ;;		_LCD_code
  6901 ;;		_LCD_init
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text41
  6906  002004                     __ptext41:
  6907                           	opt stack 0
  6908  002004                     _LCD_8bitCode:
  6909                           	opt stack 25
  6910                           
  6911                           ;LCD-library.c: 60: LCD_8bitCodeNoWait(code);
  6912                           
  6913                           ;incstack = 0
  6914  002004  C018  F013         	movff	LCD_8bitCode@code,LCD_8bitCodeNoWait@code
  6915  002008  C019  F014         	movff	LCD_8bitCode@code+1,LCD_8bitCodeNoWait@code+1
  6916  00200C  EC7E  F00E         	call	_LCD_8bitCodeNoWait	;wreg free
  6917                           
  6918                           ;LCD-library.c: 61: LCD_wait();
  6919  002010  EC34  F00B         	call	_LCD_wait	;wreg free
  6920  002014  0012               	return		;funcret
  6921  002016                     __end_of_LCD_8bitCode:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           intcon2	equ	0xFF1
  6931                           indf0	equ	0xFEF
  6932                           postinc0	equ	0xFEE
  6933                           fsr0h	equ	0xFEA
  6934                           fsr0l	equ	0xFE9
  6935                           wreg	equ	0xFE8
  6936                           postdec1	equ	0xFE5
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _LCD_8bitCodeNoWait *****************
  6944 ;; Defined at:
  6945 ;;		line 52 in file "LCD-library.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  code            2   18[COMRAM] int 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6959 ;;      Params:         2       0       0       0       0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6961 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6962 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6963 ;;Total ram usage:        5 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    1
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_LCD_8bitCode
  6970 ;;		_LCD_init
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text42
  6975  001CFC                     __ptext42:
  6976                           	opt stack 0
  6977  001CFC                     _LCD_8bitCodeNoWait:
  6978                           	opt stack 26
  6979                           
  6980                           ;LCD-library.c: 53: PORTDbits.RD2 = (code & 0b1000000000) >> 9;
  6981                           
  6982                           ;incstack = 0
  6983  001CFC  C013  F015         	movff	LCD_8bitCodeNoWait@code,??_LCD_8bitCodeNoWait
  6984  001D00  C014  F016         	movff	LCD_8bitCodeNoWait@code+1,??_LCD_8bitCodeNoWait+1
  6985  001D04  0E09               	movlw	9
  6986  001D06  6E17               	movwf	(??_LCD_8bitCodeNoWait+2)& (0+255),c
  6987  001D08                     u2635:
  6988  001D08  3416               	rlcf	??_LCD_8bitCodeNoWait+1,w,c
  6989  001D0A  3216               	rrcf	??_LCD_8bitCodeNoWait+1,f,c
  6990  001D0C  3215               	rrcf	??_LCD_8bitCodeNoWait,f,c
  6991  001D0E  2E17               	decfsz	(??_LCD_8bitCodeNoWait+2)& (0+255),f,c
  6992  001D10  D7FB               	goto	u2635
  6993  001D12  0E01               	movlw	1
  6994  001D14  1615               	andwf	??_LCD_8bitCodeNoWait,f,c
  6995  001D16  4615               	rlncf	??_LCD_8bitCodeNoWait,f,c
  6996  001D18  4615               	rlncf	??_LCD_8bitCodeNoWait,f,c
  6997  001D1A  5083               	movf	3971,w,c	;volatile
  6998  001D1C  1815               	xorwf	??_LCD_8bitCodeNoWait,w,c
  6999  001D1E  0BFB               	andlw	-5
  7000  001D20  1815               	xorwf	??_LCD_8bitCodeNoWait,w,c
  7001  001D22  6E83               	movwf	3971,c	;volatile
  7002                           
  7003                           ;LCD-library.c: 54: PORTDbits.RD1 = (code & 0b0100000000) >> 8;
  7004  001D24  C014  F015         	movff	LCD_8bitCodeNoWait@code+1,??_LCD_8bitCodeNoWait
  7005  001D28  6A16               	clrf	(??_LCD_8bitCodeNoWait+1)& (0+255),c
  7006  001D2A  BE15               	btfsc	??_LCD_8bitCodeNoWait& (0+255),7,c
  7007  001D2C  6816               	setf	(??_LCD_8bitCodeNoWait+1)& (0+255),c
  7008  001D2E  0E01               	movlw	1
  7009  001D30  1615               	andwf	??_LCD_8bitCodeNoWait,f,c
  7010  001D32  4615               	rlncf	??_LCD_8bitCodeNoWait,f,c
  7011  001D34  5083               	movf	3971,w,c	;volatile
  7012  001D36  1815               	xorwf	??_LCD_8bitCodeNoWait,w,c
  7013  001D38  0BFD               	andlw	-3
  7014  001D3A  1815               	xorwf	??_LCD_8bitCodeNoWait,w,c
  7015  001D3C  6E83               	movwf	3971,c	;volatile
  7016                           
  7017                           ;LCD-library.c: 55: PORTD = code & 0b0011111111;
  7018  001D3E  C013  FF83         	movff	LCD_8bitCodeNoWait@code,3971	;volatile
  7019                           
  7020                           ;LCD-library.c: 56: PORTDbits.RD3 = 1;
  7021  001D42  8683               	bsf	3971,3,c	;volatile
  7022                           
  7023                           ;LCD-library.c: 57: PORTDbits.RD3 = 0;
  7024  001D44  9683               	bcf	3971,3,c	;volatile
  7025  001D46  0012               	return		;funcret
  7026  001D48                     __end_of_LCD_8bitCodeNoWait:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon2	equ	0xFF1
  7036                           indf0	equ	0xFEF
  7037                           postinc0	equ	0xFEE
  7038                           fsr0h	equ	0xFEA
  7039                           fsr0l	equ	0xFE9
  7040                           wreg	equ	0xFE8
  7041                           postdec1	equ	0xFE5
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _LCD_4bitCode *****************
  7049 ;; Defined at:
  7050 ;;		line 72 in file "LCD-library.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  code            2   23[COMRAM] int 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7064 ;;      Params:         2       0       0       0       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7067 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7068 ;;Total ram usage:        2 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    3
  7071 ;; This function calls:
  7072 ;;		_LCD_4bitCodeNoWait
  7073 ;;		_LCD_wait
  7074 ;; This function is called by:
  7075 ;;		_LCD_code
  7076 ;;		_LCD_init
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text43
  7081  002016                     __ptext43:
  7082                           	opt stack 0
  7083  002016                     _LCD_4bitCode:
  7084                           	opt stack 25
  7085                           
  7086                           ;LCD-library.c: 73: LCD_4bitCodeNoWait(code);
  7087                           
  7088                           ;incstack = 0
  7089  002016  C018  F013         	movff	LCD_4bitCode@code,LCD_4bitCodeNoWait@code
  7090  00201A  C019  F014         	movff	LCD_4bitCode@code+1,LCD_4bitCodeNoWait@code+1
  7091  00201E  EC42  F00D         	call	_LCD_4bitCodeNoWait	;wreg free
  7092                           
  7093                           ;LCD-library.c: 74: LCD_wait();
  7094  002022  EC34  F00B         	call	_LCD_wait	;wreg free
  7095  002026  0012               	return		;funcret
  7096  002028                     __end_of_LCD_4bitCode:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           indf0	equ	0xFEF
  7107                           postinc0	equ	0xFEE
  7108                           fsr0h	equ	0xFEA
  7109                           fsr0l	equ	0xFE9
  7110                           wreg	equ	0xFE8
  7111                           postdec1	equ	0xFE5
  7112                           fsr1l	equ	0xFE1
  7113                           indf2	equ	0xFDF
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _LCD_wait *****************
  7119 ;; Defined at:
  7120 ;;		line 11 in file "LCD-library.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      void 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7137 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7138 ;;Total ram usage:        0 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    2
  7141 ;; This function calls:
  7142 ;;		_LCD_delay
  7143 ;;		_LCD_delay_us
  7144 ;; This function is called by:
  7145 ;;		_LCD_8bitCode
  7146 ;;		_LCD_4bitCode
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text44
  7151  001668                     __ptext44:
  7152                           	opt stack 0
  7153  001668                     _LCD_wait:
  7154                           	opt stack 25
  7155                           
  7156                           ;LCD-library.c: 13: if(4 == 8) {
  7157                           
  7158                           ;incstack = 0
  7159  001668  D01A               	goto	l547
  7160  00166A                     l549:
  7161                           
  7162                           ;LCD-library.c: 21: PORTDbits.RD3=0; LCD_delay(2);
  7163  00166A  9683               	bcf	3971,3,c	;volatile
  7164  00166C  0E00               	movlw	0
  7165  00166E  6E14               	movwf	LCD_delay@time+1,c
  7166  001670  0E02               	movlw	2
  7167  001672  6E13               	movwf	LCD_delay@time,c
  7168  001674  EC9D  F00F         	call	_LCD_delay	;wreg free
  7169                           
  7170                           ;LCD-library.c: 22: PORTDbits.RD3=1; LCD_delay(2);
  7171  001678  8683               	bsf	3971,3,c	;volatile
  7172  00167A  0E00               	movlw	0
  7173  00167C  6E14               	movwf	LCD_delay@time+1,c
  7174  00167E  0E02               	movlw	2
  7175  001680  6E13               	movwf	LCD_delay@time,c
  7176  001682  EC9D  F00F         	call	_LCD_delay	;wreg free
  7177  001686  BE83               	btfsc	3971,7,c	;volatile
  7178  001688  D7F0               	goto	l549
  7179                           
  7180                           ;LCD-library.c: 23: }
  7181                           ;LCD-library.c: 24: PORTDbits.RD3 = 0; LCD_delay(2);
  7182  00168A  9683               	bcf	3971,3,c	;volatile
  7183  00168C  0E00               	movlw	0
  7184  00168E  6E14               	movwf	LCD_delay@time+1,c
  7185  001690  0E02               	movlw	2
  7186  001692  6E13               	movwf	LCD_delay@time,c
  7187  001694  EC9D  F00F         	call	_LCD_delay	;wreg free
  7188                           
  7189                           ;LCD-library.c: 26: TRISD = 0x00;
  7190  001698  0E00               	movlw	0
  7191  00169A  6E95               	movwf	3989,c	;volatile
  7192                           
  7193                           ;LCD-library.c: 27: }
  7194  00169C  0012               	return	
  7195  00169E                     l547:
  7196                           
  7197                           ;LCD-library.c: 29: TRISD |= 0b11110000;
  7198  00169E  0EF0               	movlw	240
  7199  0016A0  1295               	iorwf	3989,f,c	;volatile
  7200                           
  7201                           ;LCD-library.c: 30: PORTDbits.RD2 = 0;
  7202  0016A2  9483               	bcf	3971,2,c	;volatile
  7203                           
  7204                           ;LCD-library.c: 31: PORTDbits.RD1 = 1;
  7205  0016A4  8283               	bsf	3971,1,c	;volatile
  7206                           
  7207                           ;LCD-library.c: 34: PORTDbits.RD3 = 1; LCD_delay(2);
  7208  0016A6  8683               	bsf	3971,3,c	;volatile
  7209  0016A8  0E00               	movlw	0
  7210  0016AA  6E14               	movwf	LCD_delay@time+1,c
  7211  0016AC  0E02               	movlw	2
  7212  0016AE  6E13               	movwf	LCD_delay@time,c
  7213  0016B0  EC9D  F00F         	call	_LCD_delay	;wreg free
  7214                           
  7215                           ;LCD-library.c: 35: while(PORTDbits.RD7) {
  7216  0016B4  D01C               	goto	l553
  7217  0016B6                     l554:
  7218                           
  7219                           ;LCD-library.c: 36: PORTDbits.RD3=0; LCD_delay(2);
  7220  0016B6  9683               	bcf	3971,3,c	;volatile
  7221  0016B8  0E00               	movlw	0
  7222  0016BA  6E14               	movwf	LCD_delay@time+1,c
  7223  0016BC  0E02               	movlw	2
  7224  0016BE  6E13               	movwf	LCD_delay@time,c
  7225  0016C0  EC9D  F00F         	call	_LCD_delay	;wreg free
  7226                           
  7227                           ;LCD-library.c: 37: PORTDbits.RD3=1; LCD_delay(2);
  7228  0016C4  8683               	bsf	3971,3,c	;volatile
  7229  0016C6  0E00               	movlw	0
  7230  0016C8  6E14               	movwf	LCD_delay@time+1,c
  7231  0016CA  0E02               	movlw	2
  7232  0016CC  6E13               	movwf	LCD_delay@time,c
  7233  0016CE  EC9D  F00F         	call	_LCD_delay	;wreg free
  7234                           
  7235                           ;LCD-library.c: 38: PORTDbits.RD3=0; LCD_delay(2);
  7236  0016D2  9683               	bcf	3971,3,c	;volatile
  7237  0016D4  0E00               	movlw	0
  7238  0016D6  6E14               	movwf	LCD_delay@time+1,c
  7239  0016D8  0E02               	movlw	2
  7240  0016DA  6E13               	movwf	LCD_delay@time,c
  7241  0016DC  EC9D  F00F         	call	_LCD_delay	;wreg free
  7242                           
  7243                           ;LCD-library.c: 39: PORTDbits.RD3=1; LCD_delay(2);
  7244  0016E0  8683               	bsf	3971,3,c	;volatile
  7245  0016E2  0E00               	movlw	0
  7246  0016E4  6E14               	movwf	LCD_delay@time+1,c
  7247  0016E6  0E02               	movlw	2
  7248  0016E8  6E13               	movwf	LCD_delay@time,c
  7249  0016EA  EC9D  F00F         	call	_LCD_delay	;wreg free
  7250  0016EE                     l553:
  7251  0016EE  BE83               	btfsc	3971,7,c	;volatile
  7252  0016F0  D7E2               	goto	l554
  7253                           
  7254                           ;LCD-library.c: 40: }
  7255                           ;LCD-library.c: 41: PORTDbits.RD3=0; LCD_delay(2);
  7256  0016F2  9683               	bcf	3971,3,c	;volatile
  7257  0016F4  0E00               	movlw	0
  7258  0016F6  6E14               	movwf	LCD_delay@time+1,c
  7259  0016F8  0E02               	movlw	2
  7260  0016FA  6E13               	movwf	LCD_delay@time,c
  7261  0016FC  EC9D  F00F         	call	_LCD_delay	;wreg free
  7262                           
  7263                           ;LCD-library.c: 42: PORTDbits.RD3=1; LCD_delay(2);
  7264  001700  8683               	bsf	3971,3,c	;volatile
  7265  001702  0E00               	movlw	0
  7266  001704  6E14               	movwf	LCD_delay@time+1,c
  7267  001706  0E02               	movlw	2
  7268  001708  6E13               	movwf	LCD_delay@time,c
  7269  00170A  EC9D  F00F         	call	_LCD_delay	;wreg free
  7270                           
  7271                           ;LCD-library.c: 43: PORTDbits.RD3=0; LCD_delay(2);
  7272  00170E  9683               	bcf	3971,3,c	;volatile
  7273  001710  0E00               	movlw	0
  7274  001712  6E14               	movwf	LCD_delay@time+1,c
  7275  001714  0E02               	movlw	2
  7276  001716  6E13               	movwf	LCD_delay@time,c
  7277  001718  EC9D  F00F         	call	_LCD_delay	;wreg free
  7278                           
  7279                           ;LCD-library.c: 45: TRISD &= 0b00001111;
  7280  00171C  0E0F               	movlw	15
  7281  00171E  1695               	andwf	3989,f,c	;volatile
  7282                           
  7283                           ;LCD-library.c: 47: }
  7284                           ;LCD-library.c: 48: }
  7285  001720  0012               	return	
  7286  001722                     __end_of_LCD_wait:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           indf0	equ	0xFEF
  7297                           postinc0	equ	0xFEE
  7298                           fsr0h	equ	0xFEA
  7299                           fsr0l	equ	0xFE9
  7300                           wreg	equ	0xFE8
  7301                           postdec1	equ	0xFE5
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _LCD_delay_us *****************
  7309 ;; Defined at:
  7310 ;;		line 7 in file "LCD-library.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  us              2   18[COMRAM] int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  i               2   21[COMRAM] int 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7324 ;;      Params:         2       0       0       0       0       0       0       0       0
  7325 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7326 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7327 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7328 ;;Total ram usage:        5 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    1
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_LCD_wait
  7335 ;;		_LCD_init
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text45
  7340  001EB8                     __ptext45:
  7341                           	opt stack 0
  7342  001EB8                     _LCD_delay_us:
  7343                           	opt stack 25
  7344                           
  7345                           ;incstack = 0
  7346  001EB8  0E00               	movlw	0
  7347  001EBA  6E17               	movwf	LCD_delay_us@i+1,c
  7348  001EBC  0E00               	movlw	0
  7349  001EBE  6E16               	movwf	LCD_delay_us@i,c
  7350  001EC0  D007               	goto	l526
  7351  001EC2                     l527:
  7352  001EC2  F000 F000          	nop2		;2 cycle nop
  7353  001EC6  F000 F000          	nop2		;2 cycle nop
  7354  001ECA  F000               	nop	
  7355  001ECC  4A16               	infsnz	LCD_delay_us@i,f,c
  7356  001ECE  2A17               	incf	LCD_delay_us@i+1,f,c
  7357  001ED0                     l526:
  7358  001ED0  5013               	movf	LCD_delay_us@us,w,c
  7359  001ED2  5C16               	subwf	LCD_delay_us@i,w,c
  7360  001ED4  5017               	movf	LCD_delay_us@i+1,w,c
  7361  001ED6  0A80               	xorlw	128
  7362  001ED8  6E15               	movwf	??_LCD_delay_us& (0+255),c
  7363  001EDA  5014               	movf	LCD_delay_us@us+1,w,c
  7364  001EDC  0A80               	xorlw	128
  7365  001EDE  5815               	subwfb	??_LCD_delay_us& (0+255),w,c
  7366  001EE0  B0D8               	btfsc	status,0,c
  7367  001EE2  0012               	return	
  7368  001EE4  D7EE               	goto	l527
  7369  001EE6                     __end_of_LCD_delay_us:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           indf0	equ	0xFEF
  7380                           postinc0	equ	0xFEE
  7381                           fsr0h	equ	0xFEA
  7382                           fsr0l	equ	0xFE9
  7383                           wreg	equ	0xFE8
  7384                           postdec1	equ	0xFE5
  7385                           fsr1l	equ	0xFE1
  7386                           indf2	equ	0xFDF
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function _LCD_delay *****************
  7392 ;; Defined at:
  7393 ;;		line 6 in file "LCD-library.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  time            2   18[COMRAM] int 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;  i               2   21[COMRAM] int 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      void 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7407 ;;      Params:         2       0       0       0       0       0       0       0       0
  7408 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7409 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7410 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7411 ;;Total ram usage:        5 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    1
  7414 ;; This function calls:
  7415 ;;		Nothing
  7416 ;; This function is called by:
  7417 ;;		_LCD_wait
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text46
  7422  001F3A                     __ptext46:
  7423                           	opt stack 0
  7424  001F3A                     _LCD_delay:
  7425                           	opt stack 25
  7426                           
  7427                           ;incstack = 0
  7428  001F3A  0E00               	movlw	0
  7429  001F3C  6E17               	movwf	LCD_delay@i+1,c
  7430  001F3E  0E00               	movlw	0
  7431  001F40  6E16               	movwf	LCD_delay@i,c
  7432  001F42  D002               	goto	l520
  7433  001F44  4A16               	infsnz	LCD_delay@i,f,c
  7434  001F46  2A17               	incf	LCD_delay@i+1,f,c
  7435  001F48                     l520:
  7436  001F48  5013               	movf	LCD_delay@time,w,c
  7437  001F4A  5C16               	subwf	LCD_delay@i,w,c
  7438  001F4C  5017               	movf	LCD_delay@i+1,w,c
  7439  001F4E  0A80               	xorlw	128
  7440  001F50  6E15               	movwf	??_LCD_delay& (0+255),c
  7441  001F52  5014               	movf	LCD_delay@time+1,w,c
  7442  001F54  0A80               	xorlw	128
  7443  001F56  5815               	subwfb	??_LCD_delay& (0+255),w,c
  7444  001F58  B0D8               	btfsc	status,0,c
  7445  001F5A  0012               	return	
  7446  001F5C  D7F3               	goto	l521
  7447  001F5E                     __end_of_LCD_delay:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon2	equ	0xFF1
  7457                           indf0	equ	0xFEF
  7458                           postinc0	equ	0xFEE
  7459                           fsr0h	equ	0xFEA
  7460                           fsr0l	equ	0xFE9
  7461                           wreg	equ	0xFE8
  7462                           postdec1	equ	0xFE5
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function _LCD_4bitCodeNoWait *****************
  7470 ;; Defined at:
  7471 ;;		line 64 in file "LCD-library.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  code            2   18[COMRAM] int 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;		None
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      void 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7485 ;;      Params:         2       0       0       0       0       0       0       0       0
  7486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7487 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7488 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7489 ;;Total ram usage:        5 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_LCD_4bitCode
  7496 ;;		_LCD_init
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text47
  7501  001A84                     __ptext47:
  7502                           	opt stack 0
  7503  001A84                     _LCD_4bitCodeNoWait:
  7504                           	opt stack 26
  7505                           
  7506                           ;LCD-library.c: 65: PORTDbits.RD2 = (code & 0b100000) >> 5;
  7507                           
  7508                           ;incstack = 0
  7509  001A84  C013  F015         	movff	LCD_4bitCodeNoWait@code,??_LCD_4bitCodeNoWait
  7510  001A88  C014  F016         	movff	LCD_4bitCodeNoWait@code+1,??_LCD_4bitCodeNoWait+1
  7511  001A8C  0E05               	movlw	5
  7512  001A8E  6E17               	movwf	(??_LCD_4bitCodeNoWait+2)& (0+255),c
  7513  001A90                     u2645:
  7514  001A90  3416               	rlcf	??_LCD_4bitCodeNoWait+1,w,c
  7515  001A92  3216               	rrcf	??_LCD_4bitCodeNoWait+1,f,c
  7516  001A94  3215               	rrcf	??_LCD_4bitCodeNoWait,f,c
  7517  001A96  2E17               	decfsz	(??_LCD_4bitCodeNoWait+2)& (0+255),f,c
  7518  001A98  D7FB               	goto	u2645
  7519  001A9A  0E01               	movlw	1
  7520  001A9C  1615               	andwf	??_LCD_4bitCodeNoWait,f,c
  7521  001A9E  4615               	rlncf	??_LCD_4bitCodeNoWait,f,c
  7522  001AA0  4615               	rlncf	??_LCD_4bitCodeNoWait,f,c
  7523  001AA2  5083               	movf	3971,w,c	;volatile
  7524  001AA4  1815               	xorwf	??_LCD_4bitCodeNoWait,w,c
  7525  001AA6  0BFB               	andlw	-5
  7526  001AA8  1815               	xorwf	??_LCD_4bitCodeNoWait,w,c
  7527  001AAA  6E83               	movwf	3971,c	;volatile
  7528                           
  7529                           ;LCD-library.c: 66: PORTDbits.RD1 = (code & 0b010000) >> 4;
  7530  001AAC  C013  F015         	movff	LCD_4bitCodeNoWait@code,??_LCD_4bitCodeNoWait
  7531  001AB0  C014  F016         	movff	LCD_4bitCodeNoWait@code+1,??_LCD_4bitCodeNoWait+1
  7532  001AB4  0E04               	movlw	4
  7533  001AB6  6E17               	movwf	(??_LCD_4bitCodeNoWait+2)& (0+255),c
  7534  001AB8                     u2655:
  7535  001AB8  3416               	rlcf	??_LCD_4bitCodeNoWait+1,w,c
  7536  001ABA  3216               	rrcf	??_LCD_4bitCodeNoWait+1,f,c
  7537  001ABC  3215               	rrcf	??_LCD_4bitCodeNoWait,f,c
  7538  001ABE  2E17               	decfsz	(??_LCD_4bitCodeNoWait+2)& (0+255),f,c
  7539  001AC0  D7FB               	goto	u2655
  7540  001AC2  0E01               	movlw	1
  7541  001AC4  1615               	andwf	??_LCD_4bitCodeNoWait,f,c
  7542  001AC6  4615               	rlncf	??_LCD_4bitCodeNoWait,f,c
  7543  001AC8  5083               	movf	3971,w,c	;volatile
  7544  001ACA  1815               	xorwf	??_LCD_4bitCodeNoWait,w,c
  7545  001ACC  0BFD               	andlw	-3
  7546  001ACE  1815               	xorwf	??_LCD_4bitCodeNoWait,w,c
  7547  001AD0  6E83               	movwf	3971,c	;volatile
  7548                           
  7549                           ;LCD-library.c: 67: PORTD &= 0b00001111;
  7550  001AD2  0E0F               	movlw	15
  7551  001AD4  1683               	andwf	3971,f,c	;volatile
  7552                           
  7553                           ;LCD-library.c: 68: PORTD |= (code & 0b001111) << 4;
  7554  001AD6  C013  F015         	movff	LCD_4bitCodeNoWait@code,??_LCD_4bitCodeNoWait
  7555  001ADA  0E0F               	movlw	15
  7556  001ADC  1615               	andwf	??_LCD_4bitCodeNoWait,f,c
  7557  001ADE  3815               	swapf	??_LCD_4bitCodeNoWait,w,c
  7558  001AE0  0BF0               	andlw	240
  7559  001AE2  1283               	iorwf	3971,f,c	;volatile
  7560                           
  7561                           ;LCD-library.c: 69: PORTDbits.RD3 = 1;
  7562  001AE4  8683               	bsf	3971,3,c	;volatile
  7563                           
  7564                           ;LCD-library.c: 70: PORTDbits.RD3 = 0;
  7565  001AE6  9683               	bcf	3971,3,c	;volatile
  7566  001AE8  0012               	return		;funcret
  7567  001AEA                     __end_of_LCD_4bitCodeNoWait:
  7568                           	opt stack 0
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           intcon2	equ	0xFF1
  7577                           indf0	equ	0xFEF
  7578                           postinc0	equ	0xFEE
  7579                           fsr0h	equ	0xFEA
  7580                           fsr0l	equ	0xFE9
  7581                           wreg	equ	0xFE8
  7582                           postdec1	equ	0xFE5
  7583                           fsr1l	equ	0xFE1
  7584                           indf2	equ	0xFDF
  7585                           fsr2h	equ	0xFDA
  7586                           fsr2l	equ	0xFD9
  7587                           status	equ	0xFD8
  7588                           
  7589 ;; *************** function _isr *****************
  7590 ;; Defined at:
  7591 ;;		line 76 in file "newmain.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;		None
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;		None
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      void 
  7598 ;; Registers used:
  7599 ;;		wreg, status,2
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7605 ;;      Params:         0       0       0       0       0       0       0       0       0
  7606 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7607 ;;      Temps:         18       0       0       0       0       0       0       0       0
  7608 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7609 ;;Total ram usage:       18 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		Interrupt level 2
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	intcode
  7619  000008                     __pintcode:
  7620                           	opt stack 0
  7621  000008                     _isr:
  7622                           	opt stack 22
  7623                           
  7624                           ;incstack = 0
  7625  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7626  00000A  EDC6  F00A         	call	int_func,f	;refresh shadow registers
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           intcon2	equ	0xFF1
  7635                           indf0	equ	0xFEF
  7636                           postinc0	equ	0xFEE
  7637                           fsr0h	equ	0xFEA
  7638                           fsr0l	equ	0xFE9
  7639                           wreg	equ	0xFE8
  7640                           postdec1	equ	0xFE5
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           fsr2h	equ	0xFDA
  7644                           fsr2l	equ	0xFD9
  7645                           status	equ	0xFD8
  7646                           
  7647                           	psect	intcode_body
  7648  00158C                     __pintcode_body:
  7649                           	opt stack 22
  7650  00158C                     int_func:
  7651                           	opt stack 22
  7652  00158C  0006               	pop		; remove dummy address from shadow register refresh
  7653  00158E  CFFA F001          	movff	pclath,??_isr
  7654  001592  CFFB F002          	movff	pclatu,??_isr+1
  7655  001596  CFE9 F003          	movff	fsr0l,??_isr+2
  7656  00159A  CFEA F004          	movff	fsr0h,??_isr+3
  7657  00159E  CFE1 F005          	movff	fsr1l,??_isr+4
  7658  0015A2  CFE2 F006          	movff	fsr1h,??_isr+5
  7659  0015A6  CFD9 F007          	movff	fsr2l,??_isr+6
  7660  0015AA  CFDA F008          	movff	fsr2h,??_isr+7
  7661  0015AE  CFF3 F009          	movff	prodl,??_isr+8
  7662  0015B2  CFF4 F00A          	movff	prodh,??_isr+9
  7663  0015B6  CFF6 F00B          	movff	tblptrl,??_isr+10
  7664  0015BA  CFF7 F00C          	movff	tblptrh,??_isr+11
  7665  0015BE  CFF8 F00D          	movff	tblptru,??_isr+12
  7666  0015C2  CFF5 F00E          	movff	tablat,??_isr+13
  7667  0015C6  C04D  F00F         	movff	btemp,??_isr+14
  7668  0015CA  C04E  F010         	movff	btemp+1,??_isr+15
  7669  0015CE  C04F  F011         	movff	btemp+2,??_isr+16
  7670  0015D2  C050  F012         	movff	btemp+3,??_isr+17
  7671                           
  7672                           ;newmain.c: 78: if (INTCONbits.RBIF) {
  7673  0015D6  A0F2               	btfss	intcon,0,c	;volatile
  7674  0015D8  D01F               	goto	i2l125
  7675                           
  7676                           ;newmain.c: 79: encoder_a = PORTBbits.RB4;
  7677  0015DA  0E00               	movlw	0
  7678  0015DC  B881               	btfsc	3969,4,c	;volatile
  7679  0015DE  0E01               	movlw	1
  7680  0015E0  6E3E               	movwf	_encoder_a,c	;volatile
  7681                           
  7682                           ;newmain.c: 80: encoder_b = PORTBbits.RB3;
  7683  0015E2  0E00               	movlw	0
  7684  0015E4  B681               	btfsc	3969,3,c	;volatile
  7685  0015E6  0E01               	movlw	1
  7686  0015E8  6E3D               	movwf	_encoder_b,c	;volatile
  7687                           
  7688                           ;newmain.c: 82: if ((!encoder_a) && (encoder_a_prev)) {
  7689  0015EA  503E               	movf	_encoder_a,w,c	;volatile
  7690  0015EC  A4D8               	btfss	status,2,c
  7691  0015EE  D00E               	goto	i2l128
  7692  0015F0  503C               	movf	_encoder_a_prev,w,c	;volatile
  7693  0015F2  B4D8               	btfsc	status,2,c
  7694  0015F4  D00B               	goto	i2l128
  7695                           
  7696                           ;newmain.c: 83: if (encoder_b) {
  7697  0015F6  503D               	movf	_encoder_b,w,c	;volatile
  7698  0015F8  B4D8               	btfsc	status,2,c
  7699  0015FA  D004               	goto	i2l127
  7700                           
  7701                           ;newmain.c: 84: encoder_changed = 1;
  7702  0015FC  0E01               	movlw	1
  7703  0015FE  6E3B               	movwf	_encoder_changed,c	;volatile
  7704                           
  7705                           ;newmain.c: 85: encoder_dir = 1;
  7706  001600  0E01               	movlw	1
  7707  001602  D003               	goto	L15
  7708  001604                     i2l127:
  7709                           
  7710                           ;newmain.c: 87: encoder_changed = 1;
  7711  001604  0E01               	movlw	1
  7712  001606  6E3B               	movwf	_encoder_changed,c	;volatile
  7713                           
  7714                           ;newmain.c: 88: encoder_dir = 0;
  7715  001608  0E00               	movlw	0
  7716  00160A                     L15:
  7717  00160A  6E3A               	movwf	_encoder_dir,c	;volatile
  7718  00160C                     i2l128:
  7719                           
  7720                           ;newmain.c: 89: }
  7721                           ;newmain.c: 90: }
  7722                           ;newmain.c: 91: encoder_a_prev = encoder_a;
  7723  00160C  C03E  F03C         	movff	_encoder_a,_encoder_a_prev	;volatile
  7724                           
  7725                           ;newmain.c: 92: PORTB = PORTB;
  7726  001610  CF81 FF81          	movff	3969,3969	;volatile
  7727                           
  7728                           ;newmain.c: 93: INTCONbits.RBIF = 0;
  7729  001614  90F2               	bcf	intcon,0,c	;volatile
  7730                           
  7731                           ;newmain.c: 94: } else if (INTCONbits.T0IF) {
  7732  001616  D002               	goto	i2l130
  7733  001618                     i2l125:
  7734  001618  B4F2               	btfsc	intcon,2,c	;volatile
  7735                           
  7736                           ;newmain.c: 97: INTCONbits.T0IF = 0;
  7737  00161A  94F2               	bcf	intcon,2,c	;volatile
  7738  00161C                     i2l130:
  7739  00161C  C012  F050         	movff	??_isr+17,btemp+3
  7740  001620  C011  F04F         	movff	??_isr+16,btemp+2
  7741  001624  C010  F04E         	movff	??_isr+15,btemp+1
  7742  001628  C00F  F04D         	movff	??_isr+14,btemp
  7743  00162C  C00E  FFF5         	movff	??_isr+13,tablat
  7744  001630  C00D  FFF8         	movff	??_isr+12,tblptru
  7745  001634  C00C  FFF7         	movff	??_isr+11,tblptrh
  7746  001638  C00B  FFF6         	movff	??_isr+10,tblptrl
  7747  00163C  C00A  FFF4         	movff	??_isr+9,prodh
  7748  001640  C009  FFF3         	movff	??_isr+8,prodl
  7749  001644  C008  FFDA         	movff	??_isr+7,fsr2h
  7750  001648  C007  FFD9         	movff	??_isr+6,fsr2l
  7751  00164C  C006  FFE2         	movff	??_isr+5,fsr1h
  7752  001650  C005  FFE1         	movff	??_isr+4,fsr1l
  7753  001654  C004  FFEA         	movff	??_isr+3,fsr0h
  7754  001658  C003  FFE9         	movff	??_isr+2,fsr0l
  7755  00165C  C002  FFFB         	movff	??_isr+1,pclatu
  7756  001660  C001  FFFA         	movff	??_isr,pclath
  7757  001664  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7758  001666  0011               	retfie		f
  7759  001668                     __end_of_isr:
  7760                           	opt stack 0
  7761                           pclatu	equ	0xFFB
  7762                           pclath	equ	0xFFA
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           intcon2	equ	0xFF1
  7771                           indf0	equ	0xFEF
  7772                           postinc0	equ	0xFEE
  7773                           fsr0h	equ	0xFEA
  7774                           fsr0l	equ	0xFE9
  7775                           wreg	equ	0xFE8
  7776                           postdec1	equ	0xFE5
  7777                           fsr1h	equ	0xFE2
  7778                           fsr1l	equ	0xFE1
  7779                           indf2	equ	0xFDF
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           pclatu	equ	0xFFB
  7784                           pclath	equ	0xFFA
  7785                           tblptru	equ	0xFF8
  7786                           tblptrh	equ	0xFF7
  7787                           tblptrl	equ	0xFF6
  7788                           tablat	equ	0xFF5
  7789                           prodh	equ	0xFF4
  7790                           prodl	equ	0xFF3
  7791                           intcon	equ	0xFF2
  7792                           intcon2	equ	0xFF1
  7793                           indf0	equ	0xFEF
  7794                           postinc0	equ	0xFEE
  7795                           fsr0h	equ	0xFEA
  7796                           fsr0l	equ	0xFE9
  7797                           wreg	equ	0xFE8
  7798                           postdec1	equ	0xFE5
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           fsr2h	equ	0xFDA
  7803                           fsr2l	equ	0xFD9
  7804                           status	equ	0xFD8
  7805                           
  7806                           	psect	rparam
  7807  0000                     pclatu	equ	0xFFB
  7808                           pclath	equ	0xFFA
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           indf0	equ	0xFEF
  7818                           postinc0	equ	0xFEE
  7819                           fsr0h	equ	0xFEA
  7820                           fsr0l	equ	0xFE9
  7821                           wreg	equ	0xFE8
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830                           	psect	temp
  7831  00004D                     btemp:
  7832                           	opt stack 0
  7833  00004D                     	ds	1
  7834  0000                     int$flags	set	btemp
  7835  0000                     wtemp6	set	btemp+1
  7836                           pclatu	equ	0xFFB
  7837                           pclath	equ	0xFFA
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           intcon	equ	0xFF2
  7845                           intcon2	equ	0xFF1
  7846                           indf0	equ	0xFEF
  7847                           postinc0	equ	0xFEE
  7848                           fsr0h	equ	0xFEA
  7849                           fsr0l	equ	0xFE9
  7850                           wreg	equ	0xFE8
  7851                           postdec1	equ	0xFE5
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    0
    Data        12
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      76
    BANK0           160     21      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 20
		 -> LCD_displayNumberRight@strNumber(COMRAM[20]), LCD_displayNumber@strNumber(COMRAM[20]), STR_10(CODE[14]), STR_9(CODE[9]), 
		 -> STR_8(CODE[4]), STR_7(CODE[13]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[8]), main@volstring(BANK0[8]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> LCD_displayNumberRight@strNumber(COMRAM[20]), LCD_displayNumber@strNumber(COMRAM[20]), STR_10(CODE[14]), STR_9(CODE[9]), 
		 -> STR_8(CODE[4]), STR_7(CODE[13]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[8]), main@volstring(BANK0[8]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 20
		 -> LCD_displayNumberRight@strNumber(COMRAM[20]), LCD_displayNumber@strNumber(COMRAM[20]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 20
		 -> LCD_displayNumberRight@strNumber(COMRAM[20]), LCD_displayNumber@strNumber(COMRAM[20]), 

    LCD_displayString@str	PTR const unsigned char  size(2) Largest target is 20
		 -> LCD_displayNumberRight@strNumber(COMRAM[20]), LCD_displayNumber@strNumber(COMRAM[20]), STR_10(CODE[14]), STR_9(CODE[9]), 
		 -> STR_8(CODE[4]), STR_7(CODE[13]), STR_6(CODE[5]), STR_5(CODE[7]), 
		 -> STR_4(CODE[8]), main@volstring(BANK0[8]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 

    volumeDB@o	PTR unsigned char  size(2) Largest target is 8
		 -> main@volstring(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_LCD_init
    _volumeDB->___awmod
    ___awmod->___awdiv
    _toggle_mute->_set_volume
    _read_switches_synchronous->_read_switches
    _init_lcd_chars->_LCD_code
    _LCD_slider->_LCD_displayChar
    _LCD_on->_LCD_code
    _LCD_off->_LCD_code
    _LCD_init->_LCD_setCursor
    _LCD_home->_LCD_code
    _LCD_displayString->_LCD_displayChar
    _LCD_displayChar->_LCD_moveLeft
    _LCD_displayChar->_LCD_moveRight
    _LCD_moveRight->_LCD_setCursor
    _LCD_moveLeft->_LCD_setCursor
    _LCD_setCursor->_LCD_code
    _LCD_cursorOff->_LCD_code
    _LCD_clear->_LCD_code
    _LCD_code->_LCD_4bitCode
    _LCD_code->_LCD_8bitCode
    _LCD_8bitCode->_LCD_8bitCodeNoWait
    _LCD_4bitCode->_LCD_4bitCodeNoWait
    _LCD_wait->_LCD_delay
    _LCD_wait->_LCD_delay_us

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCD_displayString

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    10      5  285123
                                              6 BANK0     15    10      5
                          _LCD_clear
                      _LCD_cursorOff
                  _LCD_displayString
                           _LCD_home
                           _LCD_init
                            _LCD_off
                             _LCD_on
                      _LCD_setCursor
                         _LCD_slider
                               _Wait
                      _backlight_off
                       _backlight_on
                  _clear_all_sources
              _clear_all_switch_leds
                     _clear_mute_led
                  _clear_standby_led
                    _clear_store_led
                     _clear_view_led
                     _init_lcd_chars
                      _init_shiftreg
                      _init_switches
                         _init_timer
                        _init_volume
                      _read_switches
          _read_switches_synchronous
                 _set_led_and_source
                    _set_standby_led
                         _set_volume
                        _toggle_mute
         _update_switches_and_relays
                           _volumeDB
 ---------------------------------------------------------------------------------
 (1) _volumeDB                                            11     9      2    3191
                                             32 COMRAM    11     9      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     973
                                             26 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     985
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_switches_and_relays                           6     6      0     260
                                             18 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _toggle_mute                                          0     0      0     784
                     _clear_mute_led
                       _set_mute_led
                         _set_volume
 ---------------------------------------------------------------------------------
 (2) _set_volume                                           5     4      1     784
                                             18 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _set_mute_led                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_mute_led                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_standby_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_led_and_source                                   4     4      0      62
                                             18 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _read_switches_synchronous                            1     1      0     409
                                             22 COMRAM     1     1      0
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _read_switches                                        4     4      0     344
                                             18 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _init_volume                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_switches                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_shiftreg                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd_chars                                       0     0      0   11534
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _clear_view_led                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_store_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_standby_led                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_all_switch_leds                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clear_all_sources                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _backlight_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _backlight_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wait                                                 2     0      2     304
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_slider                                           2     2      0   75817
                                             43 COMRAM     2     2      0
                    _LCD_displayChar
                      _LCD_moveRight
                      _LCD_setCursor
 ---------------------------------------------------------------------------------
 (1) _LCD_on                                               2     2      0   11534
                                             32 COMRAM     2     2      0
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _LCD_off                                              0     0      0   11534
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                            12    12      0   24028
                                             38 COMRAM    12    12      0
                       _LCD_4bitCode
                 _LCD_4bitCodeNoWait
                       _LCD_8bitCode
                 _LCD_8bitCodeNoWait
                       _LCD_delay_ms
                       _LCD_delay_us
                      _LCD_setCursor
 ---------------------------------------------------------------------------------
 (2) _LCD_delay_ms                                         5     3      2     518
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LCD_home                                             0     0      0   11534
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _LCD_displayString                                   10     8      2   93771
                                             43 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                    _LCD_displayChar
                       _LCD_moveLeft
                      _LCD_moveRight
                      _LCD_setCursor
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     490
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_displayChar                                      1     1      0   43837
                                             42 COMRAM     1     1      0
                           _LCD_code
                       _LCD_moveLeft
                      _LCD_moveRight
 ---------------------------------------------------------------------------------
 (2) _LCD_moveRight                                        4     2      2   16226
                                             38 COMRAM     4     2      2
                      _LCD_setCursor
 ---------------------------------------------------------------------------------
 (3) _LCD_moveLeft                                         4     2      2   16046
                                             38 COMRAM     4     2      2
                      _LCD_setCursor
 ---------------------------------------------------------------------------------
 (2) _LCD_setCursor                                        6     2      4   15624
                                             32 COMRAM     6     2      4
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _LCD_cursorOff                                        2     2      0   11534
                                             32 COMRAM     2     2      0
                           _LCD_code
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            0     0      0   11534
                           _LCD_code
 ---------------------------------------------------------------------------------
 (2) _LCD_code                                             7     5      2   11534
                                             25 COMRAM     7     5      2
                       _LCD_4bitCode
                       _LCD_8bitCode
 ---------------------------------------------------------------------------------
 (3) _LCD_8bitCode                                         2     0      2    2690
                                             23 COMRAM     2     0      2
                 _LCD_8bitCodeNoWait
                           _LCD_wait
 ---------------------------------------------------------------------------------
 (4) _LCD_8bitCodeNoWait                                   5     3      2     453
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _LCD_4bitCode                                         2     0      2    3320
                                             23 COMRAM     2     0      2
                 _LCD_4bitCodeNoWait
                           _LCD_wait
 ---------------------------------------------------------------------------------
 (4) _LCD_wait                                             0     0      0    1666
                          _LCD_delay
                       _LCD_delay_us
 ---------------------------------------------------------------------------------
 (5) _LCD_delay_us                                         5     3      2     518
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _LCD_delay                                            5     3      2    1148
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _LCD_4bitCodeNoWait                                   5     3      2     453
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _isr                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_clear
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_cursorOff
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_displayString
     _LCD_displayChar
       _LCD_code
         _LCD_4bitCode
           _LCD_4bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
         _LCD_8bitCode
           _LCD_8bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
       _LCD_moveLeft
         _LCD_setCursor
           _LCD_code
             _LCD_4bitCode
               _LCD_4bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
             _LCD_8bitCode
               _LCD_8bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
       _LCD_moveRight
         _LCD_setCursor
           _LCD_code
             _LCD_4bitCode
               _LCD_4bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
             _LCD_8bitCode
               _LCD_8bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
     _LCD_moveLeft
       _LCD_setCursor
         _LCD_code
           _LCD_4bitCode
             _LCD_4bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
           _LCD_8bitCode
             _LCD_8bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
     _LCD_moveRight
       _LCD_setCursor
         _LCD_code
           _LCD_4bitCode
             _LCD_4bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
           _LCD_8bitCode
             _LCD_8bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
     _LCD_setCursor
       _LCD_code
         _LCD_4bitCode
           _LCD_4bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
         _LCD_8bitCode
           _LCD_8bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
     _strlen
   _LCD_home
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_init
     _LCD_4bitCode
       _LCD_4bitCodeNoWait
       _LCD_wait
         _LCD_delay
         _LCD_delay_us
     _LCD_4bitCodeNoWait
     _LCD_8bitCode
       _LCD_8bitCodeNoWait
       _LCD_wait
         _LCD_delay
         _LCD_delay_us
     _LCD_8bitCodeNoWait
     _LCD_delay_ms
     _LCD_delay_us
     _LCD_setCursor
       _LCD_code
         _LCD_4bitCode
           _LCD_4bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
         _LCD_8bitCode
           _LCD_8bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
   _LCD_off
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_on
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_setCursor
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _LCD_slider
     _LCD_displayChar
       _LCD_code
         _LCD_4bitCode
           _LCD_4bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
         _LCD_8bitCode
           _LCD_8bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
       _LCD_moveLeft
         _LCD_setCursor
           _LCD_code
             _LCD_4bitCode
               _LCD_4bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
             _LCD_8bitCode
               _LCD_8bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
       _LCD_moveRight
         _LCD_setCursor
           _LCD_code
             _LCD_4bitCode
               _LCD_4bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
             _LCD_8bitCode
               _LCD_8bitCodeNoWait
               _LCD_wait
                 _LCD_delay
                 _LCD_delay_us
     _LCD_moveRight
       _LCD_setCursor
         _LCD_code
           _LCD_4bitCode
             _LCD_4bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
           _LCD_8bitCode
             _LCD_8bitCodeNoWait
             _LCD_wait
               _LCD_delay
               _LCD_delay_us
     _LCD_setCursor
       _LCD_code
         _LCD_4bitCode
           _LCD_4bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
         _LCD_8bitCode
           _LCD_8bitCodeNoWait
           _LCD_wait
             _LCD_delay
             _LCD_delay_us
   _Wait
   _backlight_off
   _backlight_on
   _clear_all_sources
   _clear_all_switch_leds
   _clear_mute_led
   _clear_standby_led
   _clear_store_led
   _clear_view_led
   _init_lcd_chars
     _LCD_code
       _LCD_4bitCode
         _LCD_4bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
       _LCD_8bitCode
         _LCD_8bitCodeNoWait
         _LCD_wait
           _LCD_delay
           _LCD_delay_us
   _init_shiftreg
   _init_switches
   _init_timer
   _init_volume
   _read_switches
   _read_switches_synchronous
     _read_switches
   _set_led_and_source
   _set_standby_led
   _set_volume
   _toggle_mute
     _clear_mute_led
     _set_mute_led
     _set_volume
   _update_switches_and_relays
   _volumeDB
     ___awdiv
     ___awmod
       ___awdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      38       5       35.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84      20        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Apr 21 22:49:07 2019

               LCD_moveRight@howMuch 0027                    set_volume@vbitsel 0017  
                       ___awdiv@sign 0018                   _set_led_and_source 1A1E  
                        __CFG_BORV$0 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                                l200 0C6E                                  l210 0CF6  
                                l203 0C84                                  l300 0F5C  
                                l220 0D7E                                  l204 0CBC  
                                l213 0D0C                                  l205 0CB2  
                                l302 0FB4                                  l214 0D44  
                                l303 0FC4                                  l223 0D94  
                                l215 0D3A                                  l224 0DCC  
                                l208 0CC8                                  l137 1FE8  
                                l401 1510                                  l225 0DC2  
                                l209 0D00                                  l138 1FD8  
                                l218 0D50                                  l411 1574  
                                l403 1524                                  l219 0D88  
                                l171 0982                                  l228 0DDA  
                                l180 0A40                                  l413 1588  
                                l405 1538                                  l181 0A5A  
                                l173 099A                                  l165 0910  
                                l182 0A74                                  l174 09F2  
                                l407 154C                                  l271 1AFE  
                                l175 0B00                                  l183 0A8E  
                                l520 1F48                                  l600 179E  
                                l168 0DFA                                  l192 0B88  
                                l184 0AA8                                  l176 0A06  
                                l521 1F44                                  l601 173E  
                                l409 1560                                  l273 1B0E  
                                l193 0BC6                                  l177 0B42  
                                l185 0AC2                                  l169 0948  
                                l418 1F2C                                  l274 1B10  
                                l282 1CD6                                  l194 0C64  
                                l186 0AF6                                  l178 0A0C  
                                l603 178C                                  l419 1F22  
                                l275 1B26                                  l195 0C36  
                                l179 0A26                                  l604 1798  
                                l532 1EA2                                  l533 1E8E  
                                l277 1B36                                  l189 0B6C  
                                l526 1ED0                                  l390 1494  
                                l278 1B38                                  l446 1832  
                                l198 0C60                                  l527 1EC2  
                                l199 0C78                                  l640 18D2  
                                l392 14C0                                  l296 0ED8  
                                l553 16EE                                  l554 16B6  
                                l642 18E4                                  l298 0EFC  
                                l547 169E                                  l643 18F6  
                                l395 14D4                                  l644 1928  
                                l549 166A                                  l397 14E8  
                                l389 1496                                  l639 1908  
                                l671 1E4A                                  l399 14FC  
                                l592 1C7E                                  l593 1C84  
                                l690 1B90                                  l595 1CA2  
                                l691 1B96                                  l860 193E  
                                l861 194E                                  l863 196C  
                                l688 1B80                                  l864 1964  
                                l880 19FC                                  l881 1A06  
                                l873 19C2                                  l882 1A14  
                                l874 19CE                                  l867 198C  
                                l868 1996                                  l876 19E4  
                                l869 19A4                                  l877 19DC  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                     LCD_init@LCD_dl 002D                         __CFG_BOR$OFF 000000  
                                _bal 0082                                  _led 007A  
                                _isr 0008                         ___awmod@sign 0020  
                        ?_LCD_slider 0001                                  prod 000FF3  
                ?_set_led_and_source 0001                                  wreg 000FE8  
                 set_volume@vol_left 0014                         __CFG_FOSC$HS 000000  
                     ??_LCD_4bitCode 001A                         __CFG_LVP$OFF 000000  
             __size_of_LCD_cursorOff 003E                      __end_of_LCD_off 1F9A  
                       __CFG_WDT$OFF 000000                                 l1254 1C1A  
                               l1255 1C16                       ??_LCD_8bitCode 001A  
                               l4138 187A                                 l4350 1B78  
                               l3880 14D4                                 l3872 14C0  
                               l3958 1AF6                                 l3888 14E8  
                               l3986 1B42                                 ?_isr 0001  
                               STR_1 0812                                 STR_2 0801  
                               STR_3 0823                                 STR_4 0847  
                               STR_5 0858                                 STR_6 085F  
                               STR_7 0842                                 STR_8 0864  
                               STR_9 084F                                 u3010 1970  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u3140 182C                                 u3124 17FC  
                               u3125 17F6                                 u3134 1814  
                               u3070 19E8                                 u3135 180E  
                               u2700 18B0                                 u3420 1BA6  
                               u3324 1A4C                                 u3164 184C  
                               u3245 12F0                                 u3325 1A46  
                               u3165 1846                                 u2710 18C0  
                               u3190 176A                                 u3246 12F2  
                               u3334 1A74                                 u3174 1864  
                               u3255 12FA                                 u3335 1A6E  
                               u3175 185E                                 u2720 1DB4  
                               u3256 12FC                                 u2800 1520  
                               u3265 1304                                 u2730 1E2C  
                               u2810 1534                                 u2635 1D08  
                               u3267 1306                                 u2820 1548  
                               u2645 1A90                                 u3197 1760  
                               u2830 155C                                 u2750 14BC  
                               u2655 1AB8                                 u2680 1892  
                               u2840 1570                                 u2760 14D0  
                               u2665 1BBA                                 u2690 18A2  
                               u2850 1584                                 u2770 14E4  
                               u2675 1BE8                                 u3707 1F24  
                               u2780 14F8                                 u3717 1FDA  
                               u2790 150C                                 u3727 1E94  
                               u2960 1C3A                                 u2880 1B1C  
                               u2967 1C30                                 u3687 0984  
                               u3697 09F4            _read_switches_synchronous 1F12  
                               _Wait 1FD6                                 _main 086A  
                               _rear 004C                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 indf0 000FEF  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 004D  
             __size_of_LCD_setCursor 00A6                   main@switch_pressed 0097  
         __size_of_LCD_displayString 00B4                                 prodh 000FF4  
                               prodl 000FF3               __size_of_LCD_moveRight 003C  
                               start 000E                 ??_set_led_and_source 0013  
                 __size_of_LCD_delay 0024                   __size_of_LCD_clear 001E  
                set_volume@vol_right 0013                        __CFG_MCLRE$ON 000000  
           __size_of_LCD_displayChar 0052                         ___param_bank 000000  
        __size_of_LCD_8bitCodeNoWait 004C                                ??_isr 0001  
                      ?_LCD_delay_ms 0013                          _volume_left 0040  
                      ?_LCD_delay_us 0013                     __end_of_LCD_code 1C0C  
                   __end_of_LCD_home 1FB8                     __end_of_LCD_init 1490  
                              ?_Wait 0013                __size_of_backlight_on 0004  
                   __end_of_LCD_wait 1722                                ?_main 0089  
                    __end_of___awdiv 19AE                                STR_10 0834  
                    __end_of___awmod 1A1E                                _CMCON 000FB4  
                    ___awdiv@divisor 0015                       __CFG_DEBUG$OFF 000000  
                              i2l130 161C                                i2l125 1618  
                              i2l127 1604                                i2l128 160C  
                    ___awdiv@counter 0017                                _PORTB 000F81  
                              _PORTC 000F82                                _PORTD 000F83  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                   LCD_displayString@i 0087  
                     __CFG_FCMEN$OFF 000000                         ?_init_volume 0001  
                              _front 004B           read_switches_synchronous@s 0017  
                              _queue 0070                        ?_LCD_moveLeft 0027  
                              pclath 000FFA                                tablat 000FF5  
                              status 000FD8                                wtemp6 004E  
                    volumeDB@gainDec 0027                         _backlight_on 2074  
                __size_of_LCD_slider 0062                      __initialization 1D48  
                       __end_of_Wait 1FF2                         __end_of_main 0E3A  
                      _LCD_cursorOff 1DD2     update_switches_and_relays@i_1104 0018  
                     ??_LCD_delay_ms 0015                      _set_standby_led 2064  
                     ??_LCD_delay_us 0015                   _LCD_4bitCodeNoWait 1A84  
            __size_of_clear_mute_led 0004                               ??_Wait 0015  
                    volumeDB@modulus 0025                          LCD_slider@i 002D  
            __size_of_clear_view_led 0004                               ??_main 008E  
                      _LCD_setCursor 1884                        __activetblptr 000002  
                      _LCD_moveRight 1E10                         _volume_right 003F  
                          ??_LCD_off 0021                  ?_LCD_4bitCodeNoWait 0013  
                  __end_of_LCD_delay 1F5E                    __end_of_LCD_clear 1FD6  
                    __CFG_CCP2MX$OFF 000000               __size_of_backlight_off 0004  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                       ??_LCD_moveLeft 0029  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                   ___awdiv@dividend 0013                               _LCD_on 1E4C  
               ??_LCD_4bitCodeNoWait 0015                       ?_LCD_cursorOff 0001  
               __end_of_LCD_4bitCode 2028                            ??___awdiv 0017  
                          ??___awmod 001F                  LCD_moveLeft@howMuch 0027  
               __end_of_LCD_8bitCode 2016                               clear_0 1D6E  
                             clear_1 1D7A                     ___awdiv@quotient 0019  
                    ___awmod@divisor 001D                       ?_LCD_setCursor 0021  
                    ___awmod@counter 001F                    ??_LCD_displayChar 002B  
                             _strlen 1C0C                       ?_LCD_moveRight 0027  
                       LCD_code@code 001A                         __pdataCOMRAM 0041  
             __size_of_init_shiftreg 001E                       _LCD_isCursorOn 0041  
                   LCD_4bitCode@code 0018                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8               __size_of_init_switches 0010  
                   __end_of_volumeDB 1094                    _muted_volume_left 0037  
                         __accesstop 0060              __end_of__initialization 1D80  
                    __CFG_PBADEN$OFF 000000                            ?_LCD_code 001A  
          LCD_displayString@initialX 0083            LCD_displayString@initialY 0085  
                          ?_LCD_home 0001                            ?_LCD_init 0001  
                      main@volstring 008F                            ?_LCD_wait 0001  
                      ___rparam_used 000001              __end_of_set_standby_led 2068  
                       ?_toggle_mute 0001       __size_of_clear_all_switch_leds 000C  
      __end_of_clear_all_switch_leds 2050                        _backlight_off 2078  
                     __pcstackCOMRAM 0001   __size_of_read_switches_synchronous 0028  
             __size_of_read_switches 00FC                         ??_LCD_slider 002C  
             LCD_8bitCodeNoWait@code 0013                 __size_of_init_volume 002C  
                         __pbssBANK0 0060                 __end_of_LCD_delay_ms 1EB8  
               __end_of_LCD_delay_us 1EE6                              ?_LCD_on 0001  
                      _current_state 0038                           _debug_mode 0039  
       ??_update_switches_and_relays 0013                           ??_LCD_code 001C  
                         ??_LCD_home 0021                           ??_LCD_init 0027  
           __size_of_clear_store_led 0004                           ??_LCD_wait 0018  
                      _init_shiftreg 1F5E                      ??_LCD_cursorOff 0021  
                     ?_backlight_off 0001                   __end_of_LCD_slider 1BAE  
                set_led_and_source@s 0016                        _init_switches 2028  
               __end_of_LCD_moveLeft 1DD2                      ??_LCD_setCursor 0025  
  __end_of_read_switches_synchronous 1F3A                              _CCP1CON 000FBD  
                            _CCP2CON 000FBA                       _clear_mute_led 2060  
                    ??_LCD_moveRight 0029                       _clear_view_led 2068  
                            ?_strlen 0013                              _LCD_off 1F7C  
                read_switches@a2dval 0015  __size_of_update_switches_and_relays 00AE  
                      _read_switches 1490                      __size_of_LCD_on 0038  
                     ?_init_shiftreg 0001                __size_of_LCD_4bitCode 0012  
                       volumeDB@gain 0029                     ?_set_standby_led 0001  
         __end_of_LCD_8bitCodeNoWait 1D48                              __Hparam 0000  
               LCD_displayString@str 002C          __size_of_set_led_and_source 0066  
                            __Lparam 0000              __size_of_init_lcd_chars 0242  
              __size_of_LCD_8bitCode 0012               __end_of_clear_mute_led 2064  
                     ?_init_switches 0001                              ___awdiv 192A  
                            ___awmod 19AE               __end_of_clear_view_led 206C  
                       __psmallconst 0800                              __pcinit 1D48  
                         _init_timer 1FF2                            ?_volumeDB 0021  
                            __ramtop 0800                              __ptext0 086A  
                            __ptext1 0E3A                              __ptext2 19AE  
                            __ptext3 192A                              __ptext4 17D6  
                            __ptext5 1CB0                              __ptext6 1AEA  
                            __ptext7 205C                              __ptext8 2060  
                            __ptext9 2064                        ?_set_mute_led 0001  
                          _T0CONbits 000FD5                      __size_of_strlen 0052  
                          _T1CONbits 000FCD                         __size_of_isr 1660  
                          _T3CONbits 000FB1                     ___awmod@dividend 001B  
                    _LCD_isDisplayOn 0043                       ?_read_switches 0001  
                       _LCD_4bitCode 2016                       __pintcode_body 158C  
                          _LCD_delay 1F3A                            _LCD_clear 1FB8  
               end_of_initialization 1D80                         _LCD_8bitCode 2004  
                    _LCD_isIncrement 0045                        __Lmediumconst 0000  
                            int_func 158C                        LCD_delay@time 0013  
                    ??_backlight_off 0013                        LCD_delay_ms@i 0016  
                      LCD_delay_us@i 0016                      _LCD_displayChar 1C5E  
                        set_volume@i 0015                 __size_of_toggle_mute 004C  
                            postdec1 000FE5                      ?_clear_mute_led 0001  
                            postinc0 000FEE                    ??_clear_store_led 0013  
                  _clear_all_sources 2050                      ?_clear_view_led 0001  
                         _set_volume 1AEA                              strlen@s 0013  
                 ?_clear_all_sources 0001                       ??_set_mute_led 0013  
                         ??_volumeDB 0023                            _PORTBbits 000F81  
                          _PORTDbits 000F83                            _PORTEbits 000F84  
                    set_volume@i_650 0016                  ??_clear_all_sources 0013  
              __size_of_LCD_delay_ms 0034                            _TRISAbits 000F92  
              __size_of_LCD_delay_us 002E                            _TRISBbits 000F93  
                 _muted_volume_right 0081                            _TRISDbits 000F95  
                   LCD_8bitCode@code 0018                           ?_LCD_delay 0013  
                         ?_LCD_clear 0001                        LCD_init@LCD_f 0031  
                      LCD_init@LCD_n 002F                      ??_init_shiftreg 0013  
 __end_of_update_switches_and_relays 1884           _update_switches_and_relays 17D6  
                     __end_of_LCD_on 1E84          update_switches_and_relays@i 0017  
              __size_of_LCD_moveLeft 0044          __size_of_LCD_4bitCodeNoWait 0066  
                    ??_init_switches 0013                    __size_of_LCD_code 005E  
                  __size_of_LCD_home 001E                    __size_of_LCD_init 01BA  
          __end_of_clear_all_sources 205C                    __size_of_LCD_wait 00BA  
                       _LCD_delay_ms 1E84                         _LCD_delay_us 1EB8  
                      __pidataCOMRAM 2038                          ?_init_timer 0001  
                         LCD_delay@i 0016                       __end_of_strlen 1C5E  
                start_initialization 1D48                      ??_read_switches 0013  
                        __end_of_isr 1668                         _LCD_moveLeft 1D8E  
                          Wait@delay 0013              __end_of_LCD_displayChar 1CB0  
                     volumeDB@volume 002B                             ??_LCD_on 0021  
                     _init_lcd_chars 1094                        LCD_slider@pos 002C  
              _clear_all_switch_leds 2044                          ?_set_volume 0013  
                   __CFG_LPT1OSC$OFF 000000                 _LCD_isCursorBlinking 0035  
                    _encoder_changed 003B                     LCD_setCursor@pos 0021  
                   LCD_setCursor@row 0023                             ??_strlen 0015  
                           ?_LCD_off 0001                          __pbssCOMRAM 0033  
                      __pcstackBANK0 0083                        ??_init_volume 0013  
                        ??_LCD_delay 0015                          ??_LCD_clear 0021  
               __end_of_set_mute_led 2060                  __size_of_init_timer 0012  
           LCD_displayChar@inputChar 002B               __end_of_init_lcd_chars 12D6  
                 _LCD_isCursorMoving 0033                        ?_backlight_on 0001  
         __size_of_clear_all_sources 000C                __end_of_LCD_cursorOff 1E10  
                          __pintcode 0008                             ?___awdiv 0013  
                           ?___awmod 001B                            _encoder_a 003E  
                          _encoder_b 003D                __end_of_LCD_setCursor 192A  
         ?_read_switches_synchronous 0001                __end_of_LCD_moveRight 1E4C  
                 _LCD_8bitCodeNoWait 1CFC                          __smallconst 0800  
                  __size_of_volumeDB 025A                  ?_LCD_8bitCodeNoWait 0013  
                __size_of_set_volume 0062                     ?_LCD_displayChar 0001  
                    _clear_store_led 206C                  __end_of_init_volume 1F12  
                           _LATAbits 000F89                             _LATBbits 000F8A  
         __end_of_set_led_and_source 1A84                             _LATCbits 000F8B  
                           _LATEbits 000F8D                             _LCD_code 1BAE  
                    ?_init_lcd_chars 0001                             _LCD_home 1F9A  
                           _LCD_init 12D6                             _LCD_posX 0049  
                           _LCD_posY 0047                             _LCD_wait 1668  
                   ??_clear_mute_led 0013                          _encoder_dir 003A  
                   ??_clear_view_led 0013                       ??_backlight_on 0013  
             ?_clear_all_switch_leds 0001                             _UCFGbits 000F6F  
               ??_LCD_8bitCodeNoWait 0015                             _UCONbits 000F6D  
           __size_of_set_standby_led 0004                           _ADCON0bits 000FC2  
                   __size_of_LCD_off 001E                          _INTCON2bits 000FF1  
                          copy_data0 1D5C                          _LCD_isShift 007E  
        ?_update_switches_and_relays 0001                        ??_toggle_mute 0018  
              __end_of_backlight_off 207C                             __Hrparam 0000  
                           __Lrparam 0000                         _relay_source 007C  
                     _encoder_a_prev 003C                    _clear_standby_led 2070  
                   __size_of___awdiv 0084                     __size_of___awmod 0070  
                       ??_init_timer 0013                   ?_clear_standby_led 0001  
                ??_clear_standby_led 0013              __end_of_clear_store_led 2070  
                        _init_volume 1EE6                             __ptext10 1A1E  
                           __ptext11 1F12                             __ptext20 2070  
                           __ptext12 1490                             __ptext21 2044  
                           __ptext13 1EE6                             __ptext30 1E84  
                           __ptext22 2050                             __ptext14 1FF2  
                           __ptext31 1F9A                             __ptext23 2074  
                           __ptext15 2028                             __ptext40 1BAE  
                           __ptext32 1722                             __ptext24 2078  
                           __ptext16 1F5E                             __ptext41 2004  
                           __ptext33 1C0C                             __ptext25 1FD6  
                           __ptext17 1094                             __ptext42 1CFC  
                           __ptext34 1C5E                             __ptext26 1B4C  
                           __ptext18 2068                             __ptext43 2016  
                           __ptext35 1E10                             __ptext27 1E4C  
                           __ptext19 206C                             __ptext44 1668  
                           __ptext36 1D8E                             __ptext28 1F7C  
                           __ptext45 1EB8                             __ptext37 1884  
                           __ptext29 12D6                             __ptext46 1F3A  
                           __ptext38 1DD2                             __ptext47 1A84  
                           __ptext39 1FB8                __size_of_set_mute_led 0004  
                      __size_of_Wait 001C                        __size_of_main 05D0  
         __end_of_LCD_4bitCodeNoWait 1AEA                __end_of_init_shiftreg 1F7C  
                           _is_muted 0080                   __end_of_init_timer 2004  
                  _LCD_displayString 1722            __end_of_clear_standby_led 2074  
              __end_of_init_switches 2038                   ?_LCD_displayString 002C  
                           int$flags 004D                         ??_set_volume 0014  
                __end_of_toggle_mute 1CFC                             main@argc 0089  
                           main@argv 008B                             _volumeDB 0E3A  
                       _set_mute_led 205C                  ??_LCD_displayString 002E  
                         _INTCONbits 000FF2                           _LCD_slider 1B4C  
               __end_of_backlight_on 2078                    ??_set_standby_led 0013  
              __end_of_read_switches 158C                             intlevel2 0000  
                 __end_of_set_volume 1B4C                       LCD_delay_ms@ms 0013  
          __end_of_LCD_displayString 17D6                       LCD_delay_us@us 0013  
                          volumeDB@o 0021          ??_read_switches_synchronous 0017  
                      _configuration 0060                             strlen@cp 0017  
             LCD_4bitCodeNoWait@code 0013                     ?_clear_store_led 0001  
                      ?_LCD_4bitCode 0018                     ??_init_lcd_chars 0021  
                      ?_LCD_8bitCode 0018              ??_clear_all_switch_leds 0013  
                        _toggle_mute 1CB0           __size_of_clear_standby_led 0004  
